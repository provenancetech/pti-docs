name: Build

on:
  push:
    branches: [ master ]
    tags:
      - '*'

  pull_request:
    branches: [ master ]

  workflow_dispatch:


env:
  GITHUB_USERNAME: ${{ secrets.CI_USERNAME }}
  GITHUB_ACCESS_TOKEN: ${{ secrets.CI_TOKEN }}
  GIT_USERNAME: ${{ secrets.CI_USERNAME }}
  GIT_KEY: ${{ secrets.CI_TOKEN }}
  AWS_ACCESS_KEY_ID: ${{ secrets.GHA_DEV_AWS_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.GHA_DEV_AWS_SECRET_KEY }}
  AWS_DEFAULT_REGION: us-west-2
  # The Twistlock user with the CI User role
  TL_USER: ${{ secrets.TL_USER }}
  # The password for this user account
  TL_PASS: ${{ secrets.TL_PASS }}
  # The base URL for the console -- http://console.<my_company>.com:8083 -- without a trailing /
  TL_CONSOLE_URL: https://us-west1.cloud.twistlock.com/us-3-159215031

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Install dependencies
        run: |
          echo -e "Checking for required packages...\n"
          if ! command -v aws &>/dev/null; then
            echo "AWS CLI is not installed on the host. Installing now..."
            sudo apt -qq update
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
          fi
          if ! command -v jq &>/dev/null; then
            echo "JQ is not installed on the host. Installing now..."
            sudo apt -qq update
            sudo apt install jq -y
          fi
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: '11'
          java-package: jdk


      - name: Login to the registry
        run: DOCKER_USERNAME=${GIT_USERNAME} DOCKER_PASSWORD=${GIT_KEY} make docker-login

      - name: Login to the ecr registry
        run: DOCKER_USERNAME=${GIT_USERNAME} DOCKER_PASSWORD=${GIT_KEY} make ecr-login

      - name: Download twistcli from Twistlock console
        run: |
          curl -k -u $TL_USER:$TL_PASS --output ./twistcli $TL_CONSOLE_URL/api/v1/util/twistcli
          # ...and ensure it's executable.
          sudo chmod a+x ./twistcli

#      - name: Initialize CodeQL
#        uses: github/codeql-action/init@v1
#        with:
#          config-file: ./.github/codeql/codeql_config.yaml
#          external-repository-token: ${{ secrets.CI_TOKEN }}
#          languages: python
#
#      - name: Perform CodeQL Analysis
#        uses: github/codeql-action/analyze@v1

      - name: Build the transaction-import Docker image in ecr
        run: DOCKER_USERNAME=${GIT_USERNAME} DOCKER_PASSWORD=${GIT_KEY} DOCKERFILE_DIR=examples/transaction-import DOCKER_IMAGE=starcard-org/pti-docs/transaction-import-lambda make ecr-release

      - name: Build the transaction-import Docker image
        run: |
          DOCKER_USERNAME=${GIT_USERNAME} DOCKER_PASSWORD=${GIT_KEY} DOCKERFILE_DIR=examples/transaction-import DOCKER_IMAGE=starcard-org/pti-docs/transaction-import-lambda make release
          echo "CONTAINER_IMAGE=$(cat /tmp/com.pti.container.image)" >> $GITHUB_ENV

      - name: Scan the image
        run: |
          # Run the scan with twistcli
          # pushing the results to the Twistlock console.
          # --details returns all vulnerabilities & compliance issues rather than just summaries.
          # -address points to our Twistlock console
          # -u and -p provide credentials for the console.  These creds only need the CI User role.
          # Finally, we provide the name of the image we built with 'docker build', above.
          ./twistcli images scan --details -address $TL_CONSOLE_URL -u $TL_USER -p $TL_PASS $CONTAINER_IMAGE
          # Add --vulnerability-threshold and/or --compliance-threshold to this command to
          # fail builds based on the thresholds.
          # See twistcli documentation for more details.
