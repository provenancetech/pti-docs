{
  "openapi" : "3.0.2",
  "info" : {
    "title" : "Provenance technologies institutional API",
    "description" : "Provenance technologies institutional API specification",
    "license" : {
      "name" : "Private",
      "url" : "https://provenancetech.io"
    },
    "version" : "master"
  },
  "servers" : [ {
    "url" : "https://api.staging.fiant.io/v1"
  }, {
    "url" : "https://api.platform.fiant.io/v1"
  } ],
  "security" : [ {
    "signature" : [ ]
  }, {
    "userToken" : [ ]
  } ],
  "tags" : [ {
    "name" : "Authentication"
  }, {
    "name" : "Users"
  }, {
    "name" : "Wallets"
  }, {
    "name" : "Payment Information"
  }, {
    "name" : "Transaction Assessment"
  }, {
    "name" : "Transactions"
  }, {
    "name" : "Marketplace"
  } ],
  "paths" : {
    "/auth/jwt" : {
      "post" : {
        "tags" : [ "Authentication" ],
        "summary" : "Get a User Token",
        "operationId" : "getUserToken",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/userTokenRequest"
              },
              "example" : {
                "url" : "https://api.staging.fiant.io/v1/user/3121df47-7a05-4b42-9db3-d1ff8a29abf0/transactions/36dbe68f-2747-41c6-8748-559588fd3248",
                "method" : "GET"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "userToken",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/userToken"
                }
              }
            }
          },
          "400" : {
            "description" : "bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/invalidRequestError"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "403" : {
            "description" : "forbidden"
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      }
    },
    "/users" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Get the list of your Users",
        "operationId" : "getListOfUsers",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Offset for pagination. If not specified, the default value is 0.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 9999999,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "Page size for pagination. If not specified, the default value is 20.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortBy",
          "in" : "query",
          "description" : "Sort by field. If not specified, the default value is creation date.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/userPage"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Users" ],
        "summary" : "Overwrite all Userâ€™s information",
        "operationId" : "updateUser",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/oneOfUserSubTypes"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/oneOfUserSubTypes"
                }
              }
            }
          },
          "400" : {
            "description" : "User invalid or missing fields",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/invalidRequestError"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found"
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Users" ],
        "summary" : "Create a User",
        "operationId" : "addAUser",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/oneOfUserSubTypes"
              },
              "example" : {
                "name" : {
                  "firstName" : "John",
                  "lastName" : "Smith"
                },
                "id" : "36dbe68f-2747-41c6-8748-559588fd3248",
                "dateOfBirth" : "1988-09-28",
                "emails" : [ {
                  "address" : "johnsmith@test.com",
                  "default" : true
                } ],
                "phones" : [ {
                  "number" : "12345678901",
                  "type" : "WORK",
                  "default" : true
                } ],
                "addresses" : [ {
                  "streetAddress" : "1, main street",
                  "city" : "New Hampshire",
                  "postalCode" : "10005",
                  "stateCode" : "US-NH",
                  "country" : "US",
                  "default" : true
                } ],
                "sourceOfFunds" : "Creator earnings"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Successfully added User",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/oneOfUserSubTypes"
                }
              }
            }
          },
          "400" : {
            "description" : "Missing required fields on User",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/invalidRequestError"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "409" : {
            "description" : "User already exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        },
        "callbacks" : {
          "userStatusUpdate" : {
            "{$url}" : {
              "post" : {
                "summary" : "Endpoint that receives User status updates",
                "requestBody" : {
                  "content" : {
                    "application/json" : {
                      "schema" : {
                        "$ref" : "#/components/schemas/userStatusObject"
                      }
                    }
                  },
                  "required" : true
                },
                "responses" : {
                  "200" : {
                    "description" : "Your server returns this code if it accepts the callback"
                  },
                  "422" : {
                    "description" : "Your server returns an error"
                  }
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Users" ],
        "summary" : "Add information to a User",
        "operationId" : "mergeUserInfo",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/oneOfUserSubTypes"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/oneOfUserSubTypes"
                }
              }
            }
          },
          "400" : {
            "description" : "User invalid or missing fields",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/invalidRequestError"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found"
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Get a User by ID",
        "description" : "This endpoint is used to get the information for a specific User. The information returned is the information that was collected for the User. PII information is not returned.",
        "operationId" : "getUser",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 255,
            "pattern" : "^[a-z0-9_-]{3,255}$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/oneOfUserSubTypes"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      }
    },
    "/users/assessments" : {
      "post" : {
        "tags" : [ "Users" ],
        "summary" : "Create a new User Assessment",
        "description" : "This endpoint is used to assess a User. Depending on what information is available on the User,  a tier level will be assigned to the assessment, the higher the level is, the more permission he will get on your platform.  Please refer to PTI documentation for more information on the tier levels configuration and scenarios.",
        "operationId" : "startUserAssessment",
        "parameters" : [ {
          "name" : "x-pti-request-id",
          "in" : "header",
          "description" : "Unique identifier of the request. This ID must be provided and stored by the client of this API at the creation of a transaction. This ID is attached to all PTI internal operations as well as the webhook calls. This ID is required to post feedback about a transaction and get support from PTI for a problem on a transaction. Creating two transactions having the same requestId is not allowed.\n",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-scenario-id",
          "in" : "header",
          "description" : "Represents a User action under which transaction amounts will accumulated and will control the User Assessment requirements. The values this header can take must be agreed upon and communicated to PTI. Setting unknown values here will generate an error.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-session-id",
          "in" : "header",
          "description" : "Session ID associated to a UI session for a specific User. Should match the value passed to the PTI SDK at initialization.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-disable-webhook",
          "in" : "header",
          "description" : "Set to true to disable webhook calls for this request.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/kycRequest"
              },
              "example" : {
                "name" : {
                  "firstName" : "john",
                  "lastName" : "smith"
                },
                "id" : "36dbe68f-2747-41c6-8748-559588fd3248",
                "dateOfBirth" : "1988-09-28",
                "emails" : [ {
                  "address" : "johnsmith@test.com",
                  "default" : true
                } ],
                "phones" : [ {
                  "number" : "12345678901",
                  "type" : "WORK",
                  "default" : true
                } ],
                "addresses" : [ {
                  "streetAddress" : "1, main street",
                  "city" : "New Hampshire",
                  "postalCode" : "10005",
                  "stateCode" : "US-NH",
                  "country" : "US",
                  "default" : true
                } ],
                "sourceOfFunds" : "Creator earnings"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "started",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/objectReference"
                }
              }
            }
          },
          "400" : {
            "description" : "User invalid or missing fields",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/invalidRequestError"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden. Happens when the targeted User is not active.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "422" : {
            "description" : "One of these 2 cases: More information about the User is needed in order to approve the Transaction. There is no approved assessment for this User that enables him to perform the operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/oneOfAssessmentValidationError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        },
        "callbacks" : {
          "userAssessUpdate" : {
            "{$url}" : {
              "post" : {
                "summary" : "Endpoint to receive User Assessments updates",
                "requestBody" : {
                  "content" : {
                    "application/json" : {
                      "schema" : {
                        "$ref" : "#/components/schemas/userAssessStatusObject"
                      }
                    }
                  },
                  "required" : true
                },
                "responses" : {
                  "200" : {
                    "description" : "Your server returns this code if it accepts the callback"
                  },
                  "422" : {
                    "description" : "Your server returns an error"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/assessments" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Get a Userâ€™s latest Assessment",
        "operationId" : "getLastKyc",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 255,
            "pattern" : "^[a-z0-9_-]{3,255}$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/userAssessStatusObject"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/documents" : {
      "post" : {
        "tags" : [ "Users" ],
        "summary" : "Upload a Userâ€™s Document (Passport, License, etc)",
        "operationId" : "uploadDocument",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 255,
            "pattern" : "^[a-z0-9_-]{3,255}$",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "$ref" : "#/components/schemas/body"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully uploaded the document"
          },
          "400" : {
            "description" : "Missing required fields on document",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/invalidRequestError"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      }
    },
    "/assets" : {
      "get" : {
        "tags" : [ "Wallets" ],
        "summary" : "Get the list of the supported Assets",
        "operationId" : "getListOfAssets",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "maxItems" : 100,
                  "type" : "array",
                  "example" : [ {
                    "currency" : "BTC",
                    "networks" : [ "BITCOIN" ],
                    "type" : "CRYPTO"
                  }, {
                    "currency" : "USDC",
                    "networks" : [ "ETHEREUM", "POLYGON", "SOLANA" ],
                    "type" : "CRYPTO"
                  }, {
                    "currency" : "USD",
                    "type" : "FIAT"
                  } ],
                  "items" : {
                    "$ref" : "#/components/schemas/currencyAsset"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/wallets" : {
      "get" : {
        "tags" : [ "Wallets" ],
        "summary" : "Get a list of a User's wallets",
        "operationId" : "getWallets",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 255,
            "pattern" : "^[a-z0-9_-]{3,255}$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "maxItems" : 100,
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/wallet"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Wallets" ],
        "summary" : "Create a Wallet for a User",
        "operationId" : "createWallet",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 255,
            "pattern" : "^[a-z0-9_-]{3,255}$",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/walletCreation"
              },
              "example" : {
                "type" : "WALLET",
                "id" : "c8768405-6129-4bda-8a10-8ef234dff30e",
                "currency" : "ETH",
                "network" : "Ethereum"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created a Wallet",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/wallet"
                }
              }
            }
          },
          "400" : {
            "description" : "Missing required fields on Wallet",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/invalidRequestError"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/wallets/{walletId}" : {
      "summary" : "Delete a Wallet",
      "get" : {
        "tags" : [ "Wallets" ],
        "summary" : "Get a Wallet by ID",
        "operationId" : "getWallet",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 255,
            "pattern" : "^[a-z0-9_-]{3,255}$",
            "type" : "string"
          }
        }, {
          "name" : "walletId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 255,
            "pattern" : "^[a-z0-9_-]{3,255}$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/wallet"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Wallets" ],
        "summary" : "Delete a Wallet",
        "operationId" : "deleteWallet",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 255,
            "pattern" : "^[a-z0-9_-]{3,255}$",
            "type" : "string"
          }
        }, {
          "name" : "walletId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 255,
            "pattern" : "^[a-z0-9_-]{3,255}$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/invalidRequestError"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User or Wallet not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/wallets/{walletId}/simulate-payment" : {
      "post" : {
        "tags" : [ "Wallets" ],
        "summary" : "Simulate a Deposit to a Wallet",
        "operationId" : "simulateWalletPayment",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 255,
            "pattern" : "^[a-z0-9_-]{3,255}$",
            "type" : "string"
          }
        }, {
          "name" : "walletId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 255,
            "pattern" : "^[a-z0-9_-]{3,255}$",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "amount of the payment and type of payment method",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/simulatePaymentRequest"
              },
              "example" : {
                "amount" : 100,
                "paymentMethodType" : "ACH"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created a simulated payment to the Wallet."
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "403" : {
            "description" : "forbidden"
          },
          "404" : {
            "description" : "User or Wallet not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/wallets/{walletId}/deposit-address" : {
      "summary" : "Generate a Walletâ€™s Deposit Address",
      "post" : {
        "tags" : [ "Wallets" ],
        "summary" : "Create a crypto deposit address",
        "operationId" : "createWalletDepositAddress",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 255,
            "pattern" : "^[a-z0-9_-]{3,255}$",
            "type" : "string"
          }
        }, {
          "name" : "walletId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 255,
            "pattern" : "^[a-z0-9_-]{3,255}$",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Deposit address request parameters",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/depositAddressRequest"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created a crypto deposit address. The Wallet with its deposit instruction is returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/wallet"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "403" : {
            "description" : "forbidden"
          },
          "404" : {
            "description" : "User or Wallet not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/wallets/{walletId}/virtual-bank-account" : {
      "summary" : "Generate a Walletâ€™s Virtual Bank Account",
      "post" : {
        "tags" : [ "Wallets" ],
        "summary" : "Create a virtual bank account for a Wallet",
        "operationId" : "createWalletVirtualBankAccount",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 255,
            "pattern" : "^[a-z0-9_-]{3,255}$",
            "type" : "string"
          }
        }, {
          "name" : "walletId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 255,
            "pattern" : "^[a-z0-9_-]{3,255}$",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created a Wallet virtual bank account. The Wallet with its deposit instruction is returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/wallet"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "403" : {
            "description" : "forbidden"
          },
          "404" : {
            "description" : "User or Wallet not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/wallets/{walletId}/history" : {
      "get" : {
        "tags" : [ "Wallets" ],
        "summary" : "Retrieve the balance history of a Wallet",
        "operationId" : "getWalletHistory",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 255,
            "pattern" : "^[a-z0-9_-]{3,255}$",
            "type" : "string"
          }
        }, {
          "name" : "walletId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 255,
            "pattern" : "^[a-z0-9_-]{3,255}$",
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Offset for pagination. If not specified, the default value is 0.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 9999999,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "Page size for pagination. If not specified, the default value is 20.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/walletHistoryPage"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "403" : {
            "description" : "forbidden"
          },
          "404" : {
            "description" : "User or Wallet not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/payment-information" : {
      "get" : {
        "tags" : [ "Payment Information" ],
        "summary" : "Get a Userâ€™s Payment Information objects",
        "description" : "This endpoint is used to get the Payment Information for a specific User. The information returned is the information that was collected for the User. You can filter by Payment Information type",
        "operationId" : "getUserPaymentInformations",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 255,
            "pattern" : "^[a-z0-9_-]{3,255}$",
            "type" : "string"
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Type of external Payment Information. If not specified, the default value is ENCRYPTED_CREDIT_CARD. This is used to filter the external Payment Information by type.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/externalPaymentInformationType"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "maxItems" : 100,
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/oneOfExternalPaymentInformation"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Payment Information" ],
        "summary" : "Create a Userâ€™s Payment Information",
        "description" : "This endpoint is used to add a Payment Information for a specific User.",
        "operationId" : "addUserPaymentInformation",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 255,
            "pattern" : "^[a-z0-9_-]{3,255}$",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/oneOfExternalPaymentInformation"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "CREATED",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/oneOfExternalPaymentInformation"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Payment Information",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/invalidRequestError"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                },
                "example" : {
                  "type" : "ENCRYPTED_CREDIT_CARD",
                  "creditCardLast4" : "1234",
                  "cvv" : "789",
                  "creditCardType" : "mastercard",
                  "expirationYear" : "2030",
                  "expirationMonth" : "01",
                  "creditCardBin" : "123456",
                  "cardHolderFirstName" : "John",
                  "cardHolderLastName" : "Smith",
                  "creditCardAddress" : {
                    "streetAddress" : "1 Main street",
                    "city" : "New York",
                    "postalCode" : "10001",
                    "stateCode" : "NY",
                    "country" : "US"
                  },
                  "id" : "6c61b7d4-3676-4903-a991-5eefba1f7a70"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/payment-information/{paymentInformationId}" : {
      "get" : {
        "tags" : [ "Payment Information" ],
        "summary" : "Get a Userâ€™s Payment Information by ID",
        "description" : "This endpoint is used to get a Payment Information for a specific User.",
        "operationId" : "getUserPaymentInformation",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 255,
            "pattern" : "^[a-z0-9_-]{3,255}$",
            "type" : "string"
          }
        }, {
          "name" : "paymentInformationId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 255,
            "pattern" : "^[a-z0-9_-]{3,255}$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/oneOfExternalPaymentInformation"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Payment Information" ],
        "summary" : "Delete a Userâ€™s Payment Information",
        "description" : "This endpoint is used to delete a Payment Information for a specific User.",
        "operationId" : "deleteUserPaymentInformations",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 255,
            "pattern" : "^[a-z0-9_-]{3,255}$",
            "type" : "string"
          }
        }, {
          "name" : "paymentInformationId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 255,
            "pattern" : "^[a-z0-9_-]{3,255}$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "NO CONTENT"
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Payment Information" ],
        "summary" : "Update a Userâ€™s Payment Information",
        "description" : "This endpoint is used to update a Payment Information for a specific User. Note: This endpoint does not support updating Credit Cards.",
        "operationId" : "updatePaymentInformation",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 255,
            "pattern" : "^[a-z0-9_-]{3,255}$",
            "type" : "string"
          }
        }, {
          "name" : "paymentInformationId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 255,
            "pattern" : "^[a-z0-9_-]{3,255}$",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/oneOfExternalPaymentInformation"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/oneOfExternalPaymentInformation"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      }
    },
    "/transactions/assessments" : {
      "post" : {
        "tags" : [ "Transaction Assessment" ],
        "summary" : "Assess a Transaction",
        "description" : "This endpoint is used to assess a Transaction. The Transaction Assessment and User information requirement are evaluated. This step is also done when executing a Transaction, but it can be called as a standalone.",
        "operationId" : "assessTransaction",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-request-id",
          "in" : "header",
          "description" : "Unique identifier of the request. This ID must be provided and stored by the client of this API at the creation of a transaction. This ID is attached to all PTI internal operations as well as the webhook calls. This ID is required to post feedback about a transaction and get support from PTI for a problem on a transaction. Creating two transactions having the same requestId is not allowed.\n",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-scenario-id",
          "in" : "header",
          "description" : "Represents a User action under which transaction amounts will accumulated and will control the User Assessment requirements. The values this header can take must be agreed upon and communicated to PTI. Setting unknown values here will generate an error.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-session-id",
          "in" : "header",
          "description" : "Session ID associated to a UI session for a specific User. Should match the value passed to the PTI SDK at initialization.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-disable-webhook",
          "in" : "header",
          "description" : "Set to true to disable webhook calls for this request.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/oneOfTransactionSubTypes"
              },
              "example" : {
                "sourceMethod" : {
                  "paymentMethodType" : "CREDIT_CARD",
                  "paymentInformation" : {
                    "id" : "4b573a86-fd3f-475d-a90b-3658f2e79719"
                  },
                  "billingEmail" : "user@example.com"
                },
                "destinationMethod" : {
                  "paymentMethodType" : "WALLET",
                  "paymentInformation" : {
                    "id" : "3f8d7e96-5d63-49b4-b4a8-42c70ef0cc82"
                  },
                  "billingEmail" : "user@example.com"
                },
                "type" : "DEPOSIT",
                "transactionTotal" : {
                  "fee" : {
                    "amount" : 10,
                    "currency" : "USD"
                  },
                  "total" : {
                    "amount" : 100,
                    "currency" : "USD"
                  },
                  "subtotal" : {
                    "amount" : 90,
                    "currency" : "USD"
                  }
                },
                "initiator" : {
                  "name" : {
                    "firstName" : "john",
                    "lastName" : "smith"
                  },
                  "id" : "36dbe68f-2747-41c6-8748-559588fd3248",
                  "dateOfBirth" : "1988-09-28",
                  "emails" : [ {
                    "address" : "johnsmith@test.com",
                    "default" : true
                  } ],
                  "phones" : [ {
                    "number" : "12345678901",
                    "type" : "WORK",
                    "default" : true
                  } ],
                  "addresses" : [ {
                    "streetAddress" : "1, main street",
                    "city" : "New Hampshire",
                    "postalCode" : "10005",
                    "stateCode" : "US-NH",
                    "country" : "US",
                    "default" : true
                  } ],
                  "sourceOfFunds" : "Creator earnings"
                },
                "transactionGroupId" : "c8d8ed2a-33df-463b-95af-e59ff6e16414",
                "usdValue" : 100,
                "amount" : 100,
                "date" : "2024-12-13T18:46:40.666+0000"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Successfully added transaction log",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/objectReference"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid fields on Transaction",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/invalidRequestError"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden. Happens when a User involved in the transaction is not active.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "422" : {
            "description" : "One of these 2 cases: More information about the User is needed in order to approve the transaction. There is no approved assessment for this User that enables him to perform the operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/oneOfAssessmentValidationError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        },
        "callbacks" : {
          "transactionAssessUpdate" : {
            "{$url}" : {
              "post" : {
                "summary" : "Endpoint that receives transaction assessment updates",
                "requestBody" : {
                  "content" : {
                    "application/json" : {
                      "schema" : {
                        "$ref" : "#/components/schemas/transactionAssessStatusObject"
                      }
                    }
                  },
                  "required" : true
                },
                "responses" : {
                  "200" : {
                    "description" : "Your server returns this code if it accepts the callback"
                  },
                  "422" : {
                    "description" : "Your server returns an error"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/transactions/assessments/{requestId}" : {
      "get" : {
        "tags" : [ "Transaction Assessment" ],
        "summary" : "Get the transaction assessment status",
        "operationId" : "getTransactionAssess",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "requestId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/transactionAssessStatusObject"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User of Transaction Log not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      }
    },
    "/transactions/validations" : {
      "post" : {
        "tags" : [ "Transaction Assessment" ],
        "summary" : "Validate that a User is allowed to perform a Transaction",
        "operationId" : "transactionInformationAssessment",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-request-id",
          "in" : "header",
          "description" : "Unique identifier of the request. This ID must be provided and stored by the client of this API at the creation of a transaction. This ID is attached to all PTI internal operations as well as the webhook calls. This ID is required to post feedback about a transaction and get support from PTI for a problem on a transaction. Creating two transactions having the same requestId is not allowed.\n",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-scenario-id",
          "in" : "header",
          "description" : "Represents a User action under which transaction amounts will accumulated and will control the User Assessment requirements. The values this header can take must be agreed upon and communicated to PTI. Setting unknown values here will generate an error.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-session-id",
          "in" : "header",
          "description" : "Session ID associated to a UI session for a specific User. Should match the value passed to the PTI SDK at initialization.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-disable-webhook",
          "in" : "header",
          "description" : "Set to true to disable webhook calls for this request.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/oneOfTransactionSubTypes"
              },
              "example" : {
                "sourceMethod" : {
                  "paymentMethodType" : "CREDIT_CARD",
                  "paymentInformation" : {
                    "id" : "4b573a86-fd3f-475d-a90b-3658f2e79719"
                  },
                  "billingEmail" : "user@example.com"
                },
                "destinationMethod" : {
                  "paymentMethodType" : "WALLET",
                  "paymentInformation" : {
                    "id" : "3f8d7e96-5d63-49b4-b4a8-42c70ef0cc82"
                  },
                  "billingEmail" : "user@example.com"
                },
                "type" : "DEPOSIT",
                "transactionTotal" : {
                  "fee" : {
                    "amount" : 10,
                    "currency" : "USD"
                  },
                  "total" : {
                    "amount" : 100,
                    "currency" : "USD"
                  },
                  "subtotal" : {
                    "amount" : 90,
                    "currency" : "USD"
                  }
                },
                "initiator" : {
                  "name" : {
                    "firstName" : "john",
                    "lastName" : "smith"
                  },
                  "id" : "36dbe68f-2747-41c6-8748-559588fd3248",
                  "dateOfBirth" : "1988-09-28",
                  "emails" : [ {
                    "address" : "johnsmith@test.com",
                    "default" : true
                  } ],
                  "phones" : [ {
                    "number" : "12345678901",
                    "type" : "WORK",
                    "default" : true
                  } ],
                  "addresses" : [ {
                    "streetAddress" : "1, main street",
                    "city" : "New Hampshire",
                    "postalCode" : "10005",
                    "stateCode" : "US-NH",
                    "country" : "US",
                    "default" : true
                  } ],
                  "sourceOfFunds" : "Creator earnings"
                },
                "transactionGroupId" : "c8d8ed2a-33df-463b-95af-e59ff6e16414",
                "usdValue" : 100,
                "amount" : 100,
                "date" : "2024-12-13T18:46:40.666+0000"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/oneOfAssessmentValidationError"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      }
    },
    "/transactions/trades/price-estimation" : {
      "post" : {
        "tags" : [ "Transactions" ],
        "summary" : "Estimate the Fill Price of a Trade",
        "operationId" : "estimationTransactionCost",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/tradeTransaction"
              },
              "example" : {
                "sourceMethod" : {
                  "paymentMethodType" : "CREDIT_CARD",
                  "paymentInformation" : {
                    "id" : "4b573a86-fd3f-475d-a90b-3658f2e79719"
                  },
                  "billingEmail" : "user@example.com"
                },
                "destinationMethod" : {
                  "paymentMethodType" : "WALLET",
                  "paymentInformation" : {
                    "id" : "3f8d7e96-5d63-49b4-b4a8-42c70ef0cc82"
                  },
                  "billingEmail" : "user@example.com"
                },
                "type" : "DEPOSIT",
                "transactionTotal" : {
                  "fee" : {
                    "amount" : 10,
                    "currency" : "USD"
                  },
                  "total" : {
                    "amount" : 100,
                    "currency" : "USD"
                  },
                  "subtotal" : {
                    "amount" : 90,
                    "currency" : "USD"
                  }
                },
                "initiator" : {
                  "name" : {
                    "firstName" : "john",
                    "lastName" : "smith"
                  },
                  "id" : "36dbe68f-2747-41c6-8748-559588fd3248",
                  "dateOfBirth" : "1988-09-28",
                  "emails" : [ {
                    "address" : "johnsmith@test.com",
                    "default" : true
                  } ],
                  "phones" : [ {
                    "number" : "12345678901",
                    "type" : "WORK",
                    "default" : true
                  } ],
                  "addresses" : [ {
                    "streetAddress" : "1, main street",
                    "city" : "New Hampshire",
                    "postalCode" : "10005",
                    "stateCode" : "US-NH",
                    "country" : "US",
                    "default" : true
                  } ],
                  "sourceOfFunds" : "Creator earnings"
                },
                "transactionGroupId" : "c8d8ed2a-33df-463b-95af-e59ff6e16414",
                "usdValue" : 100,
                "amount" : 100,
                "date" : "2024-12-13T18:46:40.666+0000"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/tradeQuote"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid fields on Transaction",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/invalidRequestError"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden. Happens when the targeted User is not active.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      }
    },
    "/transactions/deposits" : {
      "post" : {
        "tags" : [ "Transactions" ],
        "summary" : "Create a Deposit (Fiat or Crypto)",
        "description" : "This endpoint is used to execute a deposit (crypto/fiat -in) transaction for a User. The transaction assessment and User information requirement are evaluated before the transaction is executed.",
        "operationId" : "deposit",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-request-id",
          "in" : "header",
          "description" : "Unique identifier of the request. This ID must be provided and stored by the client of this API at the creation of a transaction. This ID is attached to all PTI internal operations as well as the webhook calls. This ID is required to post feedback about a transaction and get support from PTI for a problem on a transaction. Creating two transactions having the same requestId is not allowed.\n",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-scenario-id",
          "in" : "header",
          "description" : "Represents a User action under which transaction amounts will accumulated and will control the User Assessment requirements. The values this header can take must be agreed upon and communicated to PTI. Setting unknown values here will generate an error.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-session-id",
          "in" : "header",
          "description" : "Session ID associated to a UI session for a specific User. Should match the value passed to the PTI SDK at initialization.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-disable-webhook",
          "in" : "header",
          "description" : "Set to true to disable webhook calls for this request.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "x-pti-provider-name",
          "in" : "header",
          "description" : "Used to specify which provider is responsible for handling the given operation. Ignored if the client configuration is not set for passive mode.\n",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/providerName"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/executeDepositTransaction"
              },
              "example" : {
                "sourceMethod" : {
                  "paymentMethodType" : "CREDIT_CARD",
                  "paymentInformation" : {
                    "id" : "4b573a86-fd3f-475d-a90b-3658f2e79719"
                  },
                  "billingEmail" : "user@example.com"
                },
                "destinationMethod" : {
                  "paymentMethodType" : "WALLET",
                  "paymentInformation" : {
                    "id" : "3f8d7e96-5d63-49b4-b4a8-42c70ef0cc82"
                  },
                  "billingEmail" : "user@example.com"
                },
                "type" : "DEPOSIT",
                "initiator" : {
                  "name" : {
                    "firstName" : "john",
                    "lastName" : "smith"
                  },
                  "id" : "36dbe68f-2747-41c6-8748-559588fd3248",
                  "dateOfBirth" : "1988-09-28",
                  "emails" : [ {
                    "address" : "johnsmith@test.com",
                    "default" : true
                  } ],
                  "phones" : [ {
                    "number" : "12345678901",
                    "type" : "WORK",
                    "default" : true
                  } ],
                  "addresses" : [ {
                    "streetAddress" : "1, main street",
                    "city" : "New Hampshire",
                    "postalCode" : "10005",
                    "stateCode" : "US-NH",
                    "country" : "US",
                    "default" : true
                  } ],
                  "sourceOfFunds" : "Creator earnings"
                },
                "transactionGroupId" : "c8d8ed2a-33df-463b-95af-e59ff6e16414",
                "usdValue" : 100,
                "amount" : 100,
                "date" : "2024-12-13T18:46:40.666+0000"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Successfully initiated the transaction",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/objectReference"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid fields on Transaction",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/invalidRequestError"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden. Happens when the targeted User is not active.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "422" : {
            "description" : "One of these 2 cases: More information about the User is needed in order to approve the transaction. There is no approved assessment for this User that enables him to perform the operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/oneOfAssessmentValidationError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        },
        "callbacks" : {
          "transactionUpdate" : {
            "{$url}" : {
              "post" : {
                "summary" : "Endpoint that receives transaction status updates",
                "requestBody" : {
                  "content" : {
                    "application/json" : {
                      "schema" : {
                        "$ref" : "#/components/schemas/transactionStatusObject"
                      }
                    }
                  },
                  "required" : true
                },
                "responses" : {
                  "200" : {
                    "description" : "Your server returns this code if it accepts the callback"
                  },
                  "422" : {
                    "description" : "Your server returns an error"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/transactions/withdrawals" : {
      "post" : {
        "tags" : [ "Transactions" ],
        "summary" : "Create a Withdrawal (Fiat or Crypto)",
        "description" : "This endpoint is used to execute a withdrawal of fiat or crypto transaction for a User. The Transaction Assessment and User information requirement are evaluated before the transaction is executed.",
        "operationId" : "withdrawal",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-request-id",
          "in" : "header",
          "description" : "Unique identifier of the request. This ID must be provided and stored by the client of this API at the creation of a transaction. This ID is attached to all PTI internal operations as well as the webhook calls. This ID is required to post feedback about a transaction and get support from PTI for a problem on a transaction. Creating two transactions having the same requestId is not allowed.\n",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-scenario-id",
          "in" : "header",
          "description" : "Represents a User action under which transaction amounts will accumulated and will control the User Assessment requirements. The values this header can take must be agreed upon and communicated to PTI. Setting unknown values here will generate an error.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-session-id",
          "in" : "header",
          "description" : "Session ID associated to a UI session for a specific User. Should match the value passed to the PTI SDK at initialization.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-disable-webhook",
          "in" : "header",
          "description" : "Set to true to disable webhook calls for this request.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "x-pti-provider-name",
          "in" : "header",
          "description" : "Used to specify which provider is responsible for handling the given operation. Ignored if the client configuration is not set for passive mode.\n",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/providerName"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/executeWithdrawalTransaction"
              },
              "example" : {
                "sourceMethod" : {
                  "paymentMethodType" : "WALLET",
                  "paymentInformation" : {
                    "type" : "WALLET",
                    "id" : "a8e99100-f562-4e5b-b86f-9142dc2bc9f0"
                  }
                },
                "destinationMethod" : {
                  "paymentMethodType" : "TOKEN",
                  "paymentInformation" : {
                    "type" : "TOKEN",
                    "tokenAddress" : "0xfecf1d73653c4231a6781770c7b44eda",
                    "tokenType" : "ETH",
                    "blockchain" : "ETHEREUM"
                  }
                },
                "amount" : 1,
                "usdValue" : 3999.54,
                "type" : "WITHDRAWAL"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Successfully initiated the transaction",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/objectReference"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid fields on Transaction",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/invalidRequestError"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden. Happens when the targeted User is not active.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "422" : {
            "description" : "One of these 2 cases: More information about the User is needed in order to approve the transaction. There is no approved assessment for this User that enables him to perform the operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/oneOfAssessmentValidationError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        },
        "callbacks" : {
          "transactionUpdate" : {
            "{$url}" : {
              "post" : {
                "summary" : "Endpoint that receives transaction status updates",
                "requestBody" : {
                  "content" : {
                    "application/json" : {
                      "schema" : {
                        "$ref" : "#/components/schemas/transactionStatusObject"
                      }
                    }
                  },
                  "required" : true
                },
                "responses" : {
                  "200" : {
                    "description" : "Your server returns this code if it accepts the callback"
                  },
                  "422" : {
                    "description" : "Your server returns an error"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/transactions/payments" : {
      "post" : {
        "tags" : [ "Transactions" ],
        "summary" : "Collect a Payment from a User",
        "description" : "This endpoint is used to execute a generic payment of fiat or crypto transaction for a User. The Transaction Assessment and User information requirement are evaluated before the transaction is executed.",
        "operationId" : "payment",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-request-id",
          "in" : "header",
          "description" : "Unique identifier of the request. This ID must be provided and stored by the client of this API at the creation of a transaction. This ID is attached to all PTI internal operations as well as the webhook calls. This ID is required to post feedback about a transaction and get support from PTI for a problem on a transaction. Creating two transactions having the same requestId is not allowed.\n",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-scenario-id",
          "in" : "header",
          "description" : "Represents a User action under which transaction amounts will accumulated and will control the User Assessment requirements. The values this header can take must be agreed upon and communicated to PTI. Setting unknown values here will generate an error.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-session-id",
          "in" : "header",
          "description" : "Session ID associated to a UI session for a specific User. Should match the value passed to the PTI SDK at initialization.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-disable-webhook",
          "in" : "header",
          "description" : "Set to true to disable webhook calls for this request.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "x-pti-provider-name",
          "in" : "header",
          "description" : "Used to specify which provider is responsible for handling the given operation. Ignored if the client configuration is not set for passive mode.\n",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/providerName"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/executePaymentTransaction"
              },
              "example" : {
                "sourceMethod" : {
                  "currency" : "USD",
                  "paymentInformation" : {
                    "type" : "ENCRYPTED_CREDIT_CARD",
                    "id" : "79a0da5f-d24b-4ed8-a194-f8e0db32cf05"
                  },
                  "paymentMethodType" : "CREDIT_CARD"
                },
                "destinationMethod" : {
                  "paymentMethodType" : "WALLET",
                  "paymentInformation" : {
                    "type" : "WALLET",
                    "id" : "e13c3242-57d3-473f-b98c-eb2768e4549c"
                  }
                },
                "transactionTotal" : {
                  "total" : {
                    "amount" : 6.99,
                    "currency" : "USD"
                  },
                  "fee" : {
                    "amount" : 0,
                    "currency" : "USD"
                  },
                  "subtotal" : {
                    "amount" : 6.99,
                    "currency" : "USD"
                  }
                },
                "usdValue" : 6.99,
                "amount" : 6.99,
                "type" : "PAYMENT",
                "clientMeta" : {
                  "paymentMetadata" : "collection 1 publication fees"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Successfully initiated the transaction",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/objectReference"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid fields on Transaction",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/invalidRequestError"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden. Happens when the targeted User is not active.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "422" : {
            "description" : "One of these 2 cases: More information about the User is needed in order to approve the transaction. There is no approved assessment for this User that enables him to perform the operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/oneOfAssessmentValidationError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        },
        "callbacks" : {
          "transactionUpdate" : {
            "{$url}" : {
              "post" : {
                "summary" : "Endpoint that receives transaction status updates",
                "requestBody" : {
                  "content" : {
                    "application/json" : {
                      "schema" : {
                        "$ref" : "#/components/schemas/transactionStatusObject"
                      }
                    }
                  },
                  "required" : true
                },
                "responses" : {
                  "200" : {
                    "description" : "Your server returns this code if it accepts the callback"
                  },
                  "422" : {
                    "description" : "Your server returns an error"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/transactions/transfers" : {
      "post" : {
        "tags" : [ "Transactions" ],
        "summary" : "Execute an Internal Transfer",
        "description" : "This endpoint is used to execute a transfer between Users. The Transaction Assessment and User information requirement are evaluated before the transaction is executed.",
        "operationId" : "transfer",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-request-id",
          "in" : "header",
          "description" : "Unique identifier of the request. This ID must be provided and stored by the client of this API at the creation of a transaction. This ID is attached to all PTI internal operations as well as the webhook calls. This ID is required to post feedback about a transaction and get support from PTI for a problem on a transaction. Creating two transactions having the same requestId is not allowed.\n",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-scenario-id",
          "in" : "header",
          "description" : "Represents a User action under which transaction amounts will accumulated and will control the User Assessment requirements. The values this header can take must be agreed upon and communicated to PTI. Setting unknown values here will generate an error.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-session-id",
          "in" : "header",
          "description" : "Session ID associated to a UI session for a specific User. Should match the value passed to the PTI SDK at initialization.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-disable-webhook",
          "in" : "header",
          "description" : "Set to true to disable webhook calls for this request.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "x-pti-provider-name",
          "in" : "header",
          "description" : "Used to specify which provider is responsible for handling the given operation. Ignored if the client configuration is not set for passive mode.\n",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/providerName"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/executeTransferTransaction"
              },
              "example" : {
                "initiator" : {
                  "type" : "PERSON"
                },
                "sourceTransferMethod" : {
                  "paymentMethodType" : "WALLET",
                  "paymentInformation" : {
                    "type" : "WALLET",
                    "id" : "dd2473b7-1afd-4f9c-a359-b4294587fef6"
                  }
                },
                "destinationTransferMethod" : {
                  "paymentMethodType" : "WALLET",
                  "paymentInformation" : {
                    "type" : "WALLET",
                    "id" : "70cd9757-f288-41e5-8506-5c38b7c819e1"
                  }
                },
                "destination" : {
                  "type" : "PERSON"
                },
                "amount" : 200,
                "usdValue" : 200,
                "type" : "TRANSFER"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Successfully initiated the transaction",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/objectReference"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid fields on Transaction",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/invalidRequestError"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden. Happens when the targeted User is not active.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "422" : {
            "description" : "One of these 2 cases: More information about the User is needed in order to approve the transaction. There is no approved assessment for this User that enables him to perform the operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/oneOfAssessmentValidationError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        },
        "callbacks" : {
          "transactionUpdate" : {
            "{$url}" : {
              "post" : {
                "summary" : "Endpoint that receives transaction status updates",
                "requestBody" : {
                  "content" : {
                    "application/json" : {
                      "schema" : {
                        "$ref" : "#/components/schemas/transactionStatusObject"
                      }
                    }
                  },
                  "required" : true
                },
                "responses" : {
                  "200" : {
                    "description" : "Your server returns this code if it accepts the callback"
                  },
                  "422" : {
                    "description" : "Your server returns an error"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/transactions/trades" : {
      "post" : {
        "tags" : [ "Transactions" ],
        "summary" : "Execute a Trade",
        "description" : "This endpoint is used to execute a Trade between currencies and crypto. The Transaction Assessment and User Information requirement are evaluated before the Transaction is executed.",
        "operationId" : "trade",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-request-id",
          "in" : "header",
          "description" : "Unique identifier of the request. This ID must be provided and stored by the client of this API at the creation of a transaction. This ID is attached to all PTI internal operations as well as the webhook calls. This ID is required to post feedback about a transaction and get support from PTI for a problem on a transaction. Creating two transactions having the same requestId is not allowed.\n",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-scenario-id",
          "in" : "header",
          "description" : "Represents a User action under which transaction amounts will accumulated and will control the User Assessment requirements. The values this header can take must be agreed upon and communicated to PTI. Setting unknown values here will generate an error.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-session-id",
          "in" : "header",
          "description" : "Session ID associated to a UI session for a specific User. Should match the value passed to the PTI SDK at initialization.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-disable-webhook",
          "in" : "header",
          "description" : "Set to true to disable webhook calls for this request.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "x-pti-provider-name",
          "in" : "header",
          "description" : "Used to specify which provider is responsible for handling the given operation. Ignored if the client configuration is not set for passive mode.\n",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/providerName"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/executeTradeTransaction"
              },
              "example" : {
                "sourceMethod" : {
                  "paymentMethodType" : "WALLET",
                  "paymentInformation" : {
                    "type" : "WALLET",
                    "id" : "MySOLWallet"
                  }
                },
                "destinationMethod" : {
                  "paymentMethodType" : "WALLET",
                  "paymentInformation" : {
                    "type" : "WALLET",
                    "id" : "MyUSDWallet"
                  }
                },
                "amount" : 0.5,
                "usdValue" : 113,
                "type" : "TRADE"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Successfully initiated the transaction",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/objectReference"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid fields on Transaction",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/invalidRequestError"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden. Happens when the targeted User is not active.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "422" : {
            "description" : "One of these 2 cases: More information about the User is needed in order to approve the transaction. There is no approved assessment for this User that enables him to perform the operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/oneOfAssessmentValidationError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        },
        "callbacks" : {
          "transactionUpdate" : {
            "{$url}" : {
              "post" : {
                "summary" : "Endpoint that receives transaction status updates",
                "requestBody" : {
                  "content" : {
                    "application/json" : {
                      "schema" : {
                        "$ref" : "#/components/schemas/transactionStatusObject"
                      }
                    }
                  },
                  "required" : true
                },
                "responses" : {
                  "200" : {
                    "description" : "Your server returns this code if it accepts the callback"
                  },
                  "422" : {
                    "description" : "Your server returns an error"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/transactions/mints" : {
      "post" : {
        "tags" : [ "Transactions" ],
        "summary" : "Execute a mint transaction",
        "description" : "This endpoint is used to execute a mint transaction for a User. The Transaction Assessment and User information requirement are evaluated before the transaction is executed.",
        "operationId" : "mint",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-request-id",
          "in" : "header",
          "description" : "Unique identifier of the request. This ID must be provided and stored by the client of this API at the creation of a transaction. This ID is attached to all PTI internal operations as well as the webhook calls. This ID is required to post feedback about a transaction and get support from PTI for a problem on a transaction. Creating two transactions having the same requestId is not allowed.\n",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-scenario-id",
          "in" : "header",
          "description" : "Represents a User action under which transaction amounts will accumulated and will control the User Assessment requirements. The values this header can take must be agreed upon and communicated to PTI. Setting unknown values here will generate an error.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-session-id",
          "in" : "header",
          "description" : "Session ID associated to a UI session for a specific User. Should match the value passed to the PTI SDK at initialization.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-disable-webhook",
          "in" : "header",
          "description" : "Set to true to disable webhook calls for this request.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "x-pti-provider-name",
          "in" : "header",
          "description" : "Used to specify which provider is responsible for handling the given operation. Ignored if the client configuration is not set for passive mode.\n",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/providerName"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/executeMintTransaction"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Successfully initiated the transaction",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/objectReference"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid fields on Transaction",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/invalidRequestError"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden. Happens when the targeted User is not active.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "422" : {
            "description" : "One of these 2 cases: More information about the User is needed in order to approve the transaction. There is no approved assessment for this User that enables him to perform the operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/oneOfAssessmentValidationError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        },
        "callbacks" : {
          "transactionUpdate" : {
            "{$url}" : {
              "post" : {
                "summary" : "Endpoint that receives transaction status updates",
                "requestBody" : {
                  "content" : {
                    "application/json" : {
                      "schema" : {
                        "$ref" : "#/components/schemas/transactionStatusObject"
                      }
                    }
                  },
                  "required" : true
                },
                "responses" : {
                  "200" : {
                    "description" : "Your server returns this code if it accepts the callback"
                  },
                  "422" : {
                    "description" : "Your server returns an error"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/transactions/{requestId}" : {
      "get" : {
        "tags" : [ "Transactions" ],
        "summary" : "Get a Transaction by ID",
        "operationId" : "getTransaction",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "requestId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/transactionStatusObject"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User of Transaction Log not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Transactions" ],
        "summary" : "Delete a transaction",
        "operationId" : "deleteTransaction",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "requestId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "NO CONTENT"
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User of Transaction Log not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      }
    },
    "/transactions/{requestId}/updates" : {
      "post" : {
        "tags" : [ "Transactions" ],
        "summary" : "Update status on existing transaction",
        "description" : "This endpoint allows adding feedback information to an existing transaction. Here are the possible feedback values with their meaning:\n\n| Feedback | Meaning |\n|----------|---------|\n| `ACCEPTED` | The transaction was accepted by the processor and is deemed to be in a pending state. This feedback is not a final state and should be followed by antoher feedback such as `SETTLED` or `CANCELLED` |\n| `SETTLED`  | The transaction was accepted and fully finalized by the processor. The transfer of value has occured. |\n| `CANCELLED`  | The transaction was accepted but cancelled prior to being settled |\n| `AWAITING_PAYMENT` | A deposit transaction is being processed and is in a state where it is waiting for the user to complete the payment by funding the target address provided or making a deposit using the specified payment method. |\n| `REJECTED` | The transaction was declined by the processor |\n| `REFUNDED` | An intentional, settled transaction was refunded |\n| `CHARGED_BACK` | A settled transaction was disputed and refunded |\n| `ERROR` | The processor returned an error, the transaction is assumed to be non existent from the processor standpoint |\n",
        "operationId" : "provideFeedback",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "requestId",
          "in" : "path",
          "description" : "Request ID used when the transaction was initially logged",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        } ],
        "requestBody" : {
          "description" : "Feedback to associate to the existing transaction",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/transactionUpdate"
              },
              "example" : {
                "payload" : "{}",
                "providerName" : "UNKNOWN",
                "feedback" : "SETTLED",
                "transactionId" : "UUID",
                "date" : "2024-12-13T18:46:40.666+0000"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Successfully added transaction feedback. Returns the requestId in the id value of the response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/objectReference"
                }
              }
            }
          },
          "400" : {
            "description" : "Missing required fields on transaction feedback",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/invalidRequestError"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "Transaction identified by requestId not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      }
    },
    "/transactions/purchases" : {
      "post" : {
        "tags" : [ "Marketplace" ],
        "summary" : "Execute a buy (token, nft, other)",
        "description" : "This endpoint is used to execute a Digital Item buy (token, nft, other) transaction for a User. The Transaction Assessment and User information requirement are evaluated before the Transaction is executed.",
        "operationId" : "digitalItemBuy",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-request-id",
          "in" : "header",
          "description" : "Unique identifier of the request. This ID must be provided and stored by the client of this API at the creation of a transaction. This ID is attached to all PTI internal operations as well as the webhook calls. This ID is required to post feedback about a transaction and get support from PTI for a problem on a transaction. Creating two transactions having the same requestId is not allowed.\n",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-scenario-id",
          "in" : "header",
          "description" : "Represents a User action under which transaction amounts will accumulated and will control the User Assessment requirements. The values this header can take must be agreed upon and communicated to PTI. Setting unknown values here will generate an error.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-session-id",
          "in" : "header",
          "description" : "Session ID associated to a UI session for a specific User. Should match the value passed to the PTI SDK at initialization.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-disable-webhook",
          "in" : "header",
          "description" : "Set to true to disable webhook calls for this request.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "x-pti-provider-name",
          "in" : "header",
          "description" : "Used to specify which provider is responsible for handling the given operation. Ignored if the client configuration is not set for passive mode.\n",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/providerName"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/executeBuyTransaction"
              },
              "example" : {
                "initiator" : {
                  "id" : "c5c4b077-0c9a-4d5f-84fd-439a6123cdd2",
                  "type" : "PERSON"
                },
                "sourceMethod" : {
                  "paymentMethodType" : "WALLET",
                  "paymentInformation" : {
                    "type" : "WALLET",
                    "id" : "1de3e77b-e673-4e44-8b69-4931364c4e76"
                  }
                },
                "digitalItem" : {
                  "digitalItemType" : "NFT",
                  "itemReference" : "21d7c009-8469-41ae-83d7-393085fd6fef"
                },
                "seller" : {
                  "id" : "f0714c92-d5bf-4ed2-9636-e9ab3743fcb6",
                  "type" : "PERSON"
                },
                "date" : "2024-12-13T18:46:40.666+0000",
                "usdValue" : 5,
                "amount" : 5,
                "type" : "BUY"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Successfully initiated the transaction",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/objectReference"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid fields on Transaction",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/invalidRequestError"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden. Happens when the targeted User is not active.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "422" : {
            "description" : "One of these 2 cases: More information about the User is needed in order to approve the transaction. There is no approved assessment for this User that enables him to perform the operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/oneOfAssessmentValidationError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        },
        "callbacks" : {
          "transactionUpdate" : {
            "{$url}" : {
              "post" : {
                "summary" : "Endpoint that receives transaction status update",
                "requestBody" : {
                  "content" : {
                    "application/json" : {
                      "schema" : {
                        "$ref" : "#/components/schemas/transactionStatusObject"
                      }
                    }
                  },
                  "required" : true
                },
                "responses" : {
                  "200" : {
                    "description" : "Your server returns this code if it accepts the callback"
                  },
                  "422" : {
                    "description" : "Your server returns an error"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/transactions/sales" : {
      "post" : {
        "tags" : [ "Marketplace" ],
        "summary" : "Execute a sell (token, nft, other)",
        "description" : "This endpoint is used to execute a Digital Item sell (token, nft, other) transaction for a User. The Transaction Assessment and User information requirement are evaluated before the transaction is executed.",
        "operationId" : "digitalItemSell",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-request-id",
          "in" : "header",
          "description" : "Unique identifier of the request. This ID must be provided and stored by the client of this API at the creation of a transaction. This ID is attached to all PTI internal operations as well as the webhook calls. This ID is required to post feedback about a transaction and get support from PTI for a problem on a transaction. Creating two transactions having the same requestId is not allowed.\n",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-scenario-id",
          "in" : "header",
          "description" : "Represents a User action under which transaction amounts will accumulated and will control the User Assessment requirements. The values this header can take must be agreed upon and communicated to PTI. Setting unknown values here will generate an error.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-session-id",
          "in" : "header",
          "description" : "Session ID associated to a UI session for a specific User. Should match the value passed to the PTI SDK at initialization.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-disable-webhook",
          "in" : "header",
          "description" : "Set to true to disable webhook calls for this request.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "x-pti-provider-name",
          "in" : "header",
          "description" : "Used to specify which provider is responsible for handling the given operation. Ignored if the client configuration is not set for passive mode.\n",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/providerName"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/executeSellTransaction"
              },
              "example" : {
                "initiator" : {
                  "id" : "2903c06b-6291-4cc8-b568-fe93064a5a8c",
                  "type" : "PERSON"
                },
                "digitalItem" : {
                  "digitalItemType" : "NFT",
                  "itemReference" : "f5511285-9d0b-41fd-8ae7-0817bb7462ba"
                },
                "buyer" : {
                  "id" : "be975fae-fb15-4b70-80ba-e59968ae48c3",
                  "type" : "PERSON"
                },
                "destinationMethod" : {
                  "paymentInformation" : {
                    "type" : "WALLET",
                    "id" : "c5b2cca7-a1ac-4aad-a461-be8903c695d9"
                  },
                  "paymentMethodType" : "WALLET"
                },
                "date" : "2024-12-13T18:46:40.666+0000",
                "usdValue" : 5,
                "amount" : 5,
                "type" : "SELL"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Successfully initiated the transaction",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/objectReference"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid fields on Transaction",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/invalidRequestError"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden. Happens when the targeted User is not active.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "422" : {
            "description" : "One of these 2 cases: More information about the User is needed in order to approve the transaction. There is no approved assessment for this User that enables him to perform the operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/oneOfAssessmentValidationError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        },
        "callbacks" : {
          "transactionUpdate" : {
            "{$url}" : {
              "post" : {
                "summary" : "Endpoint that receives transaction status updates",
                "requestBody" : {
                  "content" : {
                    "application/json" : {
                      "schema" : {
                        "$ref" : "#/components/schemas/transactionStatusObject"
                      }
                    }
                  },
                  "required" : true
                },
                "responses" : {
                  "200" : {
                    "description" : "Your server returns this code if it accepts the callback"
                  },
                  "422" : {
                    "description" : "Your server returns an error"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/digital-items/{digitalItemId}" : {
      "get" : {
        "tags" : [ "Marketplace" ],
        "summary" : "Get a digital item information",
        "operationId" : "getDigitalItem",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "digitalItemId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 255,
            "pattern" : "^[a-z0-9_-]{3,255}$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/digitalItem"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User or digital item not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Marketplace" ],
        "summary" : "Delete a digital item",
        "operationId" : "deleteDigitalItem",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "digitalItemId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 255,
            "pattern" : "^[a-z0-9_-]{3,255}$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden. Happens when the targeted digital item has been bought or sold.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "Digital Item not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/digital-items" : {
      "get" : {
        "tags" : [ "Marketplace" ],
        "summary" : "Get a list of Digital Items for the User",
        "operationId" : "getDigitalItems",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 255,
            "pattern" : "^[a-z0-9_-]{3,255}$",
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Offset for pagination. If not specified, the default value is 0.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 9999999,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "Page size for pagination. If not specified, the default value is 20.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortBy",
          "in" : "query",
          "description" : "Sort by field. If not specified, the default value is creation date.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/objectReferencePage"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Marketplace" ],
        "summary" : "Create a list of Digital Items for the User",
        "operationId" : "createDigitalItems",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 255,
            "pattern" : "^[a-z0-9_-]{3,255}$",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "maxItems" : 100,
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/digitalItem"
                }
              },
              "example" : [ {
                "itemReference" : "57d6467c-6ae0-434f-8197-e7e9f86f2209",
                "digitalItemType" : "NFT",
                "itemDescription" : "Ultra Rare Elite Russell Wilson Level 1",
                "itemTitle" : "QB, Mint Condition, #467/500 From Founders Set ",
                "itemUSDValue" : 10
              }, {
                "itemReference" : "57d6467c-6ae0-434f-8197-e7e9f86f2210",
                "digitalItemType" : "NFT",
                "itemDescription" : "Ultra Rare Elite Peyton Manning Level 10",
                "itemTitle" : "QB, Mint Condition, #468/500 From Founders Set",
                "itemUSDValue" : 35
              } ]
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "maxItems" : 100,
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/objectReference"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "paymentMethodType" : {
        "type" : "string",
        "enum" : [ "ACH", "WIRE", "CREDIT_CARD", "WALLET", "CRYPTO" ]
      },
      "depositAddressRequest" : {
        "type" : "object",
        "properties" : {
          "multiWalletAddress" : {
            "type" : "boolean",
            "default" : true
          }
        }
      },
      "simulatePaymentRequest" : {
        "type" : "object",
        "properties" : {
          "amount" : {
            "maximum" : 999999,
            "minimum" : 0,
            "type" : "number"
          },
          "paymentMethodType" : {
            "$ref" : "#/components/schemas/paymentMethodType"
          }
        }
      },
      "address" : {
        "type" : "object",
        "properties" : {
          "streetAddress" : {
            "maxLength" : 1024,
            "pattern" : "^[ -~]*$",
            "type" : "string"
          },
          "city" : {
            "maxLength" : 1024,
            "pattern" : "^[ -~]*$",
            "type" : "string"
          },
          "postalCode" : {
            "maxLength" : 1024,
            "pattern" : "^[ -~]*$",
            "type" : "string"
          },
          "stateCode" : {
            "$ref" : "#/components/schemas/stateCode"
          },
          "country" : {
            "$ref" : "#/components/schemas/countryCode"
          },
          "default" : {
            "type" : "boolean"
          }
        },
        "additionalProperties" : false
      },
      "bankAccountPaymentInformation" : {
        "required" : [ "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "$ref" : "#/components/schemas/externalPaymentInformationType"
          },
          "bankAccountNumber" : {
            "maxLength" : 64,
            "pattern" : "^[ -~]*$",
            "type" : "string",
            "description" : "Valid bank account number, Required for ACH and WIRE"
          },
          "bankAccountType" : {
            "type" : "string",
            "description" : "Type of bank account, Required for ACH and WIRE",
            "enum" : [ "CHECKING", "SAVINGS" ]
          },
          "accountHolderName" : {
            "maxLength" : 1024,
            "type" : "string",
            "description" : "Full name of the holder of the bank account. Required on creation."
          },
          "bankSwiftCode" : {
            "maxLength" : 11,
            "pattern" : "[A-Z]{6}[A-Z0-9]{2}([A-Z0-9]{3})?",
            "type" : "string",
            "description" : "Valid bank swift code, Required for International WIRE"
          },
          "bankRoutingNumber" : {
            "maxLength" : 12,
            "minLength" : 7,
            "pattern" : "^[0-9]{7,12}$",
            "type" : "string",
            "description" : "Valid bank routing number, between 7 and 12 digits, Required for ACH and WIRE"
          },
          "bankRoutingCheckDigit" : {
            "maxLength" : 1,
            "minLength" : 1,
            "pattern" : "^[0-9]{1}$",
            "type" : "string",
            "description" : "Valid bank routing check digit, 1 digit, Required for ACH and WIRE"
          },
          "accountBankName" : {
            "maxLength" : 1024,
            "pattern" : "^[ -~]*$",
            "type" : "string",
            "description" : "Name of the bank of the account, Required for OUTGOING WIRE transactions, persisted as part of the Payment Information"
          }
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/externalPaymentInformation"
        } ]
      },
      "bii" : {
        "required" : [ "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "EIN" ]
          }
        },
        "discriminator" : {
          "propertyName" : "type",
          "mapping" : {
            "EIN" : "#/components/schemas/ein"
          }
        }
      },
      "business" : {
        "required" : [ "mainRepresentative" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "$ref" : "#/components/schemas/userType"
          },
          "biis" : {
            "maxItems" : 100,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/oneOfBiiSubTypes"
            }
          },
          "addresses" : {
            "maxItems" : 100,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/address"
            }
          },
          "emails" : {
            "maxItems" : 100,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/email"
            }
          },
          "mainRepresentative" : {
            "$ref" : "#/components/schemas/businessOwner"
          },
          "coOwners" : {
            "maxItems" : 100,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/businessOwner"
            }
          },
          "phones" : {
            "maxItems" : 100,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/phone"
            }
          },
          "sectors" : {
            "maxItems" : 100,
            "type" : "array",
            "items" : {
              "maxLength" : 1024,
              "pattern" : "^[ -~]*$",
              "type" : "string"
            }
          },
          "creationDate" : {
            "maxLength" : 10,
            "pattern" : "^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])$",
            "type" : "string",
            "description" : "ISO 8601 formatted creation date of the business"
          },
          "businessType" : {
            "maxLength" : 50,
            "pattern" : "^[A-Z]+(?:_[A-Z]+)*$",
            "type" : "string"
          },
          "businessName" : {
            "maxLength" : 1024,
            "pattern" : "^[A-Za-z0-9\\-_]{2,1024}$",
            "type" : "string"
          },
          "coutryOfIncorporation" : {
            "maxLength" : 2,
            "pattern" : "^([A-Za-z]{2})$",
            "type" : "string",
            "description" : "ISO 3166 alpha 1 country code, example US"
          }
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/user"
        } ]
      },
      "businessOwner" : {
        "required" : [ "ownershipPercent", "person" ],
        "type" : "object",
        "properties" : {
          "ownershipPercent" : {
            "maximum" : 100,
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32"
          },
          "person" : {
            "$ref" : "#/components/schemas/person"
          }
        },
        "additionalProperties" : false
      },
      "countryCode" : {
        "maxLength" : 2,
        "pattern" : "^([A-Za-z]{2})$",
        "type" : "string",
        "description" : "ISO 3166 alpha 1 country code, example US"
      },
      "encryptedCreditCardPaymentInformation" : {
        "required" : [ "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "$ref" : "#/components/schemas/externalPaymentInformationType"
          },
          "encryptedInformation" : {
            "type" : "object",
            "additionalProperties" : {
              "maxLength" : 1024,
              "pattern" : "^[ -~]*$",
              "type" : "string"
            }
          },
          "creditCardLast4" : {
            "maxLength" : 4,
            "minLength" : 4,
            "pattern" : "\\d{4}",
            "type" : "string"
          },
          "cvv" : {
            "pattern" : "^([0-9]){3,4}$",
            "type" : "string",
            "description" : "3 or 4 digits"
          },
          "creditCardType" : {
            "maxLength" : 50,
            "pattern" : "^[\\w\\-\\s]+$",
            "type" : "string",
            "description" : "VISA, MASTERCARD etc"
          },
          "creditCardFirst6" : {
            "maxLength" : 6,
            "minLength" : 6,
            "pattern" : "\\d{6}",
            "type" : "string",
            "description" : "Deprecated, use bin instead",
            "deprecated" : true
          },
          "expirationYear" : {
            "pattern" : "^([0-9]){4}$",
            "type" : "string",
            "description" : "4 digits"
          },
          "expirationMonth" : {
            "pattern" : "^([0-9]){2}$",
            "type" : "string",
            "description" : "2 digits"
          },
          "creditCardBin" : {
            "maxLength" : 8,
            "minLength" : 6,
            "pattern" : "\\d{6,8}",
            "type" : "string"
          },
          "creditCardReference" : {
            "maxLength" : 2048,
            "pattern" : "^[ -~]*$",
            "type" : "string",
            "description" : "Reference to the credit card in our system, this must be set when you create a credit card"
          },
          "cardHolderFirstName" : {
            "maxLength" : 255,
            "minLength" : 3,
            "pattern" : "^[ -~]*$",
            "type" : "string",
            "description" : "first name of card holder"
          },
          "cardHolderLastName" : {
            "maxLength" : 255,
            "minLength" : 3,
            "pattern" : "^[ -~]*$",
            "type" : "string",
            "description" : "last name of card holder"
          },
          "creditCardAddress" : {
            "type" : "object",
            "description" : "card holder address",
            "allOf" : [ {
              "$ref" : "#/components/schemas/address"
            } ]
          },
          "meta" : {
            "type" : "object",
            "description" : "key/value map of extra meta data for this credit card"
          }
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/externalPaymentInformation"
        } ]
      },
      "ein" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "maxLength" : 16,
            "pattern" : "^([07][1-7]|1[0-6]|2[0-7]|[35][0-9]|[468][0-8]|9[0-589])-?\\d{7}$",
            "type" : "string",
            "description" : "Ein number, properly formatted, example 12-3456789"
          }
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/bii"
        } ]
      },
      "email" : {
        "required" : [ "address" ],
        "type" : "object",
        "properties" : {
          "default" : {
            "type" : "boolean"
          },
          "address" : {
            "maxLength" : 320,
            "pattern" : "^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$",
            "type" : "string",
            "format" : "email"
          }
        },
        "additionalProperties" : false
      },
      "device" : {
        "required" : [ "fingerPrint", "providerName" ],
        "type" : "object",
        "properties" : {
          "fingerPrint" : {
            "pattern" : "^[ -~]*$",
            "type" : "string"
          },
          "providerName" : {
            "type" : "string",
            "enum" : [ "SARDINE", "UNKNOWN" ]
          },
          "deviceData" : {
            "pattern" : "^[ -~]*$",
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "errorType" : {
        "type" : "string",
        "enum" : [ "NO_ERROR", "INVALID_REQUEST", "MIN_INFO_MISSING", "MIN_ASSESSMENT_MISSING", "ALREADY_IN_PROGRESS", "MISSING_WALLET", "WALLETS_DIFFERENT_CURRENCY", "WALLETS_SAME_CURRENCY", "SOURCE_WALLET_DESTINATION_TOKEN_ONLY", "ITEM_USD_VALUE_REQUIRED_WHEN_MULTIPLE_ITEMS", "INVALID_USER_TAG", "MISSING_TRANSACTION_GROUP_ID", "DIFFERENT_BUY_SELL_AMOUNT", "DIFFERENT_BUY_SELL_CURRENCIES", "WALLET_MISSING_NETWORK", "PAYMENT_METHOD_TYPE_REQUIRED", "AMOUNT_REQUIRED", "NO_INTER_CLIENTS_TRANSFERS", "CLIENT_CONFIGURATION_ERROR", "UNSUPPORTED_OPERATION", "COUNTRY_NOT_SUPPORTED", "UNSUPPORTED_CURRENCY", "UNSUPPORTED_FIAT_CURRENCY", "UNSUPPORTED_CRYPTO_CURRENCY", "UNSUPPORTED_DEPOSIT_ADDRESS", "INVALID_WALLET_PROVIDER", "INVALID_WALLET_PROVIDER_CONFIGURATION", "NOT_ENOUGH_FUNDS", "INVALID_ASSET_OWNERSHIP", "FEES_WALLET_NOT_FOUND", "REVERT_ONLY_CHARGE_BACK", "MISSING_CORRESPONDING_BUY_TRANSACTION", "ALREADY_EXISTING_CORRESPONDING_TRANSACTION_PAIR", "BUY_TRANSACTION_NOT_SETTLED", "FIAT_ONLY", "SOURCE_DESTINATION_WALLET", "INVALID_SOURCE_CURRENCY", "INVALID_DESTINATION_CURRENCY", "USD_WALLET_ONLY", "NON_CORRESPONDING_USERS_FOR_TRANSACTION", "UNSUPPORTED_SOURCE_METHOD", "WALLET_REFERENCE_ALREADY_EXISTS", "UNABLE_TO_DELETE_WALLET_WITH_NONZERO_BALANCE", "WALLET_DELETED", "WALLET_LABEL_ALREADY_IN_USE", "BANK_ONLY", "MISSING_EMAIL_ADDRESS", "MISSING_BANK_ACCOUNT_INFORMATION", "MISSING_BANK_ACCOUNT_NUMBER_INFORMATION", "MISSING_BANK_ACCOUNT_TYPE", "FUNDING_FROM_ACH_ONLY", "WITHDRAWING_FROM_WALLET_ONLY", "WITHDRAWING_TO_ACH_WIRE_ONLY", "FUNDING_TO_WALLET_ONLY", "MANDATORY_IP_ADDRESS", "MANDATORY_EMAIL_ADDRESS", "MISSING_CC_INFO", "CC_ONLY", "UNABLE_TO_PROVIDE_ESTIMATES", "FUNDING_FROM_CRYPTO_ONLY", "WITHDRAWAL_FROM_WALLET_TO_CRYPTO", "SOURCE_WALLET_CURRENCY_DIFFERENT_THAN_DESTINATION_TOKEN_CURRENCY" ]
      },
      "oneOfAssessmentValidationError" : {
        "example" : {
          "type" : "MIN_INFO_MISSING",
          "code" : 1001,
          "fields" : [ "FULL_NAME", "EMAIL_ADDRESS" ]
        },
        "oneOf" : [ {
          "$ref" : "#/components/schemas/missingInformationError"
        }, {
          "$ref" : "#/components/schemas/invalidUserAssessmentError"
        }, {
          "$ref" : "#/components/schemas/noAssessmentError"
        } ]
      },
      "noAssessmentError" : {
        "type" : "object",
        "properties" : {
          "assessment" : {
            "type" : "object"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "type" : "NO_ERROR",
          "code" : 0
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/managedError"
        } ]
      },
      "invalidUserAssessmentError" : {
        "required" : [ "assessment" ],
        "type" : "object",
        "properties" : {
          "assessment" : {
            "type" : "object"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "type" : "MIN_ASSESSMENT_MISSING",
          "code" : 1002
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/managedError"
        } ]
      },
      "invalidRequestError" : {
        "type" : "object",
        "properties" : {
          "errors" : {
            "maxItems" : 50,
            "type" : "array",
            "items" : {
              "maxLength" : 100,
              "type" : "string"
            }
          }
        },
        "additionalProperties" : false,
        "example" : {
          "type" : "INVALID_REQUEST",
          "code" : 1000,
          "errors" : [ "Invalid field: 'amount' must be greater than or equal to 0" ]
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/managedError"
        } ]
      },
      "missingInformationError" : {
        "required" : [ "fields" ],
        "type" : "object",
        "properties" : {
          "fields" : {
            "maxItems" : 20,
            "type" : "array",
            "example" : [ "FULL_NAME", "EMAIL_ADDRESS" ],
            "items" : {
              "$ref" : "#/components/schemas/informationFields"
            }
          }
        },
        "additionalProperties" : false,
        "example" : {
          "type" : "MIN_INFO_MISSING",
          "code" : 1001,
          "fields" : [ "FULL_NAME", "EMAIL_ADDRESS" ]
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/managedError"
        } ]
      },
      "managedError" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "$ref" : "#/components/schemas/errorType"
          },
          "code" : {
            "maximum" : 9999,
            "minimum" : 0,
            "type" : "integer",
            "description" : "# Error codes descriptions\nNO_ERROR(0)\nINVALID_REQUEST(1000)\nMIN_INFO_MISSING(1001)\nMIN_ASSESSMENT_MISSING(1002)\nALREADY_IN_PROGRESS(1003)\nMISSING_WALLET(1004)\nWALLETS_DIFFERENT_CURRENCY(1005)\nWALLETS_SAME_CURRENCY(1006)\nSOURCE_WALLET_DESTINATION_TOKEN_ONLY(1007)\nITEM_USD_VALUE_REQUIRED_WHEN_MULTIPLE_ITEMS(1008)\nINVALID_USER_TAG(1009)\nMISSING_TRANSACTION_GROUP_ID(1010)\nDIFFERENT_BUY_SELL_AMOUNT(1011)\nDIFFERENT_BUY_SELL_CURRENCIES(1012)\nWALLET_MISSING_NETWORK(1013)\nPAYMENT_METHOD_TYPE_REQUIRED(1014)\nAMOUNT_REQUIRED(1015)\nNO_INTER_CLIENTS_TRANSFERS(2000)\nCLIENT_CONFIGURATION_ERROR(2001)\nUNSUPPORTED_OPERATION(2002)\nCOUNTRY_NOT_SUPPORTED(2003)\nUNSUPPORTED_CURRENCY(2004)\nUNSUPPORTED_FIAT_CURRENCY(2005)\nUNSUPPORTED_CRYPTO_CURRENCY(2005)\nUNSUPPORTED_DEPOSIT_ADDRESS(2006)\nINVALID_WALLET_PROVIDER(2007)\nINVALID_WALLET_PROVIDER_CONFIGURATION(2008)\nNOT_ENOUGH_FUNDS(3000)\nINVALID_ASSET_OWNERSHIP(3001)\nFEES_WALLET_NOT_FOUND(3002)\nREVERT_ONLY_CHARGE_BACK(3003)\nMISSING_CORRESPONDING_BUY_TRANSACTION(3004)\nALREADY_EXISTING_CORRESPONDING_TRANSACTION_PAIR(3005)\nBUY_TRANSACTION_NOT_SETTLED(3006)\nFIAT_ONLY(3007)\nSOURCE_DESTINATION_WALLET(3008)\nINVALID_SOURCE_CURRENCY(3009)\nINVALID_DESTINATION_CURRENCY(3010)\nUSD_WALLET_ONLY(3011)\nNON_CORRESPONDING_USERS_FOR_TRANSACTION(3012)\nUNSUPPORTED_SOURCE_METHOD(3013)\nWALLET_REFERENCE_ALREADY_EXISTS(3014)\nUNABLE_TO_DELETE_WALLET_WITH_NONZERO_BALANCE(3015)\nWALLET_DELETED(3016)\nWALLET_LABEL_ALREADY_IN_USE(3017)\nBANK_ONLY(4000)\nMISSING_EMAIL_ADDRESS(4001)\nMISSING_BANK_ACCOUNT_INFORMATION(4002)\nMISSING_BANK_ACCOUNT_NUMBER_INFORMATION(4003)\nMISSING_BANK_ACCOUNT_TYPE(4004)\nFUNDING_FROM_ACH_ONLY(4005)\nWITHDRAWING_FROM_WALLET_ONLY(4006)\nWITHDRAWING_TO_ACH_WIRE_ONLY(4007)\nFUNDING_TO_WALLET_ONLY(4008)\nMANDATORY_IP_ADDRESS(5000)\nMANDATORY_EMAIL_ADDRESS(5001)\nMISSING_CC_INFO(5002)\nCC_ONLY(5003)\nUNABLE_TO_PROVIDE_ESTIMATES(6000)\nFUNDING_FROM_CRYPTO_ONLY(6001)\nWITHDRAWAL_FROM_WALLET_TO_CRYPTO(6002)\nSOURCE_WALLET_CURRENCY_DIFFERENT_THAN_DESTINATION_TOKEN_CURRENCY(6003)\n",
            "format" : "int32"
          }
        },
        "additionalProperties" : true
      },
      "unmanagedError" : {
        "type" : "object",
        "properties" : {
          "error" : {
            "maxLength" : 100,
            "pattern" : "^[ -~]*$",
            "type" : "string"
          },
          "code" : {
            "maximum" : 9999,
            "minimum" : 0,
            "type" : "integer",
            "description" : "error code",
            "format" : "int32"
          }
        },
        "additionalProperties" : true
      },
      "transactionUpdate" : {
        "required" : [ "feedback", "providerName" ],
        "type" : "object",
        "properties" : {
          "payload" : {
            "type" : "string",
            "format" : "escaped_json",
            "example" : "{\"status\":\"SETTLED\",\"exchangeInfo\":{\"amountDebited\":150.0,\"amountCredited\":1.5},\"providerName\":\"CLIENT_MANAGED_SERVICE\"}"
          },
          "providerName" : {
            "type" : "string",
            "enum" : [ "PTI_LEDGER", "UNKNOWN" ]
          },
          "feedback" : {
            "type" : "string",
            "enum" : [ "SETTLED", "ACCEPTED", "CANCELLED", "REJECTED", "REFUNDED", "CHARGED_BACK", "ERROR" ]
          },
          "transactionId" : {
            "maxLength" : 256,
            "pattern" : "^[A-Za-z0-9\\-_]{3,256}$",
            "type" : "string",
            "description" : "A transaction hash or any relevant identifier for the transaction",
            "nullable" : true
          },
          "date" : {
            "maxLength" : 40,
            "pattern" : "^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:\\.\\d{1,9})?(?:Z|[+-][01]\\d:[0-5]\\d)",
            "type" : "string",
            "description" : "Timestamp when the transaction feedback changed. This will be used in transaction reports. If not provided, it will be set to the time at which the api call is made. The format must be compatible with the ISO-8601 standard. e.g. 2022-01-01T00:00:00",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Set of possible transaction feedbacks"
      },
      "executeDepositTransaction" : {
        "required" : [ "sourceMethod" ],
        "type" : "object",
        "properties" : {
          "sourceMethod" : {
            "$ref" : "#/components/schemas/oneOfExternalPaymentMethod"
          },
          "destinationMethod" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/walletPaymentMethod"
            }, {
              "type" : "object",
              "properties" : {
                "paymentMethodType" : {
                  "type" : "string",
                  "enum" : [ "WALLET" ]
                }
              }
            } ]
          }
        },
        "description" : "Fund a Wallet with crypto. SourceMethod: external crypto Wallet. DestinationMethod: Wallet on the platform.",
        "example" : {
          "initiator" : {
            "id" : "36dbe68f-2747-41c6-8748-559588fd3248",
            "type" : "PERSON"
          },
          "sourceMethod" : {
            "currency" : "USD",
            "paymentInformation" : {
              "type" : "ENCRYPTED_CREDIT_CARD",
              "creditCardType" : "mastercard",
              "creditCardLast4" : "2345",
              "creditCardBin" : "123412",
              "expirationMonth" : "12",
              "expirationYear" : "2022",
              "encryptedInformation" : {
                "A" : "hello123"
              },
              "creditCardReference" : "feead9c948a4b3393498cf17816fb289c2d4d80d4ffb5b11a7171c5f6c48f573",
              "cardHolderFirstName" : "John",
              "cardHolderLastName" : "Smith",
              "transactionDescription" : "test 123",
              "creditCardAddress" : {
                "streetAddress" : "address",
                "city" : "city",
                "stateCode" : "US-CA",
                "country" : "US",
                "postalCode" : "AAAA"
              }
            },
            "paymentMethodType" : "CREDIT_CARD",
            "billingEmail" : "billing@email.com",
            "statementMessage" : "pti"
          },
          "destinationMethod" : {
            "paymentMethodType" : "WALLET",
            "paymentInformation" : {
              "type" : "WALLET",
              "id" : "MyUSDWallet"
            }
          },
          "amount" : 200,
          "date" : "2024-06-03T08:30:00.000Z",
          "transactionTotal" : {
            "subtotal" : {
              "amount" : 200,
              "currency" : "USD"
            },
            "fee" : {
              "amount" : 0,
              "currency" : "USD"
            },
            "total" : {
              "amount" : 200,
              "currency" : "USD"
            }
          },
          "usdValue" : 200,
          "type" : "DEPOSIT"
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/transactionType"
        } ]
      },
      "executeTransferTransaction" : {
        "required" : [ "destination", "destinationTransferMethod", "sourceTransferMethod" ],
        "type" : "object",
        "properties" : {
          "sourceTransferMethod" : {
            "$ref" : "#/components/schemas/walletPaymentMethod"
          },
          "destinationTransferMethod" : {
            "$ref" : "#/components/schemas/walletPaymentMethod"
          },
          "destination" : {
            "$ref" : "#/components/schemas/oneOfUserSubTypes"
          },
          "destinationClientId" : {
            "type" : "string",
            "description" : "Only used for transfers between two different clients. Must be configured before using."
          }
        },
        "description" : "Transfer between two Users. SourceMethod: Wallet on the platform. DestinationMethod: Wallet on the platform. Destination: destination User.",
        "example" : {
          "initiator" : {
            "id" : "36dbe68f-2747-41c6-8748-559588fd3248",
            "type" : "PERSON"
          },
          "sourceTransferMethod" : {
            "paymentMethodType" : "WALLET",
            "paymentInformation" : {
              "type" : "WALLET",
              "id" : "MyUSDWallet"
            }
          },
          "destinationTransferMethod" : {
            "paymentMethodType" : "WALLET",
            "paymentInformation" : {
              "type" : "WALLET",
              "id" : "MyUSDWallet2"
            }
          },
          "destination" : {
            "id" : "99dbe68f-2747-41c6-8748-559588fd3248",
            "type" : "PERSON"
          },
          "amount" : 200,
          "date" : "2024-06-03T08:30:00.000Z",
          "usdValue" : 200,
          "type" : "TRANSFER"
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/transactionType"
        } ]
      },
      "executeBuyTransaction" : {
        "required" : [ "sourceMethod" ],
        "type" : "object",
        "properties" : {
          "digitalItem" : {
            "$ref" : "#/components/schemas/digitalItem"
          },
          "digitalItems" : {
            "maxItems" : 100,
            "type" : "array",
            "description" : "One of digitalItem or digitalItems is required.",
            "items" : {
              "$ref" : "#/components/schemas/digitalItem"
            }
          },
          "sourceMethod" : {
            "$ref" : "#/components/schemas/oneOfPaymentMethod"
          },
          "seller" : {
            "$ref" : "#/components/schemas/oneOfUserSubTypes"
          },
          "feeRecipients" : {
            "maxItems" : 100,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/feeRecipient"
            }
          }
        },
        "description" : "Buy digital item in the platform. SourceMethod: Wallet, token, fiat. DigitalItem: NFT or OTHER.",
        "example" : {
          "initiator" : {
            "id" : "36dbe68f-2747-41c6-8748-559588fd3248",
            "type" : "PERSON"
          },
          "digitalItem" : {
            "digitalItemType" : "NFT",
            "itemReference" : "9c1661bc-5f8c-4d9c-b547-9d1f47459338",
            "itemDescription" : "Rare Elite Shaquille Leonard Level 2",
            "itemTitle" : "LB, Mint Condition, #4/7 From Core 22 Set",
            "itemUSDValue" : 6.99
          },
          "sourceMethod" : {
            "paymentMethodType" : "WALLET",
            "paymentInformation" : {
              "type" : "WALLET",
              "id" : "MyUSDWallet"
            }
          },
          "seller" : {
            "id" : "99dbe68f-2747-41c6-8748-559588fd3248",
            "type" : "PERSON"
          },
          "amount" : 200,
          "date" : "2024-06-03T08:30:00.000Z",
          "transactionTotal" : {
            "subtotal" : {
              "amount" : 200,
              "currency" : "USD"
            },
            "fee" : {
              "amount" : 0,
              "currency" : "USD"
            },
            "total" : {
              "amount" : 200,
              "currency" : "USD"
            }
          },
          "usdValue" : 200,
          "type" : "BUY",
          "feeRecipients" : [ {
            "id" : "3d85a4fc-b98f-4ab7-96fe-4cc1779fc9c2",
            "walletId" : "USDCreatorWallet",
            "currency" : "USD",
            "feeRecipientType" : "COMMISSION",
            "amount" : 2.5
          } ]
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/transactionType"
        } ]
      },
      "executeSellTransaction" : {
        "required" : [ "destinationMethod" ],
        "type" : "object",
        "properties" : {
          "digitalItem" : {
            "$ref" : "#/components/schemas/digitalItem"
          },
          "digitalItems" : {
            "maxItems" : 100,
            "type" : "array",
            "description" : "One of digitalItem or digitalItems is required",
            "items" : {
              "$ref" : "#/components/schemas/digitalItem"
            }
          },
          "destinationMethod" : {
            "$ref" : "#/components/schemas/oneOfPaymentMethod"
          },
          "buyer" : {
            "$ref" : "#/components/schemas/oneOfUserSubTypes"
          },
          "feeRecipients" : {
            "maxItems" : 100,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/feeRecipient"
            }
          }
        },
        "description" : "Sell digital item in the platform. DestinationMethod: Wallet, fiat, token. DigitalItem: NFT, OTHER.",
        "example" : {
          "initiator" : {
            "id" : "36dbe68f-2747-41c6-8748-559588fd3248",
            "type" : "PERSON"
          },
          "digitalItem" : {
            "digitalItemType" : "NFT",
            "itemReference" : "9c1661bc-5f8c-4d9c-b547-9d1f47459338",
            "itemDescription" : "Rare Elite Shaquille Leonard Level 2",
            "itemTitle" : "LB, Mint Condition, #4/7 From Core 22 Set"
          },
          "destinationMethod" : {
            "paymentMethodType" : "WALLET",
            "paymentInformation" : {
              "type" : "WALLET",
              "id" : "MyUSDWallet"
            }
          },
          "buyer" : {
            "id" : "99dbe68f-2747-41c6-8748-559588fd3248",
            "type" : "PERSON"
          },
          "amount" : 200,
          "usdValue" : 200,
          "feeRecipients" : [ {
            "id" : "3d85a4fc-b98f-4ab7-96fe-4cc1779fc9c2",
            "walletId" : "USDCreatorWallet",
            "currency" : "USD",
            "feeRecipientType" : "COMMISSION",
            "amount" : 2.5
          } ],
          "type" : "SELL"
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/transactionType"
        } ]
      },
      "executeWithdrawalTransaction" : {
        "required" : [ "destinationMethod" ],
        "type" : "object",
        "properties" : {
          "destinationMethod" : {
            "$ref" : "#/components/schemas/oneOfExternalPaymentMethod"
          },
          "sourceMethod" : {
            "$ref" : "#/components/schemas/walletPaymentMethod"
          }
        },
        "description" : "Withdraw from a Wallet to fiat destination. SourceMethod: Wallet on the platform. DestinationMethod: fiat payment method.",
        "example" : {
          "initiator" : {
            "id" : "36dbe68f-2747-41c6-8748-559588fd3248",
            "type" : "PERSON"
          },
          "destinationMethod" : {
            "paymentMethodType" : "CRYPTO",
            "paymentInformation" : {
              "type" : "CRYPTO",
              "walletAddress" : "0xc0ffee254729296a45a3885639AC7E10F9d54979",
              "currency" : "ETH",
              "network" : "ETHEREUM"
            }
          },
          "sourceMethod" : {
            "paymentMethodType" : "WALLET",
            "paymentInformation" : {
              "type" : "WALLET",
              "id" : "db36f561-f20d-47b9-80b8-89dc1ecb4903"
            }
          },
          "amount" : 200,
          "usdValue" : 200,
          "type" : "WITHDRAWAL"
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/transactionType"
        } ]
      },
      "executeTradeTransaction" : {
        "required" : [ "destinationMethod", "sourceMethod" ],
        "type" : "object",
        "properties" : {
          "sourceMethod" : {
            "$ref" : "#/components/schemas/walletPaymentMethod"
          },
          "destinationMethod" : {
            "$ref" : "#/components/schemas/walletPaymentMethod"
          }
        },
        "description" : "Trade currency/crypto for another. SourceMethod: Wallet. DestinationMethod: Wallet.",
        "example" : {
          "initiator" : {
            "id" : "36dbe68f-2747-41c6-8748-559588fd3248",
            "type" : "PERSON"
          },
          "sourceMethod" : {
            "paymentMethodType" : "WALLET",
            "paymentInformation" : {
              "type" : "WALLET",
              "id" : "MyUSDWallet"
            }
          },
          "destinationMethod" : {
            "paymentMethodType" : "WALLET",
            "paymentInformation" : {
              "type" : "WALLET",
              "id" : "MyBTCWallet"
            }
          },
          "amount" : 200,
          "usdValue" : 200,
          "type" : "TRADE"
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/transactionType"
        } ]
      },
      "executePaymentTransaction" : {
        "required" : [ "sourceMethod" ],
        "type" : "object",
        "properties" : {
          "sourceMethod" : {
            "$ref" : "#/components/schemas/oneOfPaymentMethod"
          },
          "destinationMethod" : {
            "$ref" : "#/components/schemas/walletPaymentMethod"
          }
        },
        "description" : "Collect payment from the initiator, the beneficiary is the Client platform's  specified Wallet in the destinationMethod(if specified).",
        "example" : {
          "initiator" : {
            "id" : "36dbe68f-2747-41c6-8748-559588fd3248",
            "type" : "PERSON"
          },
          "sourceMethod" : {
            "paymentMethodType" : "WALLET",
            "paymentInformation" : {
              "type" : "WALLET",
              "id" : "MyUSDWallet"
            }
          },
          "destinationMethod" : {
            "paymentMethodType" : "WALLET",
            "paymentInformation" : {
              "type" : "WALLET",
              "id" : "client_subscriptions"
            }
          },
          "amount" : 200,
          "usdValue" : 200,
          "type" : "PAYMENT"
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/transactionType"
        } ]
      },
      "executeMintTransaction" : {
        "required" : [ "destination", "destinationMethod" ],
        "type" : "object",
        "properties" : {
          "destination" : {
            "$ref" : "#/components/schemas/oneOfUserSubTypes"
          },
          "destinationMethod" : {
            "$ref" : "#/components/schemas/walletPaymentMethod"
          }
        },
        "description" : "Mint some value on behalf of a User in a Wallet. DestinationMethod: Wallet on the platform. destination: destination User.",
        "example" : {
          "destination" : {
            "id" : "36dbe68f-2747-41c6-8748-559588fd3248",
            "type" : "PERSON"
          },
          "destinationMethod" : {
            "paymentMethodType" : "WALLET",
            "paymentInformation" : {
              "type" : "WALLET",
              "id" : "MyBTCWallet"
            }
          },
          "amount" : 0.55,
          "usdValue" : 200,
          "type" : "MINT"
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/transactionType"
        } ]
      },
      "achPaymentMethod" : {
        "required" : [ "paymentMethodType" ],
        "type" : "object",
        "properties" : {
          "paymentMethodType" : {
            "$ref" : "#/components/schemas/paymentMethodType"
          },
          "currency" : {
            "maxLength" : 3,
            "pattern" : "^([A-Za-z]{1,10})$",
            "type" : "string"
          },
          "billingEmail" : {
            "maxLength" : 320,
            "pattern" : "^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$",
            "type" : "string",
            "format" : "email"
          },
          "paymentInformation" : {
            "$ref" : "#/components/schemas/oneOfFiatPaymentInformation"
          }
        },
        "additionalProperties" : true
      },
      "creditCardPaymentMethod" : {
        "required" : [ "paymentMethodType" ],
        "type" : "object",
        "properties" : {
          "paymentMethodType" : {
            "$ref" : "#/components/schemas/paymentMethodType"
          },
          "currency" : {
            "maxLength" : 3,
            "pattern" : "^([A-Za-z]{1,10})$",
            "type" : "string"
          },
          "billingEmail" : {
            "maxLength" : 320,
            "pattern" : "^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$",
            "type" : "string",
            "format" : "email"
          },
          "transactionDescription" : {
            "maxLength" : 1000,
            "minLength" : 3,
            "pattern" : "^[ -~]*$",
            "type" : "string",
            "description" : "cc transaction description"
          },
          "statementMessage" : {
            "maxLength" : 50,
            "minLength" : 3,
            "pattern" : "^[ -~]*$",
            "type" : "string",
            "description" : "cc statement msg"
          },
          "paymentInformation" : {
            "$ref" : "#/components/schemas/oneOfFiatPaymentInformation"
          }
        },
        "additionalProperties" : true
      },
      "wirePaymentMethod" : {
        "required" : [ "paymentMethodType" ],
        "type" : "object",
        "properties" : {
          "paymentMethodType" : {
            "$ref" : "#/components/schemas/paymentMethodType"
          },
          "currency" : {
            "maxLength" : 3,
            "pattern" : "^([A-Za-z]{1,10})$",
            "type" : "string"
          },
          "purposeOfPayment" : {
            "maxLength" : 100,
            "pattern" : "^([A-Za-z]{1,10})$",
            "type" : "string"
          },
          "memo" : {
            "maxLength" : 140,
            "pattern" : "^([A-Za-z]{1,10})$",
            "type" : "string"
          },
          "billingEmail" : {
            "maxLength" : 320,
            "pattern" : "^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$",
            "type" : "string",
            "format" : "email"
          },
          "paymentInformation" : {
            "$ref" : "#/components/schemas/oneOfFiatPaymentInformation"
          }
        },
        "additionalProperties" : true
      },
      "walletPaymentMethod" : {
        "required" : [ "paymentMethodType" ],
        "type" : "object",
        "properties" : {
          "paymentMethodType" : {
            "$ref" : "#/components/schemas/paymentMethodType"
          },
          "billingEmail" : {
            "maxLength" : 320,
            "pattern" : "^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$",
            "type" : "string",
            "format" : "email"
          },
          "paymentInformation" : {
            "$ref" : "#/components/schemas/wallet"
          }
        },
        "additionalProperties" : false
      },
      "depositTransaction" : {
        "type" : "object",
        "properties" : {
          "sourceMethod" : {
            "$ref" : "#/components/schemas/oneOfPaymentMethod"
          },
          "destinationMethod" : {
            "$ref" : "#/components/schemas/oneOfPaymentMethod"
          }
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/transactionType"
        } ]
      },
      "itin" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "maxLength" : 11,
            "pattern" : "^9\\d{2}-?((5[0-9]|6[0-5])|(8[3-8])|(9[0-2])|(9[4-9]))-?\\d{4}$",
            "type" : "string",
            "description" : "itin number, properly formatted, example 911-83-1111"
          }
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/pii"
        } ]
      },
      "name" : {
        "type" : "object",
        "properties" : {
          "firstName" : {
            "maxLength" : 1024,
            "pattern" : "^[ -~]*$",
            "type" : "string",
            "example" : "John"
          },
          "lastName" : {
            "maxLength" : 1024,
            "pattern" : "^[ -~]*$",
            "type" : "string",
            "example" : "Smith"
          },
          "middleName" : {
            "maxLength" : 1024,
            "pattern" : "^[ -~]*$",
            "type" : "string",
            "example" : "Doe"
          }
        },
        "additionalProperties" : false
      },
      "objectReference" : {
        "required" : [ "id", "link" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "maxLength" : 40,
            "pattern" : "^[a-z0-9_-]{3,40}$",
            "type" : "string"
          },
          "link" : {
            "maxLength" : 1022,
            "minLength" : 1,
            "pattern" : "^([\\w.,@?^=%&amp;:/~+#-]*[\\w@?^=%&amp;/\\.~+#-])?$",
            "type" : "string"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "id" : "36dbe68f-2747-41c6-8748-559588fd3248",
          "link" : "https://api.staging.fiant.io/v1/user/3121df47-7a05-4b42-9db3-d1ff8a29abf0/transactions/36dbe68f-2747-41c6-8748-559588fd3248"
        }
      },
      "walletHistory" : {
        "required" : [ "walletId" ],
        "type" : "object",
        "properties" : {
          "walletId" : {
            "maxLength" : 255,
            "pattern" : "^[A-Za-z]+(?:_[A-Za-z]+)*$",
            "type" : "string"
          },
          "pendingBalanceBefore" : {
            "maximum" : 999999,
            "minimum" : 0,
            "type" : "number",
            "format" : "double"
          },
          "totalBalanceBefore" : {
            "maximum" : 999999,
            "minimum" : 0,
            "type" : "number",
            "format" : "double"
          },
          "lockedBalanceBefore" : {
            "maximum" : 999999,
            "minimum" : 0,
            "type" : "number",
            "format" : "double"
          },
          "createDateTime" : {
            "maxLength" : 40,
            "pattern" : "^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:\\.\\d{1,9})?(?:Z|[+-][01]\\d:?[0-5]\\d)",
            "type" : "string",
            "nullable" : true
          },
          "change" : {
            "maximum" : 999999,
            "minimum" : 0,
            "type" : "number",
            "format" : "double"
          },
          "operationTarget" : {
            "type" : "string",
            "enum" : [ "LOCKED_BALANCE", "PENDING_BALANCE", "TOTAL_BALANCE" ]
          },
          "requestId" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "walletId" : "6d9e99eb-95e2-44c3-a790-c61dde3952ad",
          "totalBalanceBefore" : 100.0,
          "change" : 5.99,
          "targetOperation" : "TOTAL_BALANCE",
          "createDateTime" : "2024-12-05T12:00:00Z"
        }
      },
      "oneOfBiiSubTypes" : {
        "required" : [ "type" ],
        "properties" : {
          "type" : {
            "maxLength" : 50,
            "pattern" : "^[A-Z]+(?:_[A-Z]+)*$",
            "type" : "string"
          }
        },
        "discriminator" : {
          "propertyName" : "type"
        },
        "oneOf" : [ {
          "$ref" : "#/components/schemas/ein"
        } ]
      },
      "paymentInformationType" : {
        "type" : "string",
        "enum" : [ "BANK_ACCOUNT", "ENCRYPTED_CREDIT_CARD", "CRYPTO", "WALLET" ]
      },
      "externalPaymentInformationType" : {
        "type" : "string",
        "enum" : [ "BANK_ACCOUNT", "ENCRYPTED_CREDIT_CARD", "CRYPTO" ]
      },
      "oneOfExternalPaymentInformation" : {
        "example" : {
          "id" : "36dbe68f-2747-41c6-8748-559588fd3248",
          "type" : "ENCRYPTED_CREDIT_CARD",
          "creditCardLast4" : "1234",
          "creditCardBin" : "123456",
          "creditCardReference" : "reference",
          "creditCardAddress" : {
            "streetAddress" : "123 main st",
            "city" : "New York",
            "stateCode" : "US-NY",
            "country" : "US",
            "postalCode" : "10005"
          }
        },
        "discriminator" : {
          "propertyName" : "type",
          "mapping" : {
            "BANK_ACCOUNT" : "#/components/schemas/bankAccountPaymentInformation",
            "ENCRYPTED_CREDIT_CARD" : "#/components/schemas/encryptedCreditCardPaymentInformation",
            "CRYPTO" : "#/components/schemas/cryptoPaymentInformation"
          }
        },
        "oneOf" : [ {
          "$ref" : "#/components/schemas/encryptedCreditCardPaymentInformation"
        }, {
          "$ref" : "#/components/schemas/bankAccountPaymentInformation"
        }, {
          "$ref" : "#/components/schemas/cryptoPaymentInformation"
        } ]
      },
      "oneOfFiatPaymentInformation" : {
        "discriminator" : {
          "propertyName" : "type",
          "mapping" : {
            "ENCRYPTED_CREDIT_CARD" : "#/components/schemas/encryptedCreditCardPaymentInformation",
            "BANK_ACCOUNT" : "#/components/schemas/bankAccountPaymentInformation"
          }
        },
        "oneOf" : [ {
          "$ref" : "#/components/schemas/encryptedCreditCardPaymentInformation"
        }, {
          "$ref" : "#/components/schemas/bankAccountPaymentInformation"
        } ]
      },
      "oneOfExternalPaymentMethod" : {
        "discriminator" : {
          "propertyName" : "paymentMethodType",
          "mapping" : {
            "ACH" : "#/components/schemas/achPaymentMethod",
            "CREDIT_CARD" : "#/components/schemas/creditCardPaymentMethod",
            "WIRE" : "#/components/schemas/wirePaymentMethod",
            "CRYPTO" : "#/components/schemas/cryptoPaymentMethod"
          }
        },
        "oneOf" : [ {
          "$ref" : "#/components/schemas/cryptoPaymentMethod"
        }, {
          "$ref" : "#/components/schemas/achPaymentMethod"
        }, {
          "$ref" : "#/components/schemas/creditCardPaymentMethod"
        }, {
          "$ref" : "#/components/schemas/wirePaymentMethod"
        } ]
      },
      "oneOfPaymentMethod" : {
        "discriminator" : {
          "propertyName" : "paymentMethodType",
          "mapping" : {
            "ACH" : "#/components/schemas/achPaymentMethod",
            "CREDIT_CARD" : "#/components/schemas/creditCardPaymentMethod",
            "WIRE" : "#/components/schemas/wirePaymentMethod",
            "WALLET" : "#/components/schemas/walletPaymentMethod",
            "CRYPTO" : "#/components/schemas/cryptoPaymentMethod"
          }
        },
        "oneOf" : [ {
          "$ref" : "#/components/schemas/cryptoPaymentMethod"
        }, {
          "$ref" : "#/components/schemas/achPaymentMethod"
        }, {
          "$ref" : "#/components/schemas/creditCardPaymentMethod"
        }, {
          "$ref" : "#/components/schemas/walletPaymentMethod"
        }, {
          "$ref" : "#/components/schemas/wirePaymentMethod"
        } ]
      },
      "oneOfPiiSubTypes" : {
        "required" : [ "type" ],
        "properties" : {
          "type" : {
            "maxLength" : 50,
            "pattern" : "^[A-Z]+(?:_[A-Z]+)*$",
            "type" : "string"
          }
        },
        "discriminator" : {
          "propertyName" : "type"
        },
        "oneOf" : [ {
          "$ref" : "#/components/schemas/ssn"
        }, {
          "$ref" : "#/components/schemas/itin"
        } ]
      },
      "oneOfTransactionSubTypes" : {
        "required" : [ "type" ],
        "properties" : {
          "type" : {
            "maxLength" : 50,
            "pattern" : "^[A-Z]+(?:_[A-Z]+)*$",
            "type" : "string"
          }
        },
        "example" : {
          "initiator" : {
            "id" : "36dbe68f-2747-41c6-8748-559588fd3248",
            "type" : "PERSON"
          },
          "sourceMethod" : {
            "paymentMethodType" : "WALLET",
            "paymentInformation" : {
              "type" : "WALLET",
              "id" : "MyUSDWallet"
            }
          },
          "destinationMethod" : {
            "paymentMethodType" : "WALLET",
            "paymentInformation" : {
              "type" : "WALLET",
              "id" : "MyUSDWallet2"
            }
          },
          "destination" : {
            "id" : "99dbe68f-2747-41c6-8748-559588fd3248",
            "type" : "PERSON"
          },
          "amount" : 200,
          "type" : "TRANSFER"
        },
        "discriminator" : {
          "propertyName" : "type"
        },
        "oneOf" : [ {
          "$ref" : "#/components/schemas/depositTransaction"
        }, {
          "$ref" : "#/components/schemas/withdrawalTransaction"
        }, {
          "$ref" : "#/components/schemas/transferTransaction"
        }, {
          "$ref" : "#/components/schemas/sellTransaction"
        }, {
          "$ref" : "#/components/schemas/buyTransaction"
        }, {
          "$ref" : "#/components/schemas/mintTransaction"
        }, {
          "$ref" : "#/components/schemas/tradeTransaction"
        }, {
          "$ref" : "#/components/schemas/paymentTransaction"
        } ]
      },
      "oneOfUserSubTypes" : {
        "example" : {
          "id" : "36dbe68f-2747-41c6-8748-559588fd3248",
          "type" : "PERSON",
          "dateOfBirth" : "1988-09-28",
          "name" : {
            "firstName" : "test",
            "lastName" : "test",
            "middleName" : "cucumber"
          },
          "emails" : [ {
            "address" : "johnsmith@test.com",
            "default" : true
          } ],
          "phones" : [ {
            "number" : "12345678901",
            "type" : "WORK",
            "default" : true
          } ],
          "addresses" : [ {
            "streetAddress" : "1, main street",
            "city" : "New Hampshire",
            "postalCode" : "10005",
            "stateCode" : "US-NH",
            "country" : "US",
            "default" : true
          } ],
          "sourceOfFunds" : "Creator earnings"
        },
        "discriminator" : {
          "propertyName" : "type",
          "mapping" : {
            "PERSON" : "#/components/schemas/person",
            "BUSINESS" : "#/components/schemas/business"
          }
        },
        "oneOf" : [ {
          "$ref" : "#/components/schemas/person"
        }, {
          "$ref" : "#/components/schemas/business"
        } ]
      },
      "externalPaymentInformation" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "maxLength" : 40,
            "pattern" : "^[a-z0-9_-]{3,40}$",
            "type" : "string",
            "description" : "Unique identifier for the Payment Information, must be used to refer to a Payment Information for a payment"
          }
        }
      },
      "person" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "$ref" : "#/components/schemas/userType"
          },
          "addresses" : {
            "maxItems" : 100,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/address"
            }
          },
          "piis" : {
            "maxItems" : 5000,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/oneOfPiiSubTypes"
            }
          },
          "emails" : {
            "maxItems" : 100,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/email"
            }
          },
          "devices" : {
            "maxItems" : 100,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/device"
            }
          },
          "phones" : {
            "maxItems" : 100,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/phone"
            }
          },
          "name" : {
            "$ref" : "#/components/schemas/name"
          },
          "gender" : {
            "maxLength" : 1,
            "minLength" : 1,
            "pattern" : "^[0129MmfFoOnNuU]",
            "type" : "string",
            "description" : "ISO/IEC 5218 / vCard4"
          },
          "dateOfBirth" : {
            "maxLength" : 10,
            "pattern" : "^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])$",
            "type" : "string",
            "description" : "ISO 8601"
          },
          "countryOfCitizenship" : {
            "maxLength" : 200,
            "pattern" : "^([A-Za-z][A-Za-z],?)+",
            "type" : "string",
            "description" : "Comma separated list of ISO 3166 alpha 1 country codes"
          }
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/user"
        } ]
      },
      "pii" : {
        "required" : [ "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "SSN", "ITIN" ]
          }
        },
        "discriminator" : {
          "propertyName" : "type",
          "mapping" : {
            "SSN" : "#/components/schemas/ssn",
            "ITIN" : "#/components/schemas/itin"
          }
        }
      },
      "phone" : {
        "type" : "object",
        "properties" : {
          "default" : {
            "type" : "boolean"
          },
          "number" : {
            "maxLength" : 64,
            "pattern" : "/^[+]?(?:\\(\\d+(?:\\.\\d+)?\\)|\\d+(?:\\.\\d+)?)(?:[ -]?(?:\\(\\d+(?:\\.\\d+)?\\)|\\d+(?:\\.\\d+)?))*(?:[ ]?(?:x|ext)\\.?[ ]?\\d{1,5})?$/",
            "type" : "string",
            "description" : "Phone number, can be formatted using plus sign, spaces, parenthesis or hyphens"
          },
          "type" : {
            "maxLength" : 10,
            "pattern" : "^(WORK|HOME|MOBILE)",
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "ssn" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "maxLength" : 11,
            "pattern" : "^\\d{3}-?\\d{2}-?\\d{4}$",
            "type" : "string",
            "description" : "Valid us formatted SSN, example 222-22-2222"
          }
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/pii"
        } ]
      },
      "stateCode" : {
        "maxLength" : 5,
        "pattern" : "^([A-Za-z]{2}-[A-Za-z0-9]{2})$",
        "type" : "string",
        "description" : "ISO 3166-2 state code, example US-CA"
      },
      "cryptoPaymentInformation" : {
        "required" : [ "currency", "network", "type", "walletAddress" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "$ref" : "#/components/schemas/externalPaymentInformationType"
          },
          "walletAddress" : {
            "maxLength" : 1050,
            "pattern" : "^[ -~]*$",
            "type" : "string",
            "description" : "Blockchain address for the Wallet"
          },
          "currency" : {
            "maxLength" : 25,
            "pattern" : "^([A-Za-z]{3})$",
            "type" : "string",
            "description" : "Token symbol that your User is trading"
          },
          "network" : {
            "maxLength" : 150,
            "pattern" : ".*",
            "type" : "string",
            "description" : "Blockchain network name, example ethereum, bitcoin, solana",
            "default" : "Ethereum"
          },
          "privateBlockchain" : {
            "type" : "boolean",
            "description" : "If blockchain is a private chain",
            "default" : false
          },
          "clientMeta" : {
            "type" : "object",
            "description" : "key/value map of extra meta data for this payment info, for example, it could be useful to add information to a transaction, like if a subtoken asset is involved"
          }
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/externalPaymentInformation"
        } ]
      },
      "cryptoPaymentMethodDestination" : {
        "type" : "object",
        "properties" : {
          "paymentInformation" : {
            "$ref" : "#/components/schemas/cryptoPaymentInformation"
          }
        },
        "description" : "The destination payment method of the Trade(wallet), if available"
      },
      "cryptoPaymentMethodSource" : {
        "type" : "object",
        "properties" : {
          "paymentInformation" : {
            "$ref" : "#/components/schemas/cryptoPaymentInformation"
          }
        },
        "description" : "The source payment method of the Trade(wallet), if available"
      },
      "cryptoPaymentMethod" : {
        "required" : [ "paymentMethodType" ],
        "type" : "object",
        "properties" : {
          "paymentMethodType" : {
            "$ref" : "#/components/schemas/paymentMethodType"
          },
          "billingEmail" : {
            "maxLength" : 320,
            "pattern" : "^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$",
            "type" : "string",
            "format" : "email"
          },
          "paymentInformation" : {
            "$ref" : "#/components/schemas/cryptoPaymentInformation"
          }
        },
        "additionalProperties" : true
      },
      "transaction" : {
        "required" : [ "amount", "date", "initiator" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "maxLength" : 64,
            "pattern" : "^[a-z0-9_-]{3,64}$",
            "type" : "string",
            "description" : "The id of the transaction/payment. Optional, will be populated with the value provided in the x-pti-request-id header."
          },
          "transactionGroupId" : {
            "$ref" : "#/components/schemas/uuidLikeStrTransactionGroup"
          },
          "subClientId" : {
            "$ref" : "#/components/schemas/uuidLikeStrSubClient"
          },
          "transactionTotal" : {
            "$ref" : "#/components/schemas/total"
          },
          "usdValue" : {
            "maximum" : 999999,
            "minimum" : 0,
            "type" : "number",
            "format" : "double"
          },
          "amount" : {
            "maximum" : 999999,
            "minimum" : 0,
            "type" : "number",
            "format" : "double"
          },
          "date" : {
            "maxLength" : 40,
            "pattern" : "^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:\\.\\d{1,9})?(?:Z|[+-][01]\\d:[0-5]\\d)",
            "type" : "string",
            "description" : "ISO-8601"
          },
          "initiator" : {
            "$ref" : "#/components/schemas/oneOfUserSubTypes"
          },
          "ptiMeta" : {
            "type" : "object",
            "additionalProperties" : false,
            "description" : "key/value map of extra meta data for this request (used by PTI)"
          },
          "clientMeta" : {
            "type" : "object",
            "additionalProperties" : false,
            "description" : "key/value map of extra meta data for this request (used by Client)"
          }
        },
        "description" : "The `transactionTotal` field will be assumed to be all zeroes if not provided. If no currency has been provided `USD` will be used. If no amount has been provided `0` will be used"
      },
      "transferTransaction" : {
        "type" : "object",
        "properties" : {
          "sourceTransferMethod" : {
            "$ref" : "#/components/schemas/oneOfPaymentMethod"
          },
          "destinationTransferMethod" : {
            "$ref" : "#/components/schemas/oneOfPaymentMethod"
          },
          "destination" : {
            "$ref" : "#/components/schemas/oneOfUserSubTypes"
          },
          "destinationClientId" : {
            "type" : "string",
            "description" : "Used only for transfers between two different clients. Must be configured before using."
          }
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/transactionType"
        } ]
      },
      "sellTransaction" : {
        "type" : "object",
        "properties" : {
          "destinationMethod" : {
            "$ref" : "#/components/schemas/oneOfPaymentMethod"
          },
          "sourceMethod" : {
            "$ref" : "#/components/schemas/oneOfPaymentMethod"
          },
          "digitalItem" : {
            "$ref" : "#/components/schemas/digitalItem"
          },
          "buyer" : {
            "$ref" : "#/components/schemas/oneOfUserSubTypes"
          }
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/transactionType"
        } ]
      },
      "buyTransaction" : {
        "type" : "object",
        "properties" : {
          "sourceMethod" : {
            "$ref" : "#/components/schemas/oneOfPaymentMethod"
          },
          "destinationMethod" : {
            "$ref" : "#/components/schemas/oneOfPaymentMethod"
          },
          "digitalItem" : {
            "$ref" : "#/components/schemas/digitalItem"
          },
          "seller" : {
            "$ref" : "#/components/schemas/oneOfUserSubTypes"
          }
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/transactionType"
        } ]
      },
      "paymentTransaction" : {
        "type" : "object",
        "properties" : {
          "sourceMethod" : {
            "$ref" : "#/components/schemas/oneOfPaymentMethod"
          }
        },
        "description" : "Payment transaction, often this is not initiated by a User itself The destination can be specified, and needs to belong to the root User.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/transactionType"
        } ]
      },
      "mintTransaction" : {
        "type" : "object",
        "properties" : {
          "destination" : {
            "$ref" : "#/components/schemas/oneOfUserSubTypes"
          },
          "destinationMethod" : {
            "$ref" : "#/components/schemas/cryptoPaymentMethod"
          }
        },
        "description" : "The action of minting, often this is not initiated by a User itself, so the initiator property is optional. The destination is the beneficiary of the minting action. You can specify the target Wallet in the destination method if available.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/transactionType"
        } ]
      },
      "tradeTransaction" : {
        "type" : "object",
        "properties" : {
          "destinationMethod" : {
            "$ref" : "#/components/schemas/cryptoPaymentMethodDestination"
          },
          "sourceMethod" : {
            "$ref" : "#/components/schemas/cryptoPaymentMethodSource"
          }
        },
        "description" : "The action of doing a token Trade. Source and destination Wallet are provided through the source and destination methods properties.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/transactionType"
        } ]
      },
      "transactionTypeEnum" : {
        "type" : "string",
        "enum" : [ "DEPOSIT", "WITHDRAWAL", "PAYMENT", "TRANSFER", "SELL", "BUY", "MINT", "TRADE" ]
      },
      "transactionType" : {
        "required" : [ "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "$ref" : "#/components/schemas/transactionTypeEnum"
          }
        },
        "discriminator" : {
          "propertyName" : "type"
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/transaction"
        } ]
      },
      "userStatusReason" : {
        "type" : "string",
        "description" : "Reason explaining why the status is BLOCKED or INACTIVE. Same rules as the `status` field apply.",
        "enum" : [ "FRAUD_SUSPICION", "BUSINESS_CO_OWNER", "COMPLIANCE_FLAG", "HIGH_RISK_IP", "INFORMATION_MISMATCH", "HIGH_RISK_EMAIL_DOMAIN", "UNUSUAL_HIGH_VELOCITY", "CHARGEBACK" ]
      },
      "userStatus" : {
        "type" : "string",
        "description" : "Status of the User. Only ACTIVE Users can appear in API calls.  Calls containing INACTIVE or BLOCKED Users will result in an error.  The status cannot be set via API calls that create or update Users.  If it is passed in User creation or modification calls, it will be silently ignored.\n",
        "enum" : [ "ACTIVE", "INACTIVE", "BLOCKED" ]
      },
      "user" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "maxLength" : 255,
            "pattern" : "^[a-z0-9_-]{3,255}$",
            "type" : "string",
            "description" : "Unique identifier for this User. This value MUST be chosen and stored at User creation time."
          },
          "status" : {
            "$ref" : "#/components/schemas/userStatus"
          },
          "statusReason" : {
            "$ref" : "#/components/schemas/userStatusReason"
          },
          "tags" : {
            "maxItems" : 100,
            "type" : "array",
            "description" : "Tag that characterizes the User. Used for internal classification purposes.",
            "items" : {
              "$ref" : "#/components/schemas/tagsType"
            }
          },
          "paymentInformation" : {
            "maxItems" : 100,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/oneOfExternalPaymentInformation"
            }
          },
          "sourceOfFunds" : {
            "maxLength" : 255,
            "pattern" : "^[ -~]*$",
            "type" : "string"
          },
          "userCreationDate" : {
            "maxLength" : 40,
            "pattern" : "^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:\\.\\d{1,9})?(?:Z|[+-][01]\\d:[0-5]\\d)",
            "type" : "string",
            "description" : "Optional ISO-8601 value. Used to provide the date the User was created in your system. If left empty, it will be populated at current time."
          },
          "userPtiMeta" : {
            "type" : "object",
            "description" : "key/value map of extra meta data for this request (used by PTI)"
          },
          "userClientMeta" : {
            "type" : "object",
            "description" : "key/value map of extra meta data for this request (used by Client)"
          }
        },
        "example" : {
          "id" : "36dbe68f-2747-41c6-8748-559588fd3248",
          "dateOfBirth" : "1988-09-28",
          "name" : {
            "firstName" : "test",
            "lastName" : "test",
            "middleName" : "cucumber"
          },
          "emails" : [ {
            "address" : "johnsmith@test.com",
            "default" : true
          } ],
          "phones" : [ {
            "number" : "12345678901",
            "type" : "WORK",
            "default" : true
          } ],
          "addresses" : [ {
            "streetAddress" : "1, main street",
            "city" : "New Hampshire",
            "postalCode" : "10005",
            "stateCode" : "US-NH",
            "country" : "US",
            "default" : true
          } ],
          "sourceOfFunds" : "Creator earnings"
        },
        "discriminator" : {
          "propertyName" : "type"
        }
      },
      "userType" : {
        "type" : "string",
        "description" : "Type of User which represents the legal entity involved in the API action",
        "enum" : [ "PERSON", "BUSINESS" ]
      },
      "userToken" : {
        "required" : [ "accessToken", "expiresAt", "tokenType" ],
        "type" : "object",
        "properties" : {
          "accessToken" : {
            "maxLength" : 4096,
            "minLength" : 128,
            "pattern" : "^[A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+\\/=]*$",
            "type" : "string"
          },
          "expiresAt" : {
            "maximum" : 2147483647,
            "minimum" : 1200000000,
            "type" : "number"
          },
          "tokenType" : {
            "maxLength" : 3,
            "pattern" : "^JWT$",
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "userTokenRequest" : {
        "required" : [ "method", "url" ],
        "type" : "object",
        "properties" : {
          "url" : {
            "maxLength" : 1022,
            "minLength" : 1,
            "pattern" : "^([\\w.,@?^=%&amp;:/~+#-]*[\\w@?^=%&amp;/\\.~+#-])?$",
            "type" : "string"
          },
          "metaInformation" : {
            "maxLength" : 1024,
            "minLength" : 0,
            "pattern" : "^[ -~]*$",
            "type" : "string"
          },
          "method" : {
            "maxLength" : 6,
            "minLength" : 3,
            "pattern" : "^(GET|POST|PUT|PATCH|DELETE|OPTIONS|CONNECT)$",
            "type" : "string"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "url" : "https://api.staging.fiant.io/v1/user/3121df47-7a05-4b42-9db3-d1ff8a29abf0/transactions/36dbe68f-2747-41c6-8748-559588fd3248",
          "method" : "GET"
        }
      },
      "walletCreation" : {
        "required" : [ "currency", "type" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "maxLength" : 255,
            "pattern" : "^[A-Za-z]+(?:_[A-Za-z]+)*$",
            "type" : "string"
          },
          "currency" : {
            "$ref" : "#/components/schemas/currencyEnum"
          },
          "network" : {
            "$ref" : "#/components/schemas/blockChainEnum"
          },
          "label" : {
            "maxLength" : 255,
            "pattern" : "^[A-Za-z]+(?:_[A-Za-z]+)*$",
            "type" : "string",
            "description" : "Optional readable label"
          },
          "multiWalletAddress" : {
            "type" : "boolean"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "WALLET" ]
          },
          "createDateTime" : {
            "maxLength" : 40,
            "pattern" : "^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:\\.\\d{1,9})?(?:Z|[+-][01]\\d:?[0-5]\\d)",
            "type" : "string",
            "nullable" : true
          }
        },
        "example" : {
          "id" : "6c870027-01d8-4804-8867-6a08e8a37e49",
          "label" : "MyUSDWallet",
          "type" : "WALLET",
          "currency" : "USD",
          "reference" : "0x16Df97AB64d9eb5FF393F9f52F9290566857B07C"
        }
      },
      "wallet" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "maxLength" : 255,
            "pattern" : "^[A-Za-z]+(?:_[A-Za-z]+)*$",
            "type" : "string"
          },
          "label" : {
            "maxLength" : 255,
            "pattern" : "^[A-Za-z]+(?:_[A-Za-z]+)*$",
            "type" : "string"
          },
          "currency" : {
            "$ref" : "#/components/schemas/currencyEnum"
          },
          "network" : {
            "$ref" : "#/components/schemas/blockChainEnum"
          },
          "availableBalance" : {
            "maximum" : 999999,
            "minimum" : 0,
            "type" : "number",
            "format" : "double"
          },
          "lockedBalance" : {
            "maximum" : 999999,
            "minimum" : 0,
            "type" : "number",
            "format" : "double"
          },
          "pendingBalance" : {
            "maximum" : 999999,
            "minimum" : 0,
            "type" : "number",
            "format" : "double"
          },
          "totalBalance" : {
            "maximum" : 999999,
            "minimum" : 0,
            "type" : "number",
            "format" : "double"
          },
          "depositInstruction" : {
            "required" : [ "type" ],
            "type" : "object",
            "description" : "External reference to the Wallet(could be bank account number, or blockchain address)"
          },
          "createDateTime" : {
            "maxLength" : 40,
            "pattern" : "^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:\\.\\d{1,9})?(?:Z|[+-][01]\\d:?[0-5]\\d)",
            "type" : "string",
            "nullable" : true
          },
          "multiWalletAddress" : {
            "type" : "boolean"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "WALLET" ]
          }
        },
        "example" : {
          "id" : "MyUSDWallet",
          "label" : "MyUSDWallet",
          "currency" : "USD",
          "type" : "WALLET",
          "depositInstruction" : {
            "type" : "CRYPTO_ADDRESS",
            "address" : "0x128ZuOfgu9LZYkKjrOLLSExMELO6otneF2",
            "blockchain" : "Bitcoin",
            "currency" : "BTC"
          },
          "createDateTime" : "2021-09-28T12:00:00Z",
          "availableBalance" : 1000
        }
      },
      "withdrawalTransaction" : {
        "type" : "object",
        "properties" : {
          "destinationMethod" : {
            "$ref" : "#/components/schemas/oneOfPaymentMethod"
          },
          "sourceMethod" : {
            "$ref" : "#/components/schemas/oneOfPaymentMethod"
          }
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/transactionType"
        } ]
      },
      "documentMetaInformation" : {
        "required" : [ "contentType", "documentType" ],
        "type" : "object",
        "properties" : {
          "documentType" : {
            "type" : "string",
            "enum" : [ "PASSPORT", "PASSPORT_BACK", "ID_CARD", "ID_CARD_BACK", "DRIVER_LICENCE", "DRIVER_LICENCE_BACK", "RESIDENCE_PERMIT", "RESIDENCE_PERMIT_BACK", "SELFIE", "FOUNDING_DOCUMENT" ]
          },
          "contentType" : {
            "maxLength" : 50,
            "type" : "string"
          },
          "originalFileName" : {
            "maxLength" : 255,
            "type" : "string"
          },
          "fileSize" : {
            "maximum" : 999999999,
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32"
          },
          "tags" : {
            "type" : "object",
            "additionalProperties" : {
              "maxLength" : 1024,
              "pattern" : "^[ -~]*$",
              "type" : "string"
            }
          },
          "fileId" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "documentType" : "PASSPORT",
          "contentType" : "image/jpeg",
          "originalFileName" : "passport.jpg",
          "fileSize" : 123456,
          "tags" : {
            "documentCountry" : "US",
            "uploadDate" : "2021-09-01T00:00:00.000Z"
          },
          "fileId" : "36dbe68f-2747-41c6-8748-559588fd3248"
        }
      },
      "idDocumentMetadata" : {
        "type" : "object",
        "properties" : {
          "PERSON_NAME" : {
            "type" : "string"
          },
          "DATE_OF_BIRTH" : {
            "type" : "string"
          },
          "DOCUMENT_NUMBER" : {
            "type" : "string"
          },
          "NATIONALITY" : {
            "type" : "string"
          },
          "EXPIRY_DATE" : {
            "type" : "string"
          }
        },
        "example" : {
          "PERSON_NAME" : "John Smith",
          "DATE_OF_BIRTH" : "1988-01-01",
          "DOCUMENT_NUMBER" : "12345",
          "NATIONALITY" : "American",
          "EXPIRY_DATE" : "2023-06-28"
        }
      },
      "kycRequest" : {
        "properties" : {
          "intendedTransactionUsdValue" : {
            "maximum" : 999999,
            "minimum" : 0,
            "type" : "number",
            "description" : "The value of the transaction that the User is intending to perform in USD",
            "format" : "double"
          },
          "ptiMeta" : {
            "type" : "object",
            "additionalProperties" : true,
            "description" : "key/value map of extra meta data for this request (used by PTI)"
          },
          "clientMeta" : {
            "type" : "object",
            "additionalProperties" : true,
            "description" : "key/value map of extra meta data for this request (used by Client)"
          }
        },
        "discriminator" : {
          "propertyName" : "type",
          "mapping" : {
            "PERSON" : "#/components/schemas/person",
            "BUSINESS" : "#/components/schemas/business"
          }
        },
        "oneOf" : [ {
          "$ref" : "#/components/schemas/person"
        }, {
          "$ref" : "#/components/schemas/business"
        } ]
      },
      "uuidLikeStr" : {
        "maxLength" : 64,
        "pattern" : "^[a-z0-9_-]{3,64}$",
        "type" : "string"
      },
      "uuidLikeStrSubClient" : {
        "maxLength" : 64,
        "pattern" : "^[a-z0-9_-]{3,64}$",
        "type" : "string",
        "description" : "If your system is multi-tenant and you have this is the id of your client that is making the request"
      },
      "uuidLikeStrTransactionGroup" : {
        "maxLength" : 64,
        "pattern" : "^[a-z0-9_-]{3,64}$",
        "type" : "string",
        "description" : "If your system performs transactions that are together part of an overall transaction group, use this to tie them together"
      },
      "feeRecipient" : {
        "required" : [ "amount", "currency", "feeRecipientType", "id", "walletId" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "User ID of the Commission Recipient"
          },
          "walletId" : {
            "maxLength" : 255,
            "pattern" : "^[A-Za-z]+(?:_[A-Za-z]+)*$",
            "type" : "string"
          },
          "currency" : {
            "maxLength" : 10,
            "pattern" : "^([A-Za-z]{1,10})$",
            "type" : "string"
          },
          "amount" : {
            "maximum" : 999999,
            "minimum" : 0,
            "type" : "number"
          },
          "feeRecipientType" : {
            "type" : "string",
            "additionalProperties" : false,
            "enum" : [ "COMMISSION", "BUSINESS" ]
          }
        },
        "additionalProperties" : false,
        "example" : {
          "id" : "MyUserId",
          "walletId" : "MyWalletId",
          "currency" : "USD",
          "amount" : 100,
          "feeRecipientType" : "COMMISSION"
        }
      },
      "digitalItem" : {
        "required" : [ "digitalItemType", "itemDescription", "itemReference", "itemTitle" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          },
          "itemReference" : {
            "maxLength" : 128,
            "pattern" : "^[ -~]*$",
            "type" : "string",
            "description" : "Reference information about the item, for example could be the contract address of an NFT item."
          },
          "itemTitle" : {
            "maxLength" : 1024,
            "pattern" : "^[ -~]*$",
            "type" : "string",
            "description" : "The name of the item, for example: ShaggyDog#2"
          },
          "itemDescription" : {
            "maxLength" : 1024,
            "pattern" : "^[ -~]*$",
            "type" : "string",
            "description" : "Description about the item, for example: Shaggy Dog Collection is an NFT for Dog lovers. It is a manually generated NFT created on the Ethereum network."
          },
          "itemUSDValue" : {
            "type" : "number",
            "description" : "Mandatory when more than one item is provided in the payload. The cost of the item being paid by the User, or the estimated value of the item in question.",
            "format" : "double"
          },
          "digitalItemType" : {
            "$ref" : "#/components/schemas/digitalItemType"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "itemReference" : "0x16Df97AB64d9eb5FF393F9f52F9290566857B07C",
          "itemTitle" : "ShaggyDog#2",
          "itemDescription" : "Shaggy Dog Collection is an NFT for Dog lovers. It is a manually generated NFT created on the Ethereum network.",
          "digitalItemType" : "NFT",
          "itemUSDValue" : 6.99
        }
      },
      "providerName" : {
        "maxLength" : 64,
        "pattern" : "^[A-Za-z0-9\\-_]{3,64}$",
        "type" : "string"
      },
      "transactionAssessStatus" : {
        "type" : "string",
        "additionalProperties" : false,
        "enum" : [ "PENDING", "ERROR", "MANUAL_REVIEW", "PROCEED", "STOP" ]
      },
      "transactionRiskAssessment" : {
        "type" : "string",
        "additionalProperties" : false,
        "enum" : [ "LOW", "MEDIUM", "HIGH" ]
      },
      "resourceType" : {
        "type" : "string",
        "enum" : [ "USER_ASSESSMENT", "TRANSACTION_ASSESSMENT", "TRANSACTION_STATUS", "USER_UPDATE", "TRANSACTION_QUOTE_UPDATE" ]
      },
      "userAssessStatus" : {
        "type" : "string",
        "additionalProperties" : false,
        "enum" : [ "PENDING", "ERROR", "UNDER_REVIEW", "REQUESTED_MORE_INFORMATION", "ACCEPTED", "REFUSED", "INVALID" ]
      },
      "transactionStatus" : {
        "type" : "string",
        "additionalProperties" : false,
        "enum" : [ "PENDING", "ERROR", "MANUAL_REVIEW", "REFUSED", "AWAITING_PAYMENT", "AUTHORIZED", "ACCEPTED", "BAD_REQUEST", "SETTLED", "CAPTURED", "CHARGED_BACK", "CHARGED_BACK_REVERSED", "CANCELED", "REFUNDED" ]
      },
      "actionStatus" : {
        "type" : "object",
        "properties" : {
          "resourceType" : {
            "$ref" : "#/components/schemas/resourceType"
          },
          "requestId" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          },
          "clientId" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          },
          "userId" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          },
          "date" : {
            "maxLength" : 40,
            "pattern" : "^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:\\.\\d{1,9})?(?:Z|[+-][01]\\d:[0-5]\\d)",
            "type" : "string",
            "description" : "ISO-8601"
          }
        },
        "additionalProperties" : false
      },
      "providerResponseCode" : {
        "type" : "string",
        "additionalProperties" : false,
        "enum" : [ "PTI_TECHNICAL_ERROR", "PAYMENT_PROVIDER_TECHNICAL_ERROR", "FRAUD_SUSPICION", "BLOCKED_COUNTRY", "AVS_CHECK_FAILED", "CVV_CHECK_FAILED", "PAYMENT_INSTRUMENT_PROBLEM", "PAYMENT_PROVIDER_DECLINED" ]
      },
      "providerResponseCategory" : {
        "type" : "string",
        "additionalProperties" : false,
        "enum" : [ "ERROR", "SOFT_DECLINE", "HARD_DECLINE" ]
      },
      "paymentStatusDetail" : {
        "type" : "object",
        "properties" : {
          "providerResponseCode" : {
            "$ref" : "#/components/schemas/providerResponseCode"
          },
          "providerResponseCategory" : {
            "$ref" : "#/components/schemas/providerResponseCategory"
          }
        },
        "additionalProperties" : false
      },
      "transactionStatusObject" : {
        "type" : "object",
        "properties" : {
          "status" : {
            "$ref" : "#/components/schemas/transactionStatus"
          },
          "transactionType" : {
            "$ref" : "#/components/schemas/transactionTypeEnum"
          },
          "paymentMethod" : {
            "$ref" : "#/components/schemas/paymentInformationType"
          },
          "paymentStatusDetail" : {
            "$ref" : "#/components/schemas/paymentStatusDetail"
          },
          "amount" : {
            "maximum" : 999999,
            "minimum" : 0,
            "type" : "number"
          },
          "transactionGroupId" : {
            "$ref" : "#/components/schemas/uuidLikeStrTransactionGroup"
          },
          "billingEmail" : {
            "maxLength" : 320,
            "pattern" : "^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$",
            "type" : "string",
            "format" : "email"
          },
          "transactionTotal" : {
            "$ref" : "#/components/schemas/total"
          },
          "currency" : {
            "maxLength" : 3,
            "pattern" : "^([A-Za-z]{3,10})$",
            "type" : "string"
          },
          "additionalInfos" : {
            "type" : "object",
            "description" : "key/value map of extra information"
          }
        },
        "additionalProperties" : false,
        "description" : "Status of a transaction request. The date property is the date that the transaction has been initiated.",
        "example" : {
          "resourceType" : "TRANSACTION_STATUS",
          "clientId" : "4121df47-7a05-4b42-9db3-d1ff8a29abf0",
          "userId" : "5121df47-7a05-4b42-9db3-d1ff8a29abf0",
          "transactionGroupId" : "4121df47-7a05-4b42-9db3-d1ff8a29abf0",
          "requestId" : "3121df47-7a05-4b42-9db3-d1ff8a29abf0",
          "status" : "REFUSED",
          "date" : "2021-09-01T00:00:00.000Z",
          "amount" : 100,
          "currency" : "USD",
          "transactionType" : "DEPOSIT",
          "meta" : {
            "transactionId" : "3121df47-7a05-4b42-9db3-d1ff8a29abf0"
          },
          "paymentStatusDetail" : {
            "providerResponseCode" : "AVS_CHECK_FAILED",
            "providerResponseCategory" : "SOFT_DECLINE"
          },
          "transactionTotal" : {
            "fee" : {
              "amount" : 0.01,
              "currency" : "USD"
            },
            "total" : {
              "amount" : 100.01,
              "currency" : "USD"
            },
            "subtotal" : {
              "amount" : 100,
              "currency" : "USD"
            }
          }
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/actionStatus"
        } ]
      },
      "tagsType" : {
        "type" : "string",
        "enum" : [ "CREATOR" ]
      },
      "complianceProviderResponseCode" : {
        "type" : "string",
        "enum" : [ "FRAUD_SUSPICION", "HIGH_RISK_WALLET", "TRANSACTION_VELOCITY_VIOLATION", "GEO_FENCING_VIOLATION", "BLOCKED_JURISDICTION", "SANCTION_SCREENING" ]
      },
      "userStatusObject" : {
        "type" : "object",
        "properties" : {
          "resourceType" : {
            "$ref" : "#/components/schemas/resourceType"
          },
          "clientId" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          },
          "userId" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          },
          "statusReason" : {
            "$ref" : "#/components/schemas/userStatusReason"
          },
          "status" : {
            "$ref" : "#/components/schemas/userStatus"
          }
        },
        "description" : "Update in the status of a User. You will receive this when the User status changes from the value initially recorded in the system.",
        "example" : {
          "resourceType" : "USER_UPDATE",
          "clientId" : "4121df47-7a05-4b42-9db3-d1ff8a29abf0",
          "userId" : "5121df47-7a05-4b42-9db3-d1ff8a29abf0",
          "statusReason" : "FRAUD_SUSPICION",
          "status" : "BLOCKED"
        }
      },
      "transactionAssessStatusObject" : {
        "type" : "object",
        "properties" : {
          "assessment" : {
            "$ref" : "#/components/schemas/transactionAssessStatus"
          },
          "risk" : {
            "$ref" : "#/components/schemas/transactionRiskAssessment"
          },
          "amount" : {
            "maximum" : 999999,
            "minimum" : 0,
            "type" : "number"
          },
          "transactionType" : {
            "$ref" : "#/components/schemas/transactionTypeEnum"
          },
          "transactionGroupId" : {
            "$ref" : "#/components/schemas/uuidLikeStrTransactionGroup"
          },
          "meta" : {
            "type" : "object",
            "description" : "key/value map of extra information"
          },
          "transactionMonitoringResultDetail" : {
            "$ref" : "#/components/schemas/transactionAssessStatusObject_transactionMonitoringResultDetail"
          }
        },
        "additionalProperties" : false,
        "description" : "Status of a transaction assessment request. The date property is the date that the reported transaction occurred.",
        "example" : {
          "resourceType" : "TRANSACTION_ASSESSMENT",
          "date" : "2021-09-01T00:00:00.000Z",
          "clientId" : "4121df47-7a05-4b42-9db3-d1ff8a29abf0",
          "userId" : "5121df47-7a05-4b42-9db3-d1ff8a29abf0",
          "requestId" : "3121df47-7a05-4b42-9db3-d1ff8a29abf0",
          "transactionGroupId" : "4121df47-7a05-4b42-9db3-d1ff8a29abf0",
          "assessment" : "STOP",
          "risk" : "HIGH_RISK",
          "amount" : 100,
          "transactionType" : "DEPOSIT",
          "meta" : {
            "transactionId" : "3121df47-7a05-4b42-9db3-d1ff8a29abf0"
          },
          "transactionMonitoringResultDetail" : {
            "complianceProviderResponseCode" : "FRAUD_SUSPICION"
          }
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/actionStatus"
        } ]
      },
      "userPage" : {
        "type" : "object",
        "properties" : {
          "content" : {
            "maxItems" : 100,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/oneOfUserSubTypes"
            }
          }
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/page"
        } ]
      },
      "page" : {
        "type" : "object",
        "properties" : {
          "totalPages" : {
            "maximum" : 9999999,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32"
          },
          "size" : {
            "maximum" : 100,
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32"
          },
          "totalElements" : {
            "maximum" : 99999999,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32"
          },
          "last" : {
            "type" : "boolean"
          },
          "numberOfElements" : {
            "maximum" : 99999999,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32"
          },
          "pageable" : {
            "$ref" : "#/components/schemas/pageable"
          },
          "sort" : {
            "$ref" : "#/components/schemas/page_sort"
          },
          "first" : {
            "type" : "boolean"
          },
          "empty" : {
            "type" : "boolean"
          }
        },
        "additionalProperties" : false
      },
      "pageable" : {
        "type" : "object",
        "properties" : {
          "pageNumber" : {
            "maximum" : 9999999,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32"
          },
          "pageSize" : {
            "maximum" : 100,
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32"
          },
          "offset" : {
            "maximum" : 9999999,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32"
          },
          "paged" : {
            "type" : "boolean"
          },
          "unpaged" : {
            "type" : "boolean"
          }
        },
        "additionalProperties" : false
      },
      "walletHistoryPage" : {
        "type" : "object",
        "properties" : {
          "page" : {
            "maximum" : 9999999,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32"
          },
          "pageSize" : {
            "maximum" : 100,
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32"
          },
          "total" : {
            "maximum" : 99999999,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32"
          },
          "items" : {
            "maxItems" : 100,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/walletHistory"
            }
          }
        },
        "additionalProperties" : false,
        "example" : {
          "page" : 0,
          "pageSize" : 25,
          "total" : 2,
          "items" : [ {
            "walletId" : "6d9e99eb-95e2-44c3-a790-c61dde3952ad",
            "availableBalanceBefore" : 100.0,
            "change" : 5.99,
            "targetOperation" : "AVAILABLE_BALANCE",
            "createDateTime" : "2024-12-05T12:00:00Z"
          }, {
            "walletId" : "6d9e99eb-95e2-44c3-a790-c61dde3952ad",
            "lockedBalanceBefore" : 0.0,
            "change" : 5.99,
            "targetOperation" : "LOCKED_BALANCE",
            "createDateTime" : "2024-12-05T12:00:00Z"
          } ]
        }
      },
      "objectReferencePage" : {
        "type" : "object",
        "properties" : {
          "page" : {
            "maximum" : 9999999,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32"
          },
          "pageSize" : {
            "maximum" : 100,
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32"
          },
          "total" : {
            "maximum" : 99999999,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32"
          },
          "items" : {
            "maxItems" : 100,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/objectReference"
            }
          }
        },
        "additionalProperties" : false,
        "example" : {
          "page" : 0,
          "pageSize" : 100,
          "total" : 2,
          "items" : [ {
            "id" : "36dbe68f-2747-41c6-8748-559588fd3248",
            "link" : "https://api.staging.fiant.io/v1/user/36dbe68f-2747-41c6-8748-559588fd3248"
          }, {
            "id" : "36dbe68f-2747-41c6-8748-559588fd3249",
            "link" : "https://api.staging.fiant.io/v1/user/36dbe68f-2747-41c6-8748-559588fd3249"
          } ]
        }
      },
      "kycProviderResponseCode" : {
        "type" : "string",
        "enum" : [ "FRAUD_SUSPICION", "HIGH_RISK_WALLET", "COMPLIANCE_FLAG", "SELFIE_BLURRY", "RESTRICTED_REGION", "SANCTION_SCREENING", "INVALID_DOCUMENTS" ]
      },
      "userAssessStatusObject" : {
        "type" : "object",
        "properties" : {
          "assessment" : {
            "$ref" : "#/components/schemas/userAssessStatus"
          },
          "meta" : {
            "type" : "object",
            "description" : "key/value map of extra information"
          },
          "tier" : {
            "type" : "integer",
            "format" : "int32"
          },
          "refusalReason" : {
            "$ref" : "#/components/schemas/kycProviderResponseCode"
          }
        },
        "additionalProperties" : false,
        "description" : "Status of a User Assessment request. The date property is the date that the assessment has been initiated.",
        "example" : {
          "resourceType" : "USER_ASSESSMENT",
          "clientId" : "4121df47-7a05-4b42-9db3-d1ff8a29abf0",
          "userId" : "5121df47-7a05-4b42-9db3-d1ff8a29abf0",
          "requestId" : "3121df47-7a05-4b42-9db3-d1ff8a29abf0",
          "assessment" : "REFUSED",
          "tier" : 1,
          "date" : "2021-09-01T00:00:00.000Z",
          "refusalReason" : "FRAUD_SUSPICION"
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/actionStatus"
        } ]
      },
      "digitalItemType" : {
        "type" : "string",
        "additionalProperties" : false,
        "enum" : [ "NFT", "OTHER" ]
      },
      "informationFields" : {
        "type" : "string",
        "additionalProperties" : false,
        "enum" : [ "FULL_NAME", "EMAIL_ADDRESS", "PHYSICAL_ADDRESS", "BIRTH_DATE", "PHONE_NUMBER", "TOKEN_ADDRESS", "US_CITIZENSHIP", "ID_DOCUMENT", "SOURCE_OF_FUNDS" ]
      },
      "cost" : {
        "type" : "object",
        "properties" : {
          "amount" : {
            "maximum" : 999999,
            "minimum" : 0,
            "type" : "number"
          },
          "currency" : {
            "maxLength" : 10,
            "pattern" : "^([A-Za-z]{1,10})$",
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "total" : {
        "type" : "object",
        "properties" : {
          "fee" : {
            "$ref" : "#/components/schemas/cost"
          },
          "total" : {
            "$ref" : "#/components/schemas/cost"
          },
          "subtotal" : {
            "$ref" : "#/components/schemas/cost"
          }
        },
        "additionalProperties" : false
      },
      "currencyEnum" : {
        "type" : "string",
        "enum" : [ "BTC", "ETH", "SOL", "POL", "USDC", "USD", "TRX", "LTC", "ADA" ]
      },
      "blockChainEnum" : {
        "type" : "string",
        "enum" : [ "ETHEREUM", "BITCOIN", "SOLANA", "POLYGON", "TRON", "LITECOIN", "CARDANO" ]
      },
      "currencyType" : {
        "type" : "string",
        "enum" : [ "CRYPTO", "FIAT" ]
      },
      "currencyAsset" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "$ref" : "#/components/schemas/currencyType"
          },
          "currency" : {
            "$ref" : "#/components/schemas/currencyEnum"
          },
          "networks" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/blockChainEnum"
            }
          }
        },
        "additionalProperties" : false,
        "example" : {
          "currency" : "BTC",
          "networks" : [ "BITCOIN" ]
        }
      },
      "tradeQuote" : {
        "type" : "object",
        "properties" : {
          "estimatedFillPricePerUnit" : {
            "type" : "number",
            "format" : "double"
          },
          "sourceCurrency" : {
            "maxLength" : 5,
            "pattern" : "^[a-zA-Z0-9_-]{3,5}$",
            "type" : "string"
          },
          "destinationCurrency" : {
            "maxLength" : 5,
            "pattern" : "^[a-zA-Z0-9_-]{3,5}$",
            "type" : "string"
          },
          "amount" : {
            "type" : "number",
            "format" : "double"
          }
        },
        "additionalProperties" : false
      },
      "body" : {
        "type" : "object",
        "properties" : {
          "metaInformation" : {
            "$ref" : "#/components/schemas/documentMetaInformation"
          },
          "idDocumentMetaData" : {
            "$ref" : "#/components/schemas/idDocumentMetadata"
          },
          "document" : {
            "maxLength" : 5242880,
            "type" : "string",
            "format" : "binary"
          }
        },
        "additionalProperties" : false
      },
      "transactionAssessStatusObject_transactionMonitoringResultDetail" : {
        "type" : "object",
        "properties" : {
          "complianceProviderResponseCode" : {
            "$ref" : "#/components/schemas/complianceProviderResponseCode"
          }
        }
      },
      "page_sort" : {
        "type" : "object",
        "properties" : {
          "sorted" : {
            "type" : "boolean"
          },
          "unsorted" : {
            "type" : "boolean"
          },
          "empty" : {
            "type" : "boolean"
          }
        }
      }
    },
    "parameters" : {
      "mandatoryScenarioIdHeaderParam" : {
        "name" : "x-pti-scenario-id",
        "in" : "header",
        "description" : "Represents a User action under which transaction amounts will accumulated and will control the User Assessment requirements. The values this header can take must be agreed upon and communicated to PTI. Setting unknown values here will generate an error.",
        "required" : true,
        "style" : "simple",
        "explode" : false,
        "schema" : {
          "$ref" : "#/components/schemas/uuidLikeStr"
        }
      },
      "disableWebhookHeaderParam" : {
        "name" : "x-pti-disable-webhook",
        "in" : "header",
        "description" : "Set to true to disable webhook calls for this request.",
        "required" : false,
        "style" : "simple",
        "explode" : false,
        "schema" : {
          "type" : "boolean"
        }
      },
      "providerNameHeaderParam" : {
        "name" : "x-pti-provider-name",
        "in" : "header",
        "description" : "Used to specify which provider is responsible for handling the given operation. Ignored if the client configuration is not set for passive mode.\n",
        "required" : false,
        "style" : "simple",
        "explode" : false,
        "schema" : {
          "$ref" : "#/components/schemas/providerName"
        }
      },
      "requestIdHeaderParam" : {
        "name" : "x-pti-request-id",
        "in" : "header",
        "description" : "Unique identifier of the request. This ID must be provided and stored by the client of this API at the creation of a transaction. This ID is attached to all PTI internal operations as well as the webhook calls. This ID is required to post feedback about a transaction and get support from PTI for a problem on a transaction. Creating two transactions having the same requestId is not allowed.\n",
        "required" : true,
        "style" : "simple",
        "explode" : false,
        "schema" : {
          "$ref" : "#/components/schemas/uuidLikeStr"
        }
      },
      "sessionIdHeaderParam" : {
        "name" : "x-pti-session-id",
        "in" : "header",
        "description" : "Session ID associated to a UI session for a specific User. Should match the value passed to the PTI SDK at initialization.",
        "required" : false,
        "style" : "simple",
        "explode" : false,
        "schema" : {
          "$ref" : "#/components/schemas/uuidLikeStr"
        }
      },
      "pageSizeParam" : {
        "name" : "size",
        "in" : "query",
        "description" : "Page size for pagination. If not specified, the default value is 20.",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "maximum" : 100,
          "minimum" : 0,
          "type" : "integer",
          "format" : "int32"
        }
      },
      "externalPaymentInformationTypeParam" : {
        "name" : "type",
        "in" : "query",
        "description" : "Type of external Payment Information. If not specified, the default value is ENCRYPTED_CREDIT_CARD. This is used to filter the external Payment Information by type.",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "$ref" : "#/components/schemas/externalPaymentInformationType"
        }
      },
      "offsetParam" : {
        "name" : "page",
        "in" : "query",
        "description" : "Offset for pagination. If not specified, the default value is 0.",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "maximum" : 9999999,
          "minimum" : 0,
          "type" : "integer",
          "format" : "int32"
        }
      },
      "sortByParam" : {
        "name" : "sortBy",
        "in" : "query",
        "description" : "Sort by field. If not specified, the default value is creation date.",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "clientIdHeaderParam" : {
        "name" : "x-pti-client-id",
        "in" : "header",
        "description" : "Client ID provided to you during onboarding.",
        "required" : true,
        "style" : "simple",
        "explode" : false,
        "schema" : {
          "$ref" : "#/components/schemas/uuidLikeStr"
        }
      }
    },
    "securitySchemes" : {
      "signature" : {
        "type" : "http",
        "description" : "Client signature for a specific request. Header x-pti-signature",
        "scheme" : "bearer",
        "bearerFormat" : "Digest"
      },
      "userToken" : {
        "type" : "http",
        "description" : "Single use token generated for a specific request(JWT Format). Header x-pti-token",
        "scheme" : "bearer",
        "bearerFormat" : "JWT"
      }
    }
  }
}