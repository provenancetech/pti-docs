openapi: 3.0.2
info:
  title: Provenance technologies institutional API
  version: 'master'
  description: Provenance technologies institutional API specification
  license:
    name: Private
    url: 'https://provenancetech.io'
servers:
  - url: 'https://api.dev.fiant.io/v1'
  - url: 'https://api.staging.fiant.io/v1'
  - url: 'https://api.platform.fiant.io/v1'
security:
  - signature: [ ]
  - userToken: [ ]
paths:
  /auth/jwt:
    parameters:
      - $ref: '#/components/parameters/clientIdHeaderParam'
    post:
      tags:
        - Authorization
      operationId: getUserToken
      summary: Get a user token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userTokenRequest'
        required: true
      responses:
        '200':
          description: userToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userToken'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invalidRequestError'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '403':
          description: forbidden
        '429':
          description: Too many requests
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
  /assets:
    parameters:
      - $ref: '#/components/parameters/clientIdHeaderParam'
    get:
      operationId: getListOfAssets
      summary: Get the list of the supported assets by the platform
      tags:
        - Wallets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                maxItems: 100
                items:
                  $ref: '#/components/schemas/currencyAsset'
                example: [
                  {
                    "currency": "BTC",
                    "networks": [ "BITCOIN" ],
                    "type": "CRYPTO"
                  },
                  {
                    "currency": "USDC",
                    "networks": [ "ETHEREUM", "POLYGON", "SOLANA" ],
                    "type": "CRYPTO"
                  },
                  {
                    "currency": "USD",
                    "type": "FIAT"
                  }
                ]
        
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '429':
          description: Too many requests
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
  
  /users:
    parameters:
      - $ref: '#/components/parameters/clientIdHeaderParam'
    get:
      operationId: getListOfUsers
      summary: Get the list of your users
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/pageSizeParam'
        - $ref: '#/components/parameters/sortByParam'
      tags:
        - Collect User Data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userPage'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '429':
          description: Too many requests
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
    post:
      operationId: addAUser
      summary: Add a user
      tags:
        - Collect User Data
      callbacks:
        userStatusUpdate:
          '${yourWebhookAddress}':
            post:
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/userStatusObject'
              responses:
                '200':
                  description: Your server returns this code if it accepts the callback
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/oneOfUserSubTypes'
      responses:
        '201':
          description: Successfully added User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/oneOfUserSubTypes'
        '400':
          description: Missing required fields on User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invalidRequestError'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '409':
          description: User already exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '429':
          description: Too many requests
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
    put:
      operationId: updateUser
      summary: Replace all informations for a user by the informations provided
      tags:
        - Collect User Data
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/oneOfUserSubTypes'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/oneOfUserSubTypes'
        '400':
          description: User invalid or missing fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invalidRequestError'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '404':
          description: User not found
        '429':
          description: Too many requests
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
    patch:
      operationId: mergeUserInfo
      summary: Add information to a user
      tags:
        - Collect User Data
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/oneOfUserSubTypes'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/oneOfUserSubTypes'
        '400':
          description: User invalid or missing fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invalidRequestError'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '404':
          description: User not found
        '429':
          description: Too many requests
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
  '/users/{userId}':
    parameters:
      - $ref: '#/components/parameters/clientIdHeaderParam'
      - name: userId
        schema:
          type: string
          pattern: '^[a-z0-9_-]{3,255}$'
          maxLength: 255
        in: path
        required: true
    get:
      operationId: getUser
      summary: Get the information for a specific user.
      description: >-
        This endpoint is used to get the information for a specific user. The
        information returned is the information that was collected for the user.
        PII information is not returned.
      tags:
        - Collect User Data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/oneOfUserSubTypes'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '429':
          description: Too many requests
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
  /users/{userId}/payment-information:
    parameters:
      - $ref: '#/components/parameters/clientIdHeaderParam'
      - name: userId
        schema:
          type: string
          pattern: '^[a-z0-9_-]{3,255}$'
          maxLength: 255
        in: path
        required: true
    get:
      operationId: getUserPaymentInformations
      parameters:
        - $ref: '#/components/parameters/externalPaymentInformationTypeParam'
      summary: Get all payment information for a specific user.
      description: >-
        This endpoint is used to get the payment information for a specific user. The
        information returned is the information that was collected for the user.
        You can filter by payment information type
      tags:
        - Collect User Data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                maxItems: 100
                items:
                  $ref: '#/components/schemas/oneOfExternalPaymentInformation'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '429':
          description: Too many requests
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
    post:
      operationId: addUserPaymentInformation
      summary: Add a payment information for a specific user.
      description: >-
        This endpoint is used to add a payment information for a specific user.
      tags:
        - Collect User Data
      responses:
        '201':
          description: CREATED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/oneOfExternalPaymentInformation'
        '400':
          description: Invalid payment information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invalidRequestError'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '429':
          description: Too many requests
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/oneOfExternalPaymentInformation'
  /users/{userId}/payment-information/{paymentInformationId}:
    parameters:
      - $ref: '#/components/parameters/clientIdHeaderParam'
      - name: userId
        schema:
          type: string
          pattern: '^[a-z0-9_-]{3,255}$'
          maxLength: 255
        in: path
        required: true
      - name: paymentInformationId
        schema:
          type: string
          pattern: '^[a-z0-9_-]{3,255}$'
          maxLength: 255
        in: path
        required: true
    get:
      operationId: getUserPaymentInformation
      summary: Get a payment information for a specific user.
      description: >-
        This endpoint is used to get a payment information for a specific user.
      tags:
        - Collect User Data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/oneOfExternalPaymentInformation'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '429':
          description: Too many requests
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
    patch:
      operationId: updatePaymentInformation
      summary: Update a payment information for a specific user.
      description: >-
        This endpoint is used to update a payment information for a specific user.
        Note: This endpoint does not support updating Credit Cards.
      tags:
        - Collect User Data
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/oneOfExternalPaymentInformation'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '429':
          description: Too many requests
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/oneOfExternalPaymentInformation'
    delete:
      operationId: deleteUserPaymentInformations
      summary: Delete a payment information for a specific user.
      description: >-
        This endpoint is used to delete a payment information for a specific user.
      tags:
        - Collect User Data
      responses:
        '204':
          description: NO CONTENT
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '429':
          description: Too many requests
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
  /transactions/validations:
    parameters:
      - $ref: '#/components/parameters/clientIdHeaderParam'
    post:
      operationId: transactionInformationAssessment
      summary: >-
        Validate that you have provided the necessary information or user
        assessment to perform a transaction.
      tags:
        - Transaction Assessment
      parameters:
        - $ref: '#/components/parameters/requestIdHeaderParam'
        - $ref: '#/components/parameters/mandatoryScenarioIdHeaderParam'
        - $ref: '#/components/parameters/sessionIdHeaderParam'
        - $ref: '#/components/parameters/disableWebhookHeaderParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/oneOfTransactionSubTypes'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/oneOfAssessmentValidationError'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '429':
          description: Too many requests
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
  /users/assessments:
    post:
      operationId: startUserAssessment
      summary: Start user assessment
      description: >-
        This endpoint is used to assess a user. Depending on what information is
        available on the user,  a tier level will be assigned to the assessment,
        the higher the level is, the more permission he will get on your
        platform.  Please refer to PTI documentation for more information on the
        tier levels configuration and scenarios.
      tags:
        - User Assessment
      parameters:
        - $ref: '#/components/parameters/requestIdHeaderParam'
        - $ref: '#/components/parameters/mandatoryScenarioIdHeaderParam'
        - $ref: '#/components/parameters/sessionIdHeaderParam'
        - $ref: '#/components/parameters/disableWebhookHeaderParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/kycRequest'
        required: true
      callbacks:
        userAssessUpdate:
          '${yourWebhookAddress}':
            post:
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/userAssessStatusObject'
              responses:
                '200':
                  description: Your server returns this code if it accepts the callback
      responses:
        '201':
          description: started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/objectReference'
        '400':
          description: User invalid or missing fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invalidRequestError'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '403':
          description: Forbidden. Happens when the targeted user is not active.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '422':
          description: >-
            One of these 2 cases: More information about the User is needed in
            order to approve the transaction. There is no approved assessment
            for this user that enables him to perform the operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/oneOfAssessmentValidationError'
        '429':
          description: Too many requests
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
  '/users/{userId}/assessments':
    parameters:
      - $ref: '#/components/parameters/clientIdHeaderParam'
      - name: userId
        schema:
          type: string
          pattern: '^[a-z0-9_-]{3,255}$'
          maxLength: 255
        in: path
        required: true
    get:
      operationId: getLastKyc
      summary: Get a the latest assessment for a user
      tags:
        - User Assessment
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userAssessStatusObject'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '429':
          description: Too many requests
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
  /transactions/assessments:
    parameters:
      - $ref: '#/components/parameters/clientIdHeaderParam'
    post:
      operationId: assessTransaction
      summary: Assess a transaction
      description: >-
        This endpoint is used to assess a transaction. The transaction
        assessment and user information requirement are evaluated. This step is
        also done when executing a transaction, but it can be called as a
        standalone.
      tags:
        - Transaction Assessment
      parameters:
        - $ref: '#/components/parameters/requestIdHeaderParam'
        - $ref: '#/components/parameters/mandatoryScenarioIdHeaderParam'
        - $ref: '#/components/parameters/sessionIdHeaderParam'
        - $ref: '#/components/parameters/disableWebhookHeaderParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/oneOfTransactionSubTypes'
      callbacks:
        transactionAssessUpdate:
          '${yourWebhookAddress}':
            post:
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/transactionAssessStatusObject'
              responses:
                '200':
                  description: Your server returns this code if it accepts the callback
      responses:
        '201':
          description: Successfully added transaction log
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/objectReference'
        '400':
          description: Invalid fields on Transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invalidRequestError'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '403':
          description: >-
            Forbidden. Happens when a user involved in the transaction is not
            active.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '422':
          description: >-
            One of these 2 cases: More information about the User is needed in
            order to approve the transaction. There is no approved assessment
            for this user that enables him to perform the operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/oneOfAssessmentValidationError'
        '429':
          description: Too many requests
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
  '/transactions/assessments/{requestId}':
    parameters:
      - $ref: '#/components/parameters/clientIdHeaderParam'
      - name: requestId
        schema:
          $ref: '#/components/schemas/uuidLikeStr'
        in: path
        required: true
    get:
      operationId: getTransactionAssess
      summary: Get the transaction assessment status
      tags:
        - Transaction Assessment
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transactionAssessStatusObject'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '404':
          description: User of Transaction Log not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '429':
          description: Too many requests
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
  /transactions/trades/price-estimation:
    parameters:
      - $ref: '#/components/parameters/clientIdHeaderParam'
    post:
      operationId: estimationTransactionCost
      tags:
        - Estimate Transaction Cost
      summary: Estimate a transaction cost
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tradeTransaction'
      callbacks:
        transactionQuoteUpdate:
          '${yourWebhookAddress}':
            post:
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/transactionQuoteStatusObject'
              responses:
                '200':
                  description: Your server returns this code if it accepts the callback
      responses:
        '201':
          description: Successfully initiated the transaction estimate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/objectReference'
        '400':
          description: Invalid fields on Transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invalidRequestError'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '403':
          description: Forbidden. Happens when the targeted user is not active.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '429':
          description: Too many requests
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
  /transactions/deposits:
    parameters:
      - $ref: '#/components/parameters/clientIdHeaderParam'
    post:
      operationId: deposit
      tags:
        - Execute Transaction
      summary: Execute a deposit (crypto/fiat -in)
      description: >-
        This endpoint is used to execute a deposit (crypto/fiat -in) transaction
        for a user. The transaction assessment and user information requirement
        are evaluated before the transaction is executed.
      parameters:
        - $ref: '#/components/parameters/requestIdHeaderParam'
        - $ref: '#/components/parameters/mandatoryScenarioIdHeaderParam'
        - $ref: '#/components/parameters/sessionIdHeaderParam'
        - $ref: '#/components/parameters/disableWebhookHeaderParam'
        - $ref: '#/components/parameters/providerNameHeaderParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/executeDepositTransaction'
      callbacks:
        transactionUpdate:
          '${yourWebhookAddress}':
            post:
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/transactionStatusObject'
              responses:
                '200':
                  description: Your server returns this code if it accepts the callback
      responses:
        '201':
          description: Successfully initiated the transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/objectReference'
        '400':
          description: Invalid fields on Transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invalidRequestError'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '403':
          description: Forbidden. Happens when the targeted user is not active.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '422':
          description: >-
            One of these 2 cases: More information about the User is needed in
            order to approve the transaction. There is no approved assessment
            for this user that enables him to perform the operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/oneOfAssessmentValidationError'
        '429':
          description: Too many requests
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
  /transactions/purchases:
    parameters:
      - $ref: '#/components/parameters/clientIdHeaderParam'
    post:
      operationId: digitalItemBuy
      tags:
        - Marketplace
      summary: 'Execute a buy (token, nft, other)'
      description: >-
        This endpoint is used to execute a digital item buy (token, nft, other)
        transaction for a user. The transaction assessment and user information
        requirement are evaluated before the transaction is executed.
      parameters:
        - $ref: '#/components/parameters/requestIdHeaderParam'
        - $ref: '#/components/parameters/mandatoryScenarioIdHeaderParam'
        - $ref: '#/components/parameters/sessionIdHeaderParam'
        - $ref: '#/components/parameters/disableWebhookHeaderParam'
        - $ref: '#/components/parameters/providerNameHeaderParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/executeBuyTransaction'
      callbacks:
        transactionUpdate:
          '${yourWebhookAddress}':
            post:
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/transactionStatusObject'
              responses:
                '200':
                  description: Your server returns this code if it accepts the callback
      responses:
        '201':
          description: Successfully initiated the transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/objectReference'
        '400':
          description: Invalid fields on Transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invalidRequestError'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '403':
          description: Forbidden. Happens when the targeted user is not active.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '422':
          description: >-
            One of these 2 cases: More information about the User is needed in
            order to approve the transaction. There is no approved assessment
            for this user that enables him to perform the operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/oneOfAssessmentValidationError'
        '429':
          description: Too many requests
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
  /transactions/sales:
    parameters:
      - $ref: '#/components/parameters/clientIdHeaderParam'
    post:
      operationId: digitalItemSell
      summary: 'Execute a sell (token, nft, other)'
      tags:
        - Marketplace
      description: >-
        This endpoint is used to execute a digital item sell (token, nft, other)
        transaction for a user. The transaction assessment and user information
        requirement are evaluated before the transaction is executed.
      parameters:
        - $ref: '#/components/parameters/requestIdHeaderParam'
        - $ref: '#/components/parameters/mandatoryScenarioIdHeaderParam'
        - $ref: '#/components/parameters/sessionIdHeaderParam'
        - $ref: '#/components/parameters/disableWebhookHeaderParam'
        - $ref: '#/components/parameters/providerNameHeaderParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/executeSellTransaction'
      callbacks:
        transactionUpdate:
          '${yourWebhookAddress}':
            post:
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/transactionStatusObject'
              responses:
                '200':
                  description: Your server returns this code if it accepts the callback
      responses:
        '201':
          description: Successfully initiated the transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/objectReference'
        '400':
          description: Invalid fields on Transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invalidRequestError'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '403':
          description: Forbidden. Happens when the targeted user is not active.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '422':
          description: >-
            One of these 2 cases: More information about the User is needed in
            order to approve the transaction. There is no approved assessment
            for this user that enables him to perform the operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/oneOfAssessmentValidationError'
        '429':
          description: Too many requests
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
  /transactions/withdrawals:
    parameters:
      - $ref: '#/components/parameters/clientIdHeaderParam'
    post:
      operationId: withdrawal
      summary: Execute a withdrawal of fiat of crypto
      tags:
        - Execute Transaction
      description: >-
        This endpoint is used to execute a withdrawal of fiat or crypto
        transaction for a user. The transaction assessment and user information
        requirement are evaluated before the transaction is executed.
      parameters:
        - $ref: '#/components/parameters/requestIdHeaderParam'
        - $ref: '#/components/parameters/mandatoryScenarioIdHeaderParam'
        - $ref: '#/components/parameters/sessionIdHeaderParam'
        - $ref: '#/components/parameters/disableWebhookHeaderParam'
        - $ref: '#/components/parameters/providerNameHeaderParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/executeWithdrawalTransaction'
      callbacks:
        transactionUpdate:
          '${yourWebhookAddress}':
            post:
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/transactionStatusObject'
              responses:
                '200':
                  description: Your server returns this code if it accepts the callback
      responses:
        '201':
          description: Successfully initiated the transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/objectReference'
        '400':
          description: Invalid fields on Transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invalidRequestError'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '403':
          description: Forbidden. Happens when the targeted user is not active.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '422':
          description: >-
            One of these 2 cases: More information about the User is needed in
            order to approve the transaction. There is no approved assessment
            for this user that enables him to perform the operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/oneOfAssessmentValidationError'
        '429':
          description: Too many requests
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
  /transactions/payments:
    parameters:
      - $ref: '#/components/parameters/clientIdHeaderParam'
    post:
      operationId: payment
      summary: Execute a generic payment of fiat of crypto
      tags:
        - Execute Transaction
      description: >-
        This endpoint is used to execute a generic payment of fiat or crypto
        transaction for a user. The transaction assessment and user information
        requirement are evaluated before the transaction is executed.
      parameters:
        - $ref: '#/components/parameters/requestIdHeaderParam'
        - $ref: '#/components/parameters/mandatoryScenarioIdHeaderParam'
        - $ref: '#/components/parameters/sessionIdHeaderParam'
        - $ref: '#/components/parameters/disableWebhookHeaderParam'
        - $ref: '#/components/parameters/providerNameHeaderParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/executePaymentTransaction'
      callbacks:
        transactionUpdate:
          '${yourWebhookAddress}':
            post:
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/transactionStatusObject'
              responses:
                '200':
                  description: Your server returns this code if it accepts the callback
      responses:
        '201':
          description: Successfully initiated the transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/objectReference'
        '400':
          description: Invalid fields on Transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invalidRequestError'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '403':
          description: Forbidden. Happens when the targeted user is not active.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '422':
          description: >-
            One of these 2 cases: More information about the User is needed in
            order to approve the transaction. There is no approved assessment
            for this user that enables him to perform the operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/oneOfAssessmentValidationError'
        '429':
          description: Too many requests
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
  /transactions/transfers:
    parameters:
      - $ref: '#/components/parameters/clientIdHeaderParam'
    post:
      operationId: transfer
      summary: Execute a transfer between users
      tags:
        - Execute Transaction
      description: >-
        This endpoint is used to execute a transfer between users. The
        transaction assessment and user information requirement are evaluated
        before the transaction is executed.
      parameters:
        - $ref: '#/components/parameters/requestIdHeaderParam'
        - $ref: '#/components/parameters/mandatoryScenarioIdHeaderParam'
        - $ref: '#/components/parameters/sessionIdHeaderParam'
        - $ref: '#/components/parameters/disableWebhookHeaderParam'
        - $ref: '#/components/parameters/providerNameHeaderParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/executeTransferTransaction'
      callbacks:
        transactionUpdate:
          '${yourWebhookAddress}':
            post:
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/transactionStatusObject'
              responses:
                '200':
                  description: Your server returns this code if it accepts the callback
      responses:
        '201':
          description: Successfully initiated the transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/objectReference'
        '400':
          description: Invalid fields on Transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invalidRequestError'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '403':
          description: Forbidden. Happens when the targeted user is not active.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '422':
          description: >-
            One of these 2 cases: More information about the User is needed in
            order to approve the transaction. There is no approved assessment
            for this user that enables him to perform the operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/oneOfAssessmentValidationError'
        '429':
          description: Too many requests

        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
  /transactions/trades:
    parameters:
      - $ref: '#/components/parameters/clientIdHeaderParam'
    post:
      operationId: trade
      summary: Execute a trade of liquidity between wallets
      tags:
        - Execute Transaction
      description: >-
        This endpoint is used to execute a trade between currencies and crypto.
        The transaction assessment and user information requirement are
        evaluated before the transaction is executed.
      parameters:
        - $ref: '#/components/parameters/requestIdHeaderParam'
        - $ref: '#/components/parameters/mandatoryScenarioIdHeaderParam'
        - $ref: '#/components/parameters/sessionIdHeaderParam'
        - $ref: '#/components/parameters/disableWebhookHeaderParam'
        - $ref: '#/components/parameters/providerNameHeaderParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/executeTradeTransaction'
      callbacks:
        transactionUpdate:
          '${yourWebhookAddress}':
            post:
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/transactionStatusObject'
              responses:
                '200':
                  description: Your server returns this code if it accepts the callback
      responses:
        '201':
          description: Successfully initiated the transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/objectReference'
        '400':
          description: Invalid fields on Transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invalidRequestError'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '403':
          description: Forbidden. Happens when the targeted user is not active.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '422':
          description: >-
            One of these 2 cases: More information about the User is needed in
            order to approve the transaction. There is no approved assessment
            for this user that enables him to perform the operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/oneOfAssessmentValidationError'
        '429':
          description: Too many requests
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
  /transactions/mints:
    parameters:
      - $ref: '#/components/parameters/clientIdHeaderParam'
    post:
      operationId: mint
      summary: Execute a mint transaction
      tags:
        - Execute Transaction
      description: >-
        This endpoint is used to execute a mint transaction for a user. The
        transaction assessment and user information requirement are evaluated
        before the transaction is executed.
      parameters:
        - $ref: '#/components/parameters/requestIdHeaderParam'
        - $ref: '#/components/parameters/mandatoryScenarioIdHeaderParam'
        - $ref: '#/components/parameters/sessionIdHeaderParam'
        - $ref: '#/components/parameters/disableWebhookHeaderParam'
        - $ref: '#/components/parameters/providerNameHeaderParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/executeMintTransaction'
      callbacks:
        transactionUpdate:
          '${yourWebhookAddress}':
            post:
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/transactionStatusObject'
              responses:
                '200':
                  description: Your server returns this code if it accepts the callback
      responses:
        '201':
          description: Successfully initiated the transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/objectReference'
        '400':
          description: Invalid fields on Transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invalidRequestError'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '403':
          description: Forbidden. Happens when the targeted user is not active.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '422':
          description: >-
            One of these 2 cases: More information about the User is needed in
            order to approve the transaction. There is no approved assessment
            for this user that enables him to perform the operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/oneOfAssessmentValidationError'
        '429':
          description: Too many requests
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
  '/transactions/{requestId}':
    parameters:
      - $ref: '#/components/parameters/clientIdHeaderParam'
      - name: requestId
        schema:
          $ref: '#/components/schemas/uuidLikeStr'
        in: path
        required: true
    get:
      operationId: getTransaction
      tags:
        - Execute Transaction
      summary: Get a transaction status
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transactionStatusObject'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '404':
          description: User of Transaction Log not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '429':
          description: Too many requests
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
    delete:
      operationId: deleteTransaction
      summary: Cancel a transaction
      tags:
        - Execute Transaction
      responses:
        '204':
          description: NO CONTENT
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '404':
          description: User of Transaction Log not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '429':
          description: Too many requests
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
  '/users/{userId}/documents':
    parameters:
      - $ref: '#/components/parameters/clientIdHeaderParam'
      - name: userId
        schema:
          type: string
          pattern: '^[a-z0-9_-]{3,255}$'
          maxLength: 255
        in: path
        required: true
    post:
      operationId: uploadDocument
      summary: >-
        Upload a digital document in a user profile (Passport, Company document,
        etc)
      tags:
        - Collect User Data
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              additionalProperties: false
              properties:
                metaInformation:
                  $ref: '#/components/schemas/documentMetaInformation'
                idDocumentMetaData:
                  $ref: '#/components/schemas/idDocumentMetadata'
                document:
                  type: string
                  format: binary
                  maxLength: 5242880
      responses:
        '201':
          description: Successfully uploaded the document
        '400':
          description: Missing required fields on document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invalidRequestError'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '429':
          description: Too many requests
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
  '/digital-items/{digitalItemId}':
    parameters:
      - $ref: '#/components/parameters/clientIdHeaderParam'
      - name: digitalItemId
        in: path
        required: true
        schema:
          type: string
          pattern: '^[a-z0-9_-]{3,255}$'
          maxLength: 255
    get:
      operationId: getDigitalItem
      summary: Get a digital item information
      tags:
        - Marketplace
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/digitalItem'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '404':
          description: User or digital item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '429':
          description: Too many requests
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
    delete:
      operationId: deleteDigitalItem
      summary: Delete a digital item
      tags:
        - Marketplace
      responses:
        '204':
          description: No Content
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '403':
          description: Forbidden. Happens when the targeted digital item has been bought or sold.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '404':
          description: Digital Item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '429':
          description: Too many requests
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
  '/users/{userId}/digital-items':
    parameters:
      - $ref: '#/components/parameters/clientIdHeaderParam'
      - name: userId
        schema:
          type: string
          pattern: '^[a-z0-9_-]{3,255}$'
          maxLength: 255
        in: path
        required: true
    get:
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/pageSizeParam'
        - $ref: '#/components/parameters/sortByParam'
      operationId: getDigitalItems
      summary: Get a list of digital items for the user
      tags:
        - Marketplace
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/objectReferencePage'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '429':
          description: Too many requests
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
    post:
      operationId: createDigitalItems
      summary: Create a list of digital items for the user
      tags:
        - Marketplace
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              maxItems: 100
              items:
                $ref: '#/components/schemas/digitalItem'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                maxItems: 100
                items:
                  $ref: '#/components/schemas/objectReference'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '429':
          description: Too many requests
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
  '/users/{userId}/wallets':
    parameters:
      - $ref: '#/components/parameters/clientIdHeaderParam'
      - name: userId
        schema:
          type: string
          pattern: '^[a-z0-9_-]{3,255}$'
          maxLength: 255
        in: path
        required: true
    post:
      operationId: createWallet
      summary: Create a wallet for the user
      tags:
        - Wallets
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/walletCreation'
      responses:
        '201':
          description: Successfully created a wallet
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/wallet'
        '400':
          description: Missing required fields on wallet
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invalidRequestError'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '429':
          description: Too many requests
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
    get:
      operationId: getWallets
      summary: Get a list of wallets for the user
      tags:
        - Wallets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                maxItems: 100
                items:
                  $ref: '#/components/schemas/wallet'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '429':
          description: Too many requests
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
  '/users/{userId}/wallets/{walletId}':
    summary: Delete a wallet for the user
    parameters:
      - $ref: '#/components/parameters/clientIdHeaderParam'
      - name: userId
        schema:
          type: string
          pattern: '^[a-z0-9_-]{3,255}$'
          maxLength: 255
        in: path
        required: true
      - name: walletId
        schema:
          type: string
          pattern: '^[a-z0-9_-]{3,255}$'
          maxLength: 255
        in: path
        required: true
    delete:
      operationId: deleteWallet
      summary: Delete a wallet
      tags:
        - Wallets
      responses:
        '204':
          description: No Content
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '404':
          description: User or wallet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '429':
          description: Too many requests
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
    get:
      operationId: getWallet
      summary: Get a wallet details
      tags:
        - Wallets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/wallet'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '429':
          description: Too many requests
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
  '/users/{userId}/wallets/{walletId}/simulate-payment':
    parameters:
      - $ref: '#/components/parameters/clientIdHeaderParam'
      - name: userId
        schema:
          type: string
          pattern: '^[a-z0-9_-]{3,255}$'
          maxLength: 255
        in: path
        required: true
      - name: walletId
        schema:
          type: string
          pattern: '^[a-z0-9_-]{3,255}$'
          maxLength: 255
        in: path
        required: true
    post:
      operationId: simulateWalletPayment
      summary: Simulate a payment to a wallet
      tags:
        - Wallets
      requestBody:
        description: amount of the payment and type of payment method
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/simulatePaymentRequest'
      responses:
        '201':
          description: >-
            Successfully created a simulated payment to the wallet.
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '403':
          description: forbidden
        '404':
          description: User or wallet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '429':
          description: Too many requests
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
  
  '/users/{userId}/wallets/{walletId}/deposit-address':
    summary: Manage deposit address
    parameters:
      - $ref: '#/components/parameters/clientIdHeaderParam'
      - name: userId
        schema:
          type: string
          pattern: '^[a-z0-9_-]{3,255}$'
          maxLength: 255
        in: path
        required: true
      - name: walletId
        schema:
          type: string
          pattern: '^[a-z0-9_-]{3,255}$'
          maxLength: 255
        in: path
        required: true
    post:
      operationId: createWalletDepositAddress
      summary: Create a crypto deposit address
      tags:
        - Wallets
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
      responses:
        '201':
          description: >-
            Successfully created a crypto deposit address.
            The wallet with its deposit instruction is returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/wallet'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '403':
          description: forbidden
        '404':
          description: User or wallet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '429':
          description: Too many requests
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
  '/users/{userId}/wallets/{walletId}/virtual-bank-account':
    summary: Manage deposit address
    parameters:
      - $ref: '#/components/parameters/clientIdHeaderParam'
      - name: userId
        schema:
          type: string
          pattern: '^[a-z0-9_-]{3,255}$'
          maxLength: 255
        in: path
        required: true
      - name: walletId
        schema:
          type: string
          pattern: '^[a-z0-9_-]{3,255}$'
          maxLength: 255
        in: path
        required: true
    post:
      operationId: createWalletVirtualBankAccount
      summary: Create a virtual bank account for a wallet
      tags:
        - Wallets
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
      responses:
        '201':
          description: >-
            Successfully created a wallet virtual bank account.
            The wallet with its deposit instruction is returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/wallet'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '403':
          description: forbidden
        '404':
          description: User or wallet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '429':
          description: Too many requests
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
  '/transactions/{requestId}/updates':
    parameters:
      - $ref: '#/components/parameters/clientIdHeaderParam'
      - name: requestId
        description: Request ID used when the transaction was initially logged
        schema:
          $ref: '#/components/schemas/uuidLikeStr'
        in: path
        required: true
    post:
      operationId: provideFeedback
      summary: Update status on existing transaction
      tags:
        - Execute Transaction
      description: >
        This endpoint allows adding feedback information to an existing
        transaction. Here are the possible feedback values with their meaning:


        | Feedback | Meaning |

        |----------|---------|

        | `ACCEPTED` | The transaction was accepted by the processor and is
        deemed to be in a pending state. This feedback is not a final state and
        should be followed by antoher feedback such as `SETTLED` or `CANCELLED`
        |

        | `SETTLED`  | The transaction was accepted and fully finalized by the
        processor. The transfer of value has occured. |

        | `CANCELLED`  | The transaction was accepted but cancelled prior to
        being settled |
        
        | `AWAITING_PAYMENT` | A deposit transaction is being processed and is in
        a state where it is waiting for the user to complete the payment by funding
        the target address provided or making a deposit using the specified payment
        method.
        |

        | `REJECTED` | The transaction was declined by the processor |

        | `REFUNDED` | An intentional, settled transaction was refunded |

        | `CHARGED_BACK` | A settled transaction was disputed and refunded |

        | `ERROR` | The processor returned an error, the transaction is assumed
        to be non existent from the processor standpoint |
      requestBody:
        description: Feedback to associate to the existing transaction
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/transactionUpdate'
      responses:
        '201':
          description: >-
            Successfully added transaction feedback. Returns the requestId in
            the id value of the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/objectReference'
        '400':
          description: Missing required fields on transaction feedback
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invalidRequestError'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '404':
          description: Transaction identified by requestId not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
        '429':
          description: Too many requests
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unmanagedError'
components:
  schemas:
    
    paymentMethodType:
      type: string
      enum:
        - ACH
        - WIRE
        - CREDIT_CARD
        - WALLET
        - CRYPTO
    
    simulatePaymentRequest:
      type: object
      properties:
        amount:
          type: number
          minimum: 0
          maximum: 999999
        paymentMethodType:
          $ref: '#/components/schemas/paymentMethodType'
    address:
      type: object
      additionalProperties: false
      properties:
        streetAddress:
          maxLength: 1024
          type: string
          pattern: '^[ -~]*$'
        city:
          maxLength: 1024
          type: string
          pattern: '^[ -~]*$'
        postalCode:
          maxLength: 1024
          type: string
          pattern: '^[ -~]*$'
        stateCode:
          $ref: '#/components/schemas/stateCode'
        country:
          $ref: '#/components/schemas/countryCode'
        default:
          type: boolean
    bankAccountPaymentInformation:
      type: object
      required:
        - type
      allOf:
        - $ref: '#/components/schemas/externalPaymentInformation'
      properties:
        type:
          $ref: '#/components/schemas/externalPaymentInformationType'
        bankAccountNumber:
          type: string
          maxLength: 64
          description: 'Valid bank account number, Required for ACH and WIRE'
          pattern: '^[ -~]*$'
        bankAccountType:
          type: string
          enum:
            - CHECKING
            - SAVINGS
          description: 'Type of bank account, Required for ACH and WIRE'
        bankSwiftCode:
          type: string
          maxLength: 11
          description: Valid bank swift code, Required for International WIRE
          pattern: '[A-Z]{6}[A-Z0-9]{2}([A-Z0-9]{3})?'
        bankRoutingNumber:
          type: string
          minLength: 7
          maxLength: 12
          description: 'Valid bank routing number, between 7 and 12 digits, Required for ACH and WIRE'
          pattern: '^[0-9]{7,12}$'
        bankRoutingCheckDigit:
          type: string
          minLength: 1
          maxLength: 1
          description: 'Valid bank routing check digit, 1 digit, Required for ACH and WIRE'
          pattern: '^[0-9]{1}$'
        accountBankName:
          type: string
          maxLength: 1024
          description: 'Name of the bank of the account, Required for OUTGOING WIRE transactions, persisted as part of the payment information'
          pattern: '^[ -~]*$'
    bii:
      type: object
      required:
        - type
      properties:
        type:
          enum:
            - EIN
      discriminator:
        propertyName: type
        mapping:
          EIN: '#/components/schemas/ein'
    business:
      type: object
      required:
        - mainRepresentative
      allOf:
        - $ref: '#/components/schemas/user'
      properties:
        type:
          $ref: '#/components/schemas/userType'
        biis:
          type: array
          maxItems: 100
          items:
            $ref: '#/components/schemas/oneOfBiiSubTypes'
        addresses:
          type: array
          maxItems: 100
          items:
            $ref: '#/components/schemas/address'
        emails:
          type: array
          maxItems: 100
          items:
            $ref: '#/components/schemas/email'
        mainRepresentative:
          $ref: '#/components/schemas/businessOwner'
        coOwners:
          type: array
          maxItems: 100
          items:
            $ref: '#/components/schemas/businessOwner'
        phones:
          type: array
          maxItems: 100
          items:
            $ref: '#/components/schemas/phone'
        sectors:
          type: array
          maxItems: 100
          items:
            maxLength: 1024
            type: string
            pattern: '^[ -~]*$'
        creationDate:
          type: string
          description: ISO 8601 formatted creation date of the business
          pattern: >-
            ^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])$
          maxLength: 10
        businessType:
          type: string
          maxLength: 50
          pattern: '^[A-Z]+(?:_[A-Z]+)*$'
        businessName:
          maxLength: 1024
          pattern: '^[A-Za-z0-9\-_]{2,1024}$'
          type: string
        coutryOfIncorporation:
          type: string
          maxLength: 2
          description: 'ISO 3166 alpha 1 country code, example US'
          pattern: '^([A-Za-z]{2})$'
    businessOwner:
      type: object
      required:
        - ownershipPercent
        - person
      additionalProperties: false
      properties:
        ownershipPercent:
          type: integer
          maximum: 100
          minimum: 1
          format: int32
        person:
          $ref: '#/components/schemas/person'
    countryCode:
      type: string
      maxLength: 2
      description: 'ISO 3166 alpha 1 country code, example US'
      pattern: '^([A-Za-z]{2})$'
    encryptedCreditCardPaymentInformation:
      type: object
      required:
        - type
      allOf:
        - $ref: '#/components/schemas/externalPaymentInformation'
      properties:
        type:
          $ref: '#/components/schemas/externalPaymentInformationType'
        encryptedInformation:
          type: object
          additionalProperties:
            maxLength: 1024
            type: string
            pattern: '^[ -~]*$'
        creditCardLast4:
          type: string
          minLength: 4
          maxLength: 4
          pattern: '\d{4}'
        cvv:
          description: 3 or 4 digits
          type: string
          pattern: '^([0-9]){3,4}$'
        creditCardType:
          type: string
          pattern: '^[\w\-\s]+$'
          maxLength: 50
          description: VISA, MASTERCARD etc
        creditCardFirst6:
          deprecated: true
          description: 'Deprecated, use bin instead'
          minLength: 6
          maxLength: 6
          type: string
          pattern: '\d{6}'
        expirationYear:
          type: string
          description: 4 digits
          pattern: '^([0-9]){4}$'
        expirationMonth:
          description: 2 digits
          type: string
          pattern: '^([0-9]){2}$'
        creditCardBin:
          minLength: 6
          maxLength: 8
          type: string
          pattern: '\d{6,8}'
        creditCardReference:
          type: string
          maxLength: 2048
          pattern: '^[ -~]*$'
          description: 'Reference to the credit card in our system, this must be set when you create a credit card'
        cardHolderFirstName:
          description: first name of card holder
          pattern: '^[ -~]*$'
          minLength: 3
          maxLength: 255
          type: string
        cardHolderLastName:
          description: last name of card holder
          pattern: '^[ -~]*$'
          type: string
          minLength: 3
          maxLength: 255
        creditCardAddress:
          description: card holder address
          type: object
          allOf:
            - $ref: '#/components/schemas/address'
        meta:
          type: object
          description: key/value map of extra meta data for this credit card

    ein:
      type: object
      allOf:
        - $ref: '#/components/schemas/bii'
      properties:
        value:
          maxLength: 16
          type: string
          description: 'Ein number, properly formatted, example 12-3456789'
          pattern: '^([07][1-7]|1[0-6]|2[0-7]|[35][0-9]|[468][0-8]|9[0-589])-?\d{7}$'
    email:
      required:
        - address
      type: object
      additionalProperties: false
      properties:
        default:
          type: boolean
        address:
          type: string
          format: email
          pattern: '^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$'
          maxLength: 320
    device:
      required:
        - fingerPrint
        - providerName
      type: object
      additionalProperties: false
      properties:
        fingerPrint:
          type: string
          pattern: '^[ -~]*$'
        providerName:
          type: string
          enum:
            - SARDINE
            - UNKNOWN
        deviceData:
          type: string
          pattern: '^[ -~]*$'
    errorType:
      type: string
      enum:
        - INVALID_REQUEST
        - MIN_INFO_MISSING
        - MIN_ASSESSMENT_MISSING
        - ALREADY_IN_PROGRESS
        - NO_ERROR
        - MISSING_WALLET
        - WALLETS_DIFFERENT_CURRENCY
        - WALLETS_SAME_CURRENCY
        - SOURCE_WALLET_DESTINATION_TOKEN_ONLY
        - ITEM_USD_VALUE_REQUIRED_WHEN_MULTIPLE_ITEMS
        - INVALID_USER_TAG
        - MISSING_TRANSACTION_GROUP_ID
        - DIFFERENT_BUY_SELL_AMOUNT
        - DIFFERENT_BUY_SELL_CURRENCIES
        - NO_INTER_CLIENTS_TRANSFERS
        - CLIENT_CONFIGURATION_ERROR
        - UNSUPPORTED_OPERATION
        - COUNTRY_NOT_SUPPORTED
        - NOT_ENOUGH_FUNDS
        - INVALID_ASSET_OWNERSHIP
        - FEES_WALLET_NOT_FOUND
        - REVERT_ONLY_CHARGE_BACK
        - MISSING_CORRESPONDING_BUY_TRANSACTION
        - ALREADY_EXISTING_CORRESPONDING_TRANSACTION_PAIR
        - BUY_TRANSACTION_NOT_SETTLED
        - FIAT_ONLY
        - SOURCE_DESTINATION_WALLET
        - INVALID_SOURCE_CURRENCY
        - INVALID_DESTINATION_CURRENCY
        - USD_WALLET_ONLY
        - BANK_ONLY
        - MISSING_EMAIL_ADDRESS
        - MISSING_BANK_ACCOUNT_INFORMATION
        - MISSING_BANK_ACCOUNT_NUMBER_INFORMATION
        - MISSING_BANK_ACCOUNT_TYPE
        - MANDATORY_IP_ADDRESS
        - MANDATORY_EMAIL_ADDRESS
        - MISSING_CC_INFO
        - CC_ONLY
        - UNABLE_TO_PROVIDE_ESTIMATES
        - FUNDING_FROM_CRYPTO_ONLY
        - WITHDRAWAL_FROM_WALLET_TO_CRYPTO
        - SOURCE_WALLET_CURRENCY_DIFFERENT_THAN_DESTINATION_TOKEN_CURRENCY
    
    oneOfAssessmentValidationError:
      oneOf:
        - $ref: '#/components/schemas/missingInformationError'
        - $ref: '#/components/schemas/invalidUserAssessmentError'
        - $ref: '#/components/schemas/noAssessmentError'
      example:
        type: MIN_INFO_MISSING
        code: 1001
        fields:
          - FULL_NAME
          - EMAIL_ADDRESS
    noAssessmentError:
      type: object
      allOf:
        - $ref: '#/components/schemas/managedError'
      properties:
        assessment:
          type: object
      additionalProperties: false
      example:
        type: NO_ERROR
        code: 0
    invalidUserAssessmentError:
      type: object
      allOf:
        - $ref: '#/components/schemas/managedError'
      required:
        - assessment
      properties:
        assessment:
          type: object
      additionalProperties: false
      example:
        type: MIN_ASSESSMENT_MISSING
        code: 1002
    invalidRequestError:
      type: object
      allOf:
        - $ref: '#/components/schemas/managedError'
      required:
        - errors
      properties:
        errors:
          type: array
          items:
            type: string
            maxLength: 100
          maxItems: 50
      additionalProperties: false
      example:
        type: INVALID_REQUEST
        code: 1000
        errors:
          - 'Invalid field: ''amount'' must be greater than or equal to 0'
    missingInformationError:
      type: object
      allOf:
        - $ref: '#/components/schemas/managedError'
      required:
        - fields
      additionalProperties: false
      properties:
        fields:
          type: array
          maxItems: 20
          items:
            $ref: '#/components/schemas/informationFields'
          example:
            - FULL_NAME
            - EMAIL_ADDRESS
      example:
        type: MIN_INFO_MISSING
        code: 1001
        fields:
          - FULL_NAME
          - EMAIL_ADDRESS
    managedError:
      type: object
      required:
        - type
        - code
      additionalProperties: true
      properties:
        type:
          $ref: '#/components/schemas/errorType'
        code:
          type: integer
          description: |
            # Error codes descriptions
            NO_ERROR(0)
            INVALID_REQUEST(1000)
            MIN_INFO_MISSING(1001)
            MIN_ASSESSMENT_MISSING(1002)
            ALREADY_IN_PROGRESS(1003)
            MISSING_WALLET(1004)
            WALLETS_DIFFERENT_CURRENCY(1005)
            WALLETS_SAME_CURRENCY(1006)
            SOURCE_WALLET_DESTINATION_TOKEN_ONLY(1007)
            ITEM_USD_VALUE_REQUIRED_WHEN_MULTIPLE_ITEMS(1008)
            INVALID_USER_TAG(1009)
            MISSING_TRANSACTION_GROUP_ID(1010)
            DIFFERENT_BUY_SELL_AMOUNT(1011)
            DIFFERENT_BUY_SELL_CURRENCIES(1012)
            NO_INTER_CLIENTS_TRANSFERS(2000)
            CLIENT_CONFIGURATION_ERROR(2001)
            UNSUPPORTED_OPERATION(2002)
            COUNTRY_NOT_SUPPORTED(2003)
            NOT_ENOUGH_FUNDS(3000)
            INVALID_ASSET_OWNERSHIP(3001)
            FEES_WALLET_NOT_FOUND(3002)
            REVERT_ONLY_CHARGE_BACK(3003)
            MISSING_CORRESPONDING_BUY_TRANSACTION(3004)
            ALREADY_EXISTING_CORRESPONDING_TRANSACTION_PAIR(3005)
            BUY_TRANSACTION_NOT_SETTLED(3006)
            FIAT_ONLY(3007)
            SOURCE_DESTINATION_WALLET(3008)
            INVALID_SOURCE_CURRENCY(3009)
            INVALID_DESTINATION_CURRENCY(3010)
            USD_WALLET_ONLY(3011)
            BANK_ONLY(4000)
            MISSING_EMAIL_ADDRESS(4001)
            MISSING_BANK_ACCOUNT_INFORMATION(4002)
            MISSING_BANK_ACCOUNT_NUMBER_INFORMATION(4003)
            MISSING_BANK_ACCOUNT_TYPE(4004)
            MANDATORY_IP_ADDRESS(5000)
            MANDATORY_EMAIL_ADDRESS(5001)
            MISSING_CC_INFO(5002)
            CC_ONLY(5003)
            UNABLE_TO_PROVIDE_ESTIMATES(6000)
            FUNDING_FROM_CRYPTO_ONLY(6001)
            WITHDRAWAL_FROM_WALLET_TO_CRYPTO(6002)
            SOURCE_WALLET_CURRENCY_DIFFERENT_THAN_DESTINATION_TOKEN_CURRENCY(6003)
          minimum: 0
          maximum: 9999
          format: int32

    unmanagedError:
      type: object
      required:
        - error
      additionalProperties: true
      properties:
        error:
          type: string
          pattern: '^[ -~]*$'
          maxLength: 100
        code:
          type: integer
          description: error code
          minimum: 0
          maximum: 9999
          format: int32


    transactionUpdate:
      description: Set of possible transaction feedbacks
      type: object
      required:
        - providerName
        - feedback
      additionalProperties: false
      properties:
        payload:
          format: escaped_json
          type: string
          example: "{\"status\":\"SETTLED\",\"exchangeInfo\":{\"amountDebited\":150.0,\"amountCredited\":1.5},\"providerName\":\"CLIENT_MANAGED_SERVICE\"}"
        providerName:
          enum:
            - CHECKOUT
            - ADMIN
            - CIRCLE
            - COINBASE
            - FORTE
            - PTI_LEDGER
            - UNKNOWN
          type: string
        feedback:
          enum:
            - SETTLED
            - ACCEPTED
            - CANCELLED
            - REJECTED
            - REFUNDED
            - CHARGED_BACK
            - ERROR
          type: string
        transactionId:
          type: string
          description: A transaction hash or any relevant identifier for the transaction
          maxLength: 256
          pattern: '^[A-Za-z0-9\-_]{3,256}$'
          nullable: true
        date:
          type: string
          description: >-
            Timestamp when the transaction feedback changed. This will be used
            in transaction reports. If not provided, it will be set to the time
            at which the api call is made. The format must be compatible with
            the ISO-8601 standard. e.g. 2022-01-01T00:00:00
          pattern: >-
            ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:\.\d{1,9})?(?:Z|[+-][01]\d:[0-5]\d)
          maxLength: 40
          nullable: true
    executeDepositTransaction:
      type: object
      required:
        - sourceMethod
      description: >-
        Fund a wallet with crypto. SourceMethod: external crypto wallet.
        DestinationMethod: wallet on the platform.
      allOf:
        - $ref: '#/components/schemas/transactionType'
      properties:
        sourceMethod:
          $ref: '#/components/schemas/oneOfExternalPaymentMethod'
        destinationMethod:
          $ref: '#/components/schemas/walletPaymentMethod'
      example:
        initiator:
          id: 36dbe68f-2747-41c6-8748-559588fd3248
          type: PERSON
        sourceMethod:
          currency: USD
          paymentInformation:
            type: ENCRYPTED_CREDIT_CARD
            creditCardType: mastercard
            creditCardLast4: '2345'
            creditCardBin: '123412'
            expirationMonth: '12'
            expirationYear: '2022'
            encryptedInformation:
              A: hello123
            creditCardReference: feead9c948a4b3393498cf17816fb289c2d4d80d4ffb5b11a7171c5f6c48f573
            cardHolderFirstName: John
            cardHolderLastName: Smith
            transactionDescription: test 123
            creditCardAddress:
              streetAddress: address
              city: city
              stateCode: US-CA
              country: US
              postalCode: AAAA
          paymentMethodType: CREDIT_CARD
          billingEmail: billing@email.com
          statementMessage: pti
        destinationMethod:
          paymentMethodType: WALLET
          paymentInformation:
            type: WALLET
            walletId: MyUSDWallet
        amount: 200
        date: '2024-06-03T08:30:00.000Z'
        transactionTotal: {
          subtotal: {
            amount: 200,
            currency: USD
          },
          fee: {
            amount: 0,
            currency: USD
          },
          total: {
            amount: 200,
            currency: USD
          }
        }
        usdValue: 200
        type: DEPOSIT
    executeTransferTransaction:
      type: object
      required:
        - sourceTransferMethod
        - destinationTransferMethod
        - destination
      description: >-
        Transfer between two users. SourceMethod: wallet on the platform.
        DestinationMethod: wallet on the platform. Destination: destination
        user.
      allOf:
        - $ref: '#/components/schemas/transactionType'
      example:
        initiator:
          id: 36dbe68f-2747-41c6-8748-559588fd3248
          type: PERSON
        sourceTransferMethod:
          paymentMethodType: WALLET
          paymentInformation:
            type: WALLET
            walletId: MyUSDWallet
        destinationTransferMethod:
          paymentMethodType: WALLET
          paymentInformation:
            type: WALLET
            walletId: MyUSDWallet2
        destination:
          id: 99dbe68f-2747-41c6-8748-559588fd3248
          type: PERSON
        amount: 200
        date: '2024-06-03T08:30:00.000Z'
        usdValue: 200
        type: TRANSFER
      properties:
        sourceTransferMethod:
          $ref: '#/components/schemas/walletPaymentMethod'
        destinationTransferMethod:
          $ref: '#/components/schemas/walletPaymentMethod'
        destination:
          $ref: '#/components/schemas/oneOfUserSubTypes'
        destinationClientId:
          type: string
          description: 'Only used for transfers between two different clients. Must be configured before using.'
    executeBuyTransaction:
      type: object
      required:
        - sourceMethod
      description: >-
        Buy digital item in the platform. SourceMethod: wallet, token, fiat.
        DigitalItem: NFT or OTHER.
      allOf:
        - $ref: '#/components/schemas/transactionType'
      properties:
        digitalItem:
          $ref: '#/components/schemas/digitalItem'
        digitalItems:
          type: array
          description: 'One of digitalItem or digitalItems is required.'
          maxItems: 100
          items:
            $ref: '#/components/schemas/digitalItem'
        sourceMethod:
          $ref: '#/components/schemas/oneOfPaymentMethod'
        seller:
          $ref: '#/components/schemas/oneOfUserSubTypes'
        feeRecipients:
          type: array
          maxItems: 100
          items:
            $ref: '#/components/schemas/feeRecipient'
      example:
        initiator:
          id: 36dbe68f-2747-41c6-8748-559588fd3248
          type: PERSON
        digitalItem:
          digitalItemType: NFT
          itemReference: 9c1661bc-5f8c-4d9c-b547-9d1f47459338
          itemDescription: Rare Elite Shaquille Leonard Level 2
          itemTitle: 'LB, Mint Condition, #4/7 From Core 22 Set'
          itemUSDValue: 6.99
        sourceMethod:
          paymentMethodType: WALLET
          paymentInformation:
            type: WALLET
            walletId: MyUSDWallet
        seller:
          id: 99dbe68f-2747-41c6-8748-559588fd3248
          type: PERSON
        amount: 200
        date: '2024-06-03T08:30:00.000Z'
        transactionTotal: {
          subtotal: {
            amount: 200,
            currency: USD
          },
          fee: {
            amount: 0,
            currency: USD
          },
          total: {
            amount: 200,
            currency: USD
          }
        }
        usdValue: 200
        type: BUY
        feeRecipients:
          - feeRecipientId: 3d85a4fc-b98f-4ab7-96fe-4cc1779fc9c2
            walletId: USDCreatorWallet
            currency: USD
            feeRecipientType: COMMISSION
            amount: 2.50
    executeSellTransaction:
      type: object
      required:
        - destinationMethod
      description: >-
        Sell digital item in the platform. DestinationMethod: wallet, fiat,
        token. DigitalItem: NFT, OTHER.
      allOf:
        - $ref: '#/components/schemas/transactionType'
      properties:
        digitalItem:
          $ref: '#/components/schemas/digitalItem'
        digitalItems:
          type: array
          description: 'One of digitalItem or digitalItems is required'
          maxItems: 100
          items:
            $ref: '#/components/schemas/digitalItem'
        destinationMethod:
          $ref: '#/components/schemas/oneOfPaymentMethod'
        buyer:
          $ref: '#/components/schemas/oneOfUserSubTypes'
        feeRecipients:
          type: array
          maxItems: 100
          items:
            $ref: '#/components/schemas/feeRecipient'
      example:
        initiator:
          id: 36dbe68f-2747-41c6-8748-559588fd3248
          type: PERSON
        digitalItem:
          digitalItemType: NFT
          itemReference: 9c1661bc-5f8c-4d9c-b547-9d1f47459338
          itemDescription: Rare Elite Shaquille Leonard Level 2
          itemTitle: 'LB, Mint Condition, #4/7 From Core 22 Set'
        destinationMethod:
          paymentMethodType: WALLET
          paymentInformation:
            type: WALLET
            walletId: MyUSDWallet
        buyer:
          id: 99dbe68f-2747-41c6-8748-559588fd3248
          type: PERSON
        amount: 200
        usdValue: 200
        feeRecipients:
          - feeRecipientId: 3d85a4fc-b98f-4ab7-96fe-4cc1779fc9c2
            walletId: USDCreatorWallet
            currency: USD
            feeRecipientType: COMMISSION
            amount: 2.50
        type: SELL
    executeWithdrawalTransaction:
      type: object
      required:
        - destinationMethod
      description: >-
        Withdraw from a wallet to fiat destination. SourceMethod: wallet on the
        platform. DestinationMethod: fiat payment method.
      allOf:
        - $ref: '#/components/schemas/transactionType'
      properties:
        destinationMethod:
          $ref: '#/components/schemas/oneOfExternalPaymentMethod'
        sourceMethod:
          $ref: '#/components/schemas/walletPaymentMethod'
      example:
        initiator:
          id: 36dbe68f-2747-41c6-8748-559588fd3248
          type: PERSON
        destinationMethod:
          paymentMethodType: CRYPTO
          paymentInformation:
            type: CRYPTO
            walletAddress: '0xc0ffee254729296a45a3885639AC7E10F9d54979'
            currency: ETH
            network: ETHEREUM
        sourceMethod:
          paymentMethodType: WALLET
          paymentInformation:
            type: WALLET
            walletId: db36f561-f20d-47b9-80b8-89dc1ecb4903
        amount: 200
        usdValue: 200
        type: WITHDRAWAL
    executeTradeTransaction:
      type: object
      required:
        - sourceMethod
        - destinationMethod
      description: >-
        Trade currency/crypto for another. SourceMethod: wallet.
        DestinationMethod: wallet.
      allOf:
        - $ref: '#/components/schemas/transactionType'
      properties:
        sourceMethod:
          $ref: '#/components/schemas/walletPaymentMethod'
        destinationMethod:
          $ref: '#/components/schemas/walletPaymentMethod'
      example:
        initiator:
          id: 36dbe68f-2747-41c6-8748-559588fd3248
          type: PERSON
        sourceMethod:
          paymentMethodType: WALLET
          paymentInformation:
            type: WALLET
            walletId: MyUSDWallet
        destinationMethod:
          paymentMethodType: WALLET
          paymentInformation:
            type: WALLET
            walletId: MyBTCWallet
        amount: 200
        usdValue: 200
        type: TRADE
    executePaymentTransaction:
      type: object
      required:
        - sourceMethod
      description: >-
        Collect payment from the initiator, the beneficiary is the client platform's 
        specified wallet in the destinationMethod(if specified).
      allOf:
        - $ref: '#/components/schemas/transactionType'
      properties:
        sourceMethod:
          $ref: '#/components/schemas/oneOfPaymentMethod'
        destinationMethod:
          $ref: '#/components/schemas/walletPaymentMethod'
      example:
        initiator:
          id: 36dbe68f-2747-41c6-8748-559588fd3248
          type: PERSON
        sourceMethod:
          paymentMethodType: WALLET
          paymentInformation:
            type: WALLET
            walletId: MyUSDWallet
        destinationMethod:
          paymentMethodType: WALLET
          paymentInformation:
            type: WALLET
            walletId: client_subscriptions
        amount: 200
        usdValue: 200
        type: PAYMENT
    executeMintTransaction:
      type: object
      required:
        - destination
        - destinationMethod
      description: >-
        Mint some value on behalf of a user in a wallet. DestinationMethod:
        wallet on the platform. destination: destination user.
      allOf:
        - $ref: '#/components/schemas/transactionType'
      example:
        destination:
          id: 36dbe68f-2747-41c6-8748-559588fd3248
          type: PERSON
        destinationMethod:
          paymentMethodType: WALLET
          paymentInformation:
            type: WALLET
            walletId: MyBTCWallet
        amount: 0.55
        usdValue: 200
        type: MINT
      properties:
        destination:
          $ref: '#/components/schemas/oneOfUserSubTypes'
        destinationMethod:
          $ref: '#/components/schemas/walletPaymentMethod'
    fiatPaymentMethod:
      type: object
      additionalProperties: true
      required:
        - paymentMethodType
      properties:
        paymentMethodType:
          $ref: '#/components/schemas/paymentMethodType'
        currency:
          type: string
          pattern: '^([A-Za-z]{1,10})$'
          maxLength: 3
        billingEmail:
          type: string
          pattern: '^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$'
          format: email
          maxLength: 320
        paymentInformation:
          $ref: '#/components/schemas/oneOfFiatPaymentInformation'
    creditCardPaymentMethod:
      type: object
      additionalProperties: true
      required:
        - paymentMethodType
      properties:
        paymentMethodType:
          $ref: '#/components/schemas/paymentMethodType'
        currency:
          type: string
          pattern: '^([A-Za-z]{1,10})$'
          maxLength: 3
        billingEmail:
          type: string
          pattern: '^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$'
          format: email
          maxLength: 320
        transactionDescription:
          description: cc transaction description
          pattern: '^[ -~]*$'
          type: string
          minLength: 3
          maxLength: 1000
        statementMessage:
          description: cc statement msg
          pattern: '^[ -~]*$'
          type: string
          minLength: 3
          maxLength: 50
        paymentInformation:
          $ref: '#/components/schemas/oneOfFiatPaymentInformation'
    wirePaymentMethod:
      type: object
      additionalProperties: true
      required:
        - paymentMethodType
      properties:
        paymentMethodType:
          $ref: '#/components/schemas/paymentMethodType'
        currency:
          type: string
          pattern: '^([A-Za-z]{1,10})$'
          maxLength: 3
        purposeOfPayment:
          type: string
          pattern: '^([A-Za-z]{1,10})$'
          maxLength: 100
        memo:
          type: string
          pattern: '^([A-Za-z]{1,10})$'
          maxLength: 140
        billingEmail:
          type: string
          pattern: '^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$'
          format: email
          maxLength: 320
        paymentInformation:
          $ref: '#/components/schemas/oneOfFiatPaymentInformation'
    walletPaymentMethod:
      type: object
      additionalProperties: false
      required:
        - paymentMethodType
      properties:
        paymentMethodType:
          $ref: '#/components/schemas/paymentMethodType'
        billingEmail:
          type: string
          pattern: '^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$'
          format: email
          maxLength: 320
        paymentInformation:
          $ref: '#/components/schemas/wallet'
    depositTransaction:
      type: object
      allOf:
        - $ref: '#/components/schemas/transactionType'
      properties:
        sourceMethod:
          $ref: '#/components/schemas/oneOfPaymentMethod'
        destinationMethod:
          $ref: '#/components/schemas/oneOfPaymentMethod'
    itin:
      type: object
      allOf:
        - $ref: '#/components/schemas/pii'
      properties:
        value:
          type: string
          maxLength: 11
          description: 'itin number, properly formatted, example 911-83-1111'
          pattern: '^9\d{2}-?((5[0-9]|6[0-5])|(8[3-8])|(9[0-2])|(9[4-9]))-?\d{4}$'
    kyc:
      type: object
      additionalProperties: false
      properties:
        status:
          enum:
            - ACCEPTED
            - REFUSED
            - MANUAL_REVIEW
            - REQUESTED_MORE_INFORMATION
          type: string
        tier:
          type: integer
          description: related kyc tier level
        clientMeta:
          type: object
          description: key/value map of extra meta data for this kyc
        requestId:
          $ref: '#/components/schemas/uuidLikeStr'
    name:
      type: object
      additionalProperties: false
      properties:
        firstName:
          maxLength: 1024
          type: string
          pattern: '^[ -~]*$'
          example: John
        lastName:
          maxLength: 1024
          type: string
          pattern: '^[ -~]*$'
          example: Smith
        middleName:
          maxLength: 1024
          type: string
          pattern: '^[ -~]*$'
          example: Doe
    objectReference:
      required:
        - id
        - link
      type: object
      example:
        id: 36dbe68f-2747-41c6-8748-559588fd3248
        link: >-
          https://api.pticlient.com/v1/user/3121df47-7a05-4b42-9db3-d1ff8a29abf0/transactions/36dbe68f-2747-41c6-8748-559588fd3248
      additionalProperties: false
      properties:
        id:
          type: string
          pattern: '^[a-z0-9_-]{3,40}$'
          maxLength: 40
        link:
          type: string
          minLength: 1
          maxLength: 1022
          pattern: '^([\w.,@?^=%&amp;:/~+#-]*[\w@?^=%&amp;/\.~+#-])?$'
    oneOfBiiSubTypes:
      required:
        - type
      properties:
        type:
          type: string
          maxLength: 50
          pattern: '^[A-Z]+(?:_[A-Z]+)*$'
      oneOf:
        - $ref: '#/components/schemas/ein'
      discriminator:
        propertyName: type
    paymentInformationType:
      type: string
      enum:
        - BANK_ACCOUNT
        - ENCRYPTED_CREDIT_CARD
        - CRYPTO
        - WALLET
    externalPaymentInformationType:
      type: string
      enum:
        - BANK_ACCOUNT
        - ENCRYPTED_CREDIT_CARD
        - CRYPTO
    oneOfExternalPaymentInformation:
      oneOf:
        - $ref: '#/components/schemas/encryptedCreditCardPaymentInformation'
        - $ref: '#/components/schemas/bankAccountPaymentInformation'
        - $ref: '#/components/schemas/cryptoPaymentInformation'
      discriminator:
        propertyName: type
        mapping:
          BANK_ACCOUNT: '#/components/schemas/bankAccountPaymentInformation'
          ENCRYPTED_CREDIT_CARD: '#/components/schemas/encryptedCreditCardPaymentInformation'
          CRYPTO: '#/components/schemas/cryptoPaymentInformation'
      example: {
        "id": "36dbe68f-2747-41c6-8748-559588fd3248",
        "type": "ENCRYPTED_CREDIT_CARD",
        "creditCardLast4": "1234",
        "creditCardBin": "123456",
        "creditCardReference": "reference",
        "creditCardAddress": {
          "streetAddress": "123 main st",
          "city": "New York",
          "stateCode": "US-NY",
          "country": "US",
          "postalCode": "10005"
        },
      }
    oneOfFiatPaymentInformation:
      oneOf:
        - $ref: '#/components/schemas/encryptedCreditCardPaymentInformation'
        - $ref: '#/components/schemas/bankAccountPaymentInformation'
      discriminator:
        propertyName: type
        mapping:
          ENCRYPTED_CREDIT_CARD: '#/components/schemas/encryptedCreditCardPaymentInformation'
          BANK_ACCOUNT: '#/components/schemas/bankAccountPaymentInformation'
    oneOfExternalPaymentMethod:
      oneOf:
        - $ref: '#/components/schemas/cryptoPaymentMethod'
        - $ref: '#/components/schemas/fiatPaymentMethod'
        - $ref: '#/components/schemas/creditCardPaymentMethod'
        - $ref: '#/components/schemas/wirePaymentMethod'
      discriminator:
        propertyName: paymentMethodType
        mapping:
          ACH: '#/components/schemas/fiatPaymentMethod'
          CREDIT_CARD: '#/components/schemas/creditCardPaymentMethod'
          WIRE: '#/components/schemas/wirePaymentMethod'
          CRYPTO: '#/components/schemas/cryptoPaymentMethod'
    oneOfPaymentMethod:
      oneOf:
        - $ref: '#/components/schemas/cryptoPaymentMethod'
        - $ref: '#/components/schemas/fiatPaymentMethod'
        - $ref: '#/components/schemas/creditCardPaymentMethod'
        - $ref: '#/components/schemas/walletPaymentMethod'
        - $ref: '#/components/schemas/wirePaymentMethod'
      discriminator:
        propertyName: paymentMethodType
        mapping:
          ACH: '#/components/schemas/fiatPaymentMethod'
          CREDIT_CARD: '#/components/schemas/creditCardPaymentMethod'
          WIRE: '#/components/schemas/wirePaymentMethod'
          WALLET: '#/components/schemas/walletPaymentMethod'
          CRYPTO: '#/components/schemas/cryptoPaymentMethod'
    oneOfPiiSubTypes:
      required:
        - type
      properties:
        type:
          type: string
          maxLength: 50
          pattern: '^[A-Z]+(?:_[A-Z]+)*$'
      oneOf:
        - $ref: '#/components/schemas/ssn'
        - $ref: '#/components/schemas/itin'
      discriminator:
        propertyName: type
    oneOfTransactionSubTypes:
      required:
        - type
      properties:
        type:
          type: string
          maxLength: 50
          pattern: '^[A-Z]+(?:_[A-Z]+)*$'
      example:
        initiator:
          id: 36dbe68f-2747-41c6-8748-559588fd3248
          type: PERSON
        sourceMethod:
          paymentMethodType: WALLET
          paymentInformation:
            type: WALLET
            walletId: MyUSDWallet
        destinationMethod:
          paymentMethodType: WALLET
          paymentInformation:
            type: WALLET
            walletId: MyUSDWallet2
        destination:
          id: 99dbe68f-2747-41c6-8748-559588fd3248
          type: PERSON
        amount: 200
        type: TRANSFER
      oneOf:
        - $ref: '#/components/schemas/depositTransaction'
        - $ref: '#/components/schemas/withdrawalTransaction'
        - $ref: '#/components/schemas/transferTransaction'
        - $ref: '#/components/schemas/sellTransaction'
        - $ref: '#/components/schemas/buyTransaction'
        - $ref: '#/components/schemas/mintTransaction'
        - $ref: '#/components/schemas/tradeTransaction'
        - $ref: '#/components/schemas/paymentTransaction'
      discriminator:
        propertyName: type
    oneOfUserSubTypes:
      oneOf:
        - $ref: '#/components/schemas/person'
        - $ref: '#/components/schemas/business'
      discriminator:
        propertyName: type
        mapping:
          PERSON: '#/components/schemas/person'
          BUSINESS: '#/components/schemas/business'
      example:
        id: 36dbe68f-2747-41c6-8748-559588fd3248
        type: PERSON
        dateOfBirth: '1988-09-28'
        name:
          firstName: test
          lastName: test
          middleName: cucumber
        emails:
          - address: johnsmith@test.com
            default: true
        phones:
          - number: '12345678901'
            type: WORK
            default: true
        addresses:
          - streetAddress: '1, main street'
            city: New Hampshire
            postalCode: '10005'
            stateCode: US-NH
            country: US
            default: true
        sourceOfFunds: Creator earnings
    externalPaymentInformation:
      type: object
      properties:
        id:
          type: string
          pattern: '^[a-z0-9_-]{3,40}$'
          maxLength: 40
          description: 'Unique identifier for the payment information, must be used to refer to a payment information for a payment'
    person:
      type: object
      allOf:
        - $ref: '#/components/schemas/user'
      properties:
        type:
          $ref: '#/components/schemas/userType'
        addresses:
          type: array
          maxItems: 100
          items:
            $ref: '#/components/schemas/address'
        piis:
          type: array
          maxItems: 5000
          items:
            $ref: '#/components/schemas/oneOfPiiSubTypes'
        emails:
          type: array
          maxItems: 100
          items:
            $ref: '#/components/schemas/email'
        devices:
          type: array
          maxItems: 100
          items:
            $ref: '#/components/schemas/device'
        phones:
          type: array
          maxItems: 100
          items:
            $ref: '#/components/schemas/phone'
        name:
          $ref: '#/components/schemas/name'
        gender:
          type: string
          minLength: 1
          maxLength: 1
          description: ISO/IEC 5218 / vCard4
          pattern: '^[0129MmfFoOnNuU]'
        dateOfBirth:
          description: ISO 8601
          pattern: >-
            ^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])$
          maxLength: 10
          type: string
        countryOfCitizenship:
          type: string
          maxLength: 200
          pattern: '^([A-Za-z][A-Za-z],?)+'
          description: Comma separated list of ISO 3166 alpha 1 country codes
    pii:
      type: object
      required:
        - type
      properties:
        type:
          enum:
            - SSN
            - ITIN
      discriminator:
        propertyName: type
        mapping: 
          SSN: '#/components/schemas/ssn'
          ITIN: '#/components/schemas/itin'
    phone:
      type: object
      additionalProperties: false
      properties:
        default:
          type: boolean
        number:
          type: string
          maxLength: 64
          description: >-
            Phone number, can be formatted using plus sign, spaces, parenthesis
            or hyphens
          pattern: >-
            /^[+]?(?:\(\d+(?:\.\d+)?\)|\d+(?:\.\d+)?)(?:[
            -]?(?:\(\d+(?:\.\d+)?\)|\d+(?:\.\d+)?))*(?:[ ]?(?:x|ext)\.?[
            ]?\d{1,5})?$/
        type:
          type: string
          pattern: ^(WORK|HOME|MOBILE)
          maxLength: 10
    ssn:
      type: object
      allOf:
        - $ref: '#/components/schemas/pii'
      properties:
        value:
          type: string
          maxLength: 11
          description: 'Valid us formatted SSN, example 222-22-2222'
          pattern: '^\d{3}-?\d{2}-?\d{4}$'
    stateCode:
      type: string
      maxLength: 5
      description: 'ISO 3166-2 state code, example US-CA'
      pattern: '^([A-Za-z]{2}-[A-Za-z0-9]{2})$'
    cryptoPaymentInformation:
      type: object
      required:
        - walletAddress
        - currency
        - network
        - type
      allOf:
        - $ref: '#/components/schemas/externalPaymentInformation'
      properties:
        type:
          $ref: '#/components/schemas/externalPaymentInformationType'
        walletAddress:
          type: string
          pattern: '^[ -~]*$'
          maxLength: 1050
          description: Blockchain address for the wallet
        currency:
          type: string
          pattern: '^([A-Za-z]{3})$'
          maxLength: 25
          description: Token symbol that your user is trading
        network:
          type: string
          pattern: .*
          maxLength: 150
          description: 'Blockchain network name, example ethereum, bitcoin, solana'
          default: Ethereum
        privateBlockchain:
          type: boolean
          description: If blockchain is a private chain
          default: false
        clientMeta:
          type: object
          description: >-
            key/value map of extra meta data for this payment info, for example,
            it could be useful to add information to a transaction, like if a
            subtoken asset is involved
    cryptoPaymentMethodDestination:
      type: object
      description: 'The destination payment method of the trade(wallet), if available'
      properties:
        paymentInformation:
          $ref: '#/components/schemas/cryptoPaymentInformation'
    cryptoPaymentMethodSource:
      type: object
      description: 'The source payment method of the trade(wallet), if available'
      properties:
        paymentInformation:
          $ref: '#/components/schemas/cryptoPaymentInformation'
    cryptoPaymentMethod:
      type: object
      additionalProperties: true
      required:
        - paymentMethodType
      properties:
        paymentMethodType:
          $ref: '#/components/schemas/paymentMethodType'
        billingEmail:
          type: string
          pattern: '^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$'
          format: email
          maxLength: 320
        paymentInformation:
          $ref: '#/components/schemas/cryptoPaymentInformation'
    transaction:
      description: The `transactionTotal` field will be assumed to be all zeroes if not provided. If no currency has been provided `USD` will be used. If no amount has been provided `0` will be used
      type: object
      required:
        - date
        - amount
        - initiator
        - usdValue
      properties:
        transactionGroupId:
          $ref: '#/components/schemas/uuidLikeStrTransactionGroup'
        subClientId:
          $ref: '#/components/schemas/uuidLikeStrSubClient'
        transactionTotal:
          $ref: '#/components/schemas/total'
        usdValue:
          type: number
          minimum: 0
          maximum: 999999
          format: double
        amount:
          type: number
          minimum: 0
          maximum: 999999
          format: double
        date:
          type: string
          description: ISO-8601
          pattern: >-
            ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:\.\d{1,9})?(?:Z|[+-][01]\d:[0-5]\d)
          maxLength: 40
        initiator:
          $ref: '#/components/schemas/oneOfUserSubTypes'
        ptiMeta:
          type: object
          additionalProperties: false
          description: key/value map of extra meta data for this request (used by PTI)
        clientMeta:
          type: object
          additionalProperties: false
          description: key/value map of extra meta data for this request (used by Client)
    transferTransaction:
      type: object
      allOf:
        - $ref: '#/components/schemas/transactionType'
      properties:
        sourceTransferMethod:
          $ref: '#/components/schemas/oneOfPaymentMethod'
        destinationTransferMethod:
          $ref: '#/components/schemas/oneOfPaymentMethod'
        destination:
          $ref: '#/components/schemas/oneOfUserSubTypes'
        destinationClientId:
          type: string
          description: Used only for transfers between two different clients. Must be configured before using.
    sellTransaction:
      type: object
      allOf:
        - $ref: '#/components/schemas/transactionType'
      properties:
        destinationMethod:
          $ref: '#/components/schemas/oneOfPaymentMethod'
        sourceMethod:
          $ref: '#/components/schemas/oneOfPaymentMethod'
        digitalItem:
          $ref: '#/components/schemas/digitalItem'
        buyer:
          $ref: '#/components/schemas/oneOfUserSubTypes'
    buyTransaction:
      type: object
      allOf:
        - $ref: '#/components/schemas/transactionType'
      properties:
        sourceMethod:
          $ref: '#/components/schemas/oneOfPaymentMethod'
        destinationMethod:
          $ref: '#/components/schemas/oneOfPaymentMethod'
        digitalItem:
          $ref: '#/components/schemas/digitalItem'
        seller:
          $ref: '#/components/schemas/oneOfUserSubTypes'
    paymentTransaction:
      description: >-
        Payment transaction, often this is not initiated by a user itself
        The destination can be specified, and needs to belong to the root user.
      type: object
      allOf:
        - $ref: '#/components/schemas/transactionType'
      properties:
        sourceMethod:
          $ref: '#/components/schemas/oneOfPaymentMethod'
    mintTransaction:
      description: >-
        The action of minting, often this is not initiated by a user itself, so
        the initiator property is optional. The destination is the beneficiary
        of the minting action. You can specify the target wallet in the
        destination method if available.
      type: object
      allOf:
        - $ref: '#/components/schemas/transactionType'
      properties:
        destination:
          $ref: '#/components/schemas/oneOfUserSubTypes'
        destinationMethod:
          $ref: '#/components/schemas/cryptoPaymentMethod'
    tradeTransaction:
      type: object
      description: >-
        The action of doing a token trade. Source and destination wallet are
        provided through the source and destination methods properties.
      allOf:
        - $ref: '#/components/schemas/transactionType'
      properties:
        destinationMethod:
          $ref: '#/components/schemas/cryptoPaymentMethodDestination'
        sourceMethod:
          $ref: '#/components/schemas/cryptoPaymentMethodSource'
    transactionTypeEnum:
      type: string
      enum:
        - DEPOSIT
        - WITHDRAWAL
        - PAYMENT
        - TRANSFER
        - SELL
        - BUY
        - MINT
        - TRADE
    transactionType:
      type: object
      required:
        - type
      allOf:
        - $ref: '#/components/schemas/transaction'
      properties:
        type:
          $ref: '#/components/schemas/transactionTypeEnum'
      discriminator:
        propertyName: type
    userStatusReason:
      type: string
      description: >-
        Reason explaining why the status is BLOCKED or INACTIVE. Same rules as
        the `status` field apply.
      enum:
        - FRAUD_SUSPICION
        - BUSINESS_CO_OWNER
        - COMPLIANCE_FLAG
        - HIGH_RISK_IP
        - INFORMATION_MISMATCH
        - HIGH_RISK_EMAIL_DOMAIN
        - UNUSUAL_HIGH_VELOCITY
        - CHARGEBACK
    userStatus:
      enum:
        - ACTIVE
        - INACTIVE
        - BLOCKED
      type: string
      description: >
        Status of the user. Only ACTIVE users can appear in API calls.  Calls
        containing INACTIVE or BLOCKED users will result in an error.  The
        status cannot be set via API calls that create or update users.  If it
        is passed in user creation or modification calls, it will be silently
        ignored.
    user:
      type: object
      required:
        - id
      example:
        id: 36dbe68f-2747-41c6-8748-559588fd3248
        dateOfBirth: '1988-09-28'
        name:
          firstName: test
          lastName: test
          middleName: cucumber
        emails:
          - address: johnsmith@test.com
            default: true
        phones:
          - number: '12345678901'
            type: WORK
            default: true
        addresses:
          - streetAddress: '1, main street'
            city: New Hampshire
            postalCode: '10005'
            stateCode: US-NH
            country: US
            default: true
        sourceOfFunds: Creator earnings

      properties:
        id:
          type: string
          pattern: '^[a-z0-9_-]{3,255}$'
          maxLength: 255
          description: >-
            Unique identifier for this user. This value MUST be chosen and
            stored at user creation time.
        status:
          $ref: '#/components/schemas/userStatus'
        statusReason:
          $ref: '#/components/schemas/userStatusReason'
        tags:
          type: array
          maxItems: 100
          items:
            $ref: '#/components/schemas/tagsType'
          description: >-
            Tag that characterizes the user. Used for internal classification
            purposes.
        paymentInformation:
          type: array
          maxItems: 100
          items:
            $ref: '#/components/schemas/oneOfExternalPaymentInformation'
        sourceOfFunds:
          type: string
          pattern: '^[ -~]*$'
          maxLength: 255
        userCreationDate:
          type: string
          description: >-
            Optional ISO-8601 value. Used to provide the date the user was
            created in your system. If left empty, it will be populated at
            current time.
          pattern: >-
            ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:\.\d{1,9})?(?:Z|[+-][01]\d:[0-5]\d)
          maxLength: 40
        userPtiMeta:
          type: object
          description: key/value map of extra meta data for this request (used by PTI)
        userClientMeta:
          type: object
          description: key/value map of extra meta data for this request (used by Client)
      discriminator:
        propertyName: type
    userType:
      type: string
      enum:
        - PERSON
        - BUSINESS
      description: >-
        Type of user which represents the legal entity involved in the API
        action
    userToken:
      required:
        - accessToken
        - expiresAt
        - tokenType
      type: object
      additionalProperties: false
      properties:
        accessToken:
          type: string
          pattern: '^[A-Za-z0-9-_=]+\.[A-Za-z0-9-_=]+\.?[A-Za-z0-9-_.+\/=]*$'
          minLength: 128
          maxLength: 4096
        expiresAt:
          type: number
          minimum: 1200000000
          maximum: 2147483647
        tokenType:
          type: string
          pattern: ^JWT$
          maxLength: 3
    userTokenRequest:
      required:
        - url
        - method
      type: object
      additionalProperties: false
      example:
        url: >-
          https://api.pticlient.com/v1/user/3121df47-7a05-4b42-9db3-d1ff8a29abf0/transactions/36dbe68f-2747-41c6-8748-559588fd3248
        method: GET
      properties:
        url:
          type: string
          minLength: 1
          maxLength: 1022
          pattern: '^([\w.,@?^=%&amp;:/~+#-]*[\w@?^=%&amp;/\.~+#-])?$'
        metaInformation:
          type: string
          minLength: 0
          maxLength: 1024
          pattern: '^[ -~]*$'
        method:
          type: string
          minLength: 3
          maxLength: 6
          pattern: ^(GET|POST|PUT|PATCH|DELETE|OPTIONS|CONNECT)$
    walletCreation:
      type: object
      required:
        - currency
        - type
      properties:
        walletId:
          type: string
          maxLength: 255
          pattern: '^[A-Za-z]+(?:_[A-Za-z]+)*$'
        currency:
          $ref: '#/components/schemas/currencyEnum'
        network:
          $ref: '#/components/schemas/blockChainEnum'
        label:
          type: string
          maxLength: 255
          pattern: '^[A-Za-z]+(?:_[A-Za-z]+)*$'
          description: Optional readable label
        type:
          type: string
          enum:
            - WALLET
        createDateTime:
          type: string
          pattern: >-
            ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:\.\d{1,9})?(?:Z|[+-][01]\d:?[0-5]\d)
          maxLength: 40
          nullable: true
      example:
        walletId: 6c870027-01d8-4804-8867-6a08e8a37e49
        label: MyUSDWallet
        type: WALLET
        currency: USD
        reference: '0x16Df97AB64d9eb5FF393F9f52F9290566857B07C'
    wallet:
      type: object
      properties:
        walletId:
          type: string
          maxLength: 255
          pattern: '^[A-Za-z]+(?:_[A-Za-z]+)*$'
        label:
          type: string
          maxLength: 255
          pattern: '^[A-Za-z]+(?:_[A-Za-z]+)*$'
        currency:
          $ref: '#/components/schemas/currencyEnum'
        network:
          $ref: '#/components/schemas/blockChainEnum'  
        balance:
          type: number
          minimum: 0
          maximum: 999999
          format: double
        inflightBalance:
          type: number
          minimum: 0
          maximum: 999999
          format: double
        availableBalance:
          type: number
          minimum: 0
          maximum: 999999
          format: double
        depositInstruction:
          type: object
          required:
            - type
          description: >-
            External reference to the wallet(could be bank account number, or blockchain address)
        createDateTime:
          type: string
          pattern: >-
            ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:\.\d{1,9})?(?:Z|[+-][01]\d:?[0-5]\d)
          maxLength: 40
          nullable: true
        type:
          type: string
          enum:
            - WALLET
      example:
        walletId: MyUSDWallet
        label: MyUSDWallet
        currency: USD
        type: WALLET
        depositInstruction: { "type": "CRYPTO_ADDRESS", "address": "0x128ZuOfgu9LZYkKjrOLLSExMELO6otneF2", "blockchain": "Bitcoin" }
        createDateTime: '2021-09-28T12:00:00Z'
        balance: 1000
    withdrawalTransaction:
      type: object
      allOf:
        - $ref: '#/components/schemas/transactionType'
      properties:
        destinationMethod:
          $ref: '#/components/schemas/oneOfPaymentMethod'
        sourceMethod:
          $ref: '#/components/schemas/oneOfPaymentMethod'
    documentMetaInformation:
      type: object
      additionalProperties: false
      example:
        documentType: PASSPORT
        contentType: image/jpeg
        originalFileName: passport.jpg
        fileSize: 123456
        tags:
          documentCountry: US
          uploadDate: '2021-09-01T00:00:00.000Z'
        fileId: 36dbe68f-2747-41c6-8748-559588fd3248
      required:
        - documentType
        - contentType
      properties:
        documentType:
          type: string
          enum:
            - PASSPORT
            - PASSPORT_BACK
            - ID_CARD
            - ID_CARD_BACK
            - DRIVER_LICENCE
            - DRIVER_LICENCE_BACK
            - RESIDENCE_PERMIT
            - RESIDENCE_PERMIT_BACK
            - SELFIE
            - FOUNDING_DOCUMENT
        contentType:
          type: string
          maxLength: 50
        originalFileName:
          type: string
          maxLength: 255
        fileSize:
          type: integer
          minimum: 1
          maximum: 999999999
          format: int32
        tags:
          type: object
          additionalProperties:
            type: string
            maxLength: 1024
            pattern: '^[ -~]*$'
        fileId:
          $ref: '#/components/schemas/uuidLikeStr'
    idDocumentMetadata:
      type: object
      example:
        PERSON_NAME: John Smith
        DATE_OF_BIRTH: '1988-01-01'
        DOCUMENT_NUMBER: '12345'
        NATIONALITY: American
        EXPIRY_DATE: '2023-06-28'
      properties:
        PERSON_NAME:
          type: string
        DATE_OF_BIRTH:
          type: string
        DOCUMENT_NUMBER:
          type: string
        NATIONALITY:
          type: string
        EXPIRY_DATE:
          type: string
    kycRequest:
      oneOf:
        - $ref: '#/components/schemas/person'
        - $ref: '#/components/schemas/business'
      discriminator:
        propertyName: type
        mapping:
          PERSON: '#/components/schemas/person'
          BUSINESS: '#/components/schemas/business'
      properties:
        intendedTransactionUsdValue:
          type: number
          minimum: 0
          maximum: 999999
          format: double
          description: >-
            The value of the transaction that the user is intending to perform
            in USD
        ptiMeta:
          additionalProperties: true
          type: object
          description: key/value map of extra meta data for this request (used by PTI)
        clientMeta:
          additionalProperties: true
          type: object
          description: key/value map of extra meta data for this request (used by Client)
    uuidLikeStr:
      type: string
      pattern: '^[a-z0-9_-]{3,64}$'
      maxLength: 64
    uuidLikeStrSubClient:
      type: string
      pattern: '^[a-z0-9_-]{3,64}$'
      maxLength: 64
      description: >-
        If your system is multi-tenant and you have this is the id of your
        client that is making the request
    uuidLikeStrTransactionGroup:
      type: string
      pattern: '^[a-z0-9_-]{3,64}$'
      maxLength: 64
      description: >-
        If your system performs transactions that are together part of an
        overall transaction group, use this to tie them together
    feeRecipient:
      type: object
      additionalProperties: false
      required:
        - feeRecipientId
        - walletId
        - currency
        - amount
        - feeRecipientType
      properties:
        feeRecipientId:
          type: string
          description: >-
            User ID of the Commission Recipient
        walletId:
          type: string
          maxLength: 255
          pattern: '^[A-Za-z]+(?:_[A-Za-z]+)*$'
        currency:
          type: string
          pattern: '^([A-Za-z]{1,10})$'
          maxLength: 10
        amount:
          type: number
          minimum: 0
          maximum: 999999
        feeRecipientType:
          type: string
          additionalProperties: false
          enum:
            - COMMISSION
            - BUSINESS
      example:
        feeRecipientId: MyUserId
        walletId: MyWalletId
        currency: USD
        amount: 100
        feeRecipientType: COMMISSION
    digitalItem:
      type: object
      additionalProperties: false
      required:
        - itemReference
        - itemTitle
        - itemDescription
        - digitalItemType
      properties:
        itemReference:
          type: string
          description: >-
            Reference information about the item, for example could be the
            contract address of an NFT item.
          maxLength: 128
          pattern: '^[ -~]*$'
        itemTitle:
          type: string
          description: 'The name of the item, for example: ShaggyDog#2'
          maxLength: 1024
          pattern: '^[ -~]*$'
        itemDescription:
          type: string
          description: 'Description about the item, for example: Shaggy Dog Collection is an NFT for Dog lovers. It is a manually generated NFT created on the Ethereum network.'
          maxLength: 1024
          pattern: '^[ -~]*$'
        itemUSDValue:
          type: number
          format: double
          description: 'Mandatory when more than one item is provided in the payload. The cost of the item being paid by the user, or the estimated value of the item in question.'
        digitalItemType:
          $ref: '#/components/schemas/digitalItemType'
      example:
        itemReference: '0x16Df97AB64d9eb5FF393F9f52F9290566857B07C'
        itemTitle: 'ShaggyDog#2'
        itemDescription: 'Shaggy Dog Collection is an NFT for Dog lovers. It is a manually generated NFT created on the Ethereum network.'
        digitalItemType: NFT
        itemUSDValue: 6.99
    providerName:
      type: string
      maxLength: 64
      pattern: '^[A-Za-z0-9\-_]{3,64}$'
    transactionAssessStatus:
      type: string
      additionalProperties: false
      enum:
        - PENDING
        - ERROR
        - MANUAL_REVIEW
        - PROCEED
        - STOP
    transactionRiskAssessment:
      type: string
      additionalProperties: false
      enum:
        - LOW
        - MEDIUM
        - HIGH
    resourceType:
      type: string
      enum:
        - USER_ASSESSMENT
        - TRANSACTION_ASSESSMENT
        - TRANSACTION_STATUS
        - USER_UPDATE
        - TRANSACTION_QUOTE_UPDATE
    userAssessStatus:
      type: string
      additionalProperties: false
      enum:
        - PENDING
        - ERROR
        - UNDER_REVIEW
        - REQUESTED_MORE_INFORMATION
        - ACCEPTED
        - REFUSED
    transactionStatus:
      type: string
      additionalProperties: false
      enum:
        - PENDING
        - ERROR
        - MANUAL_REVIEW
        - REFUSED
        - AWAITING_PAYMENT
        - AUTHORIZED
        - ACCEPTED
        - BAD_REQUEST
        - SETTLED
        - CAPTURED
        - CHARGED_BACK
        - CHARGED_BACK_REVERSED
        - CANCELED
        - REFUNDED
    actionStatus:
      type: object
      additionalProperties: false
      properties:
        resourceType:
          $ref: '#/components/schemas/resourceType'
        requestId:
          $ref: '#/components/schemas/uuidLikeStr'
        clientId:
          $ref: '#/components/schemas/uuidLikeStr'
        userId:
          $ref: '#/components/schemas/uuidLikeStr'
        date:
          type: string
          description: ISO-8601
          pattern: >-
            ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:\.\d{1,9})?(?:Z|[+-][01]\d:[0-5]\d)
          maxLength: 40
    providerResponseCode:
      type: string
      additionalProperties: false
      enum:
        - PTI_TECHNICAL_ERROR
        - PAYMENT_PROVIDER_TECHNICAL_ERROR
        - FRAUD_SUSPICION
        - BLOCKED_COUNTRY
        - AVS_CHECK_FAILED
        - CVV_CHECK_FAILED
        - PAYMENT_INSTRUMENT_PROBLEM
        - PAYMENT_PROVIDER_DECLINED
    providerResponseCategory:
      type: string
      additionalProperties: false
      enum:
        - ERROR
        - SOFT_DECLINE
        - HARD_DECLINE
    paymentStatusDetail:
      type: object
      additionalProperties: false
      properties:
        providerResponseCode:
          $ref: '#/components/schemas/providerResponseCode'
        providerResponseCategory:
          $ref: '#/components/schemas/providerResponseCategory'
    transactionStatusObject:
      type: object
      description: >-
        Status of a transaction request. The date property is the date that the
        transaction has been initiated.
      allOf:
        - $ref: '#/components/schemas/actionStatus'
      additionalProperties: false
      example:
        resourceType: TRANSACTION_STATUS
        clientId: 4121df47-7a05-4b42-9db3-d1ff8a29abf0
        userId: 5121df47-7a05-4b42-9db3-d1ff8a29abf0
        transactionGroupId: 4121df47-7a05-4b42-9db3-d1ff8a29abf0
        requestId: 3121df47-7a05-4b42-9db3-d1ff8a29abf0
        status: REFUSED
        date: '2021-09-01T00:00:00.000Z'
        amount: 100
        currency: USD
        transactionType: DEPOSIT
        meta:
          transactionId: 3121df47-7a05-4b42-9db3-d1ff8a29abf0
        paymentStatusDetail:
          providerResponseCode: AVS_CHECK_FAILED
          providerResponseCategory: SOFT_DECLINE
        total:
          fee:
            amount: 0.01
            currency: USD
          total:
            amount: 100.01
            currency: USD
          subtotal:
            amount: 100
            currency: USD
      properties:
        status:
          $ref: '#/components/schemas/transactionStatus'
        transactionType:
          $ref: '#/components/schemas/transactionTypeEnum'
        paymentMethod:
          $ref: '#/components/schemas/paymentInformationType'
        paymentStatusDetail:
          $ref: '#/components/schemas/paymentStatusDetail'
        amount:
          type: number
          minimum: 0
          maximum: 999999
        transactionGroupId:
          $ref: '#/components/schemas/uuidLikeStrTransactionGroup'
        billingEmail:
          type: string
          pattern: '^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$'
          format: email
          maxLength: 320
        total:
          $ref: '#/components/schemas/total'
        currency:
          type: string
          pattern: '^([A-Za-z]{3,10})$'
          maxLength: 3
        additionalInfos:
          type: object
          description: key/value map of extra information
    tagsType:
      type: string
      enum:
        - CREATOR
    complianceProviderResponseCode:
      type: string
      enum:
        - FRAUD_SUSPICION
        - HIGH_RISK_WALLET
        - TRANSACTION_VELOCITY_VIOLATION
        - GEO_FENCING_VIOLATION
        - BLOCKED_JURISDICTION
        - SANCTION_SCREENING
    userStatusObject:
      type: object
      description: >-
        Update in the status of a user. You will receive this when the user
        status changes from the value initially recorded in the system.
      example:
        resourceType: USER_UPDATE
        clientId: 4121df47-7a05-4b42-9db3-d1ff8a29abf0
        userId: 5121df47-7a05-4b42-9db3-d1ff8a29abf0
        statusReason: FRAUD_SUSPICION
        status: BLOCKED
      properties:
        resourceType:
          $ref: '#/components/schemas/resourceType'
        clientId:
          $ref: '#/components/schemas/uuidLikeStr'
        userId:
          $ref: '#/components/schemas/uuidLikeStr'
        statusReason:
          $ref: '#/components/schemas/userStatusReason'
        status:
          $ref: '#/components/schemas/userStatus'
    transactionAssessStatusObject:
      type: object
      description: >-
        Status of a transaction assessment request. The date property is the
        date that the reported transaction occurred.
      allOf:
        - $ref: '#/components/schemas/actionStatus'
      additionalProperties: false
      properties:
        assessment:
          $ref: '#/components/schemas/transactionAssessStatus'
        risk:
          $ref: '#/components/schemas/transactionRiskAssessment'
        amount:
          type: number
          minimum: 0
          maximum: 999999
        transactionType:
          $ref: '#/components/schemas/transactionTypeEnum'
        transactionGroupId:
          $ref: '#/components/schemas/uuidLikeStrTransactionGroup'
        meta:
          type: object
          description: key/value map of extra information
        transactionMonitoringResultDetail:
          type: object
          additionalProperties: false
          properties:
            complianceProviderResponseCode:
              $ref: '#/components/schemas/complianceProviderResponseCode'
      example:
        resourceType: TRANSACTION_ASSESSMENT
        date: '2021-09-01T00:00:00.000Z'
        clientId: 4121df47-7a05-4b42-9db3-d1ff8a29abf0
        userId: 5121df47-7a05-4b42-9db3-d1ff8a29abf0
        requestId: 3121df47-7a05-4b42-9db3-d1ff8a29abf0
        transactionGroupId: 4121df47-7a05-4b42-9db3-d1ff8a29abf0
        assessment: STOP
        risk: HIGH_RISK
        amount: 100
        transactionType: DEPOSIT
        meta:
          transactionId: 3121df47-7a05-4b42-9db3-d1ff8a29abf0
        transactionMonitoringResultDetail:
          complianceProviderResponseCode: FRAUD_SUSPICION
    transactionQuoteStatusObject:
      type: object
      description: >-
        Status of a transaction quote request. The date property is the date
        that the quote request has been initiated.
      allOf:
        - $ref: '#/components/schemas/actionStatus'
      properties:
        total:
          $ref: '#/components/schemas/total'
      example:
        resourceType: TRANSACTION_QUOTE_UPDATE
        date: '2021-09-01T00:00:00.000Z'
        clientId: 4121df47-7a05-4b42-9db3-d1ff8a29abf0
        userId: 5121df47-7a05-4b42-9db3-d1ff8a29abf0
        requestId: 3121df47-7a05-4b42-9db3-d1ff8a29abf0
        total:
          fee:
            amount: 0.01
            currency: USD
          total:
            amount: 100.01
            currency: USD
          subtotal:
            amount: 100
            currency: USD
    userPage:
      type: object
      allOf:
        - $ref: '#/components/schemas/page'
      properties:
        content:
          type: array
          maxItems: 100
          items:
            $ref: '#/components/schemas/oneOfUserSubTypes'
    page:
      type: object
      additionalProperties: false
      properties:
        totalPages:
          type: integer
          minimum: 0
          maximum: 9999999
        size:
          type: integer
          minimum: 1
          maximum: 100
        totalElements:
          type: integer
          minimum: 0
          maximum: 99999999
        last:
          type: boolean
        numberOfElements:
          type: integer
          minimum: 0
          maximum: 99999999
        pageable:
          $ref: '#/components/schemas/pageable'
        sort:
          type: object
          additionalProperties: false
          properties:
            sorted:
              type: boolean
            unsorted:
              type: boolean
            empty:
              type: boolean
        first:
          type: boolean
        empty:
          type: boolean
    pageable:
      type: object
      additionalProperties: false
      properties:
        pageNumber:
          type: integer
          minimum: 0
          maximum: 9999999
        pageSize:
          type: integer
          minimum: 1
          maximum: 100
        offset:
          type: integer
          minimum: 0
          maximum: 9999999
        paged:
          type: boolean
        unpaged:
          type: boolean
    objectReferencePage:
      type: object
      additionalProperties: false
      example:
        page: 0
        pageSize: 100
        total: 2
        items:
          - id: 36dbe68f-2747-41c6-8748-559588fd3248
            link: >-
              https://api.pticlient.com/v1/user/36dbe68f-2747-41c6-8748-559588fd3248
          - id: 36dbe68f-2747-41c6-8748-559588fd3249
            link: >-
              https://api.pticlient.com/v1/user/36dbe68f-2747-41c6-8748-559588fd3249
      properties:
        page:
          type: integer
          minimum: 0
          maximum: 9999999
        pageSize:
          type: integer
          minimum: 1
          maximum: 100
        total:
          type: integer
          minimum: 0
          maximum: 99999999
        items:
          type: array
          maxItems: 100
          items:
            $ref: '#/components/schemas/objectReference'
    kycProviderResponseCode:
      type: string
      enum:
        - FRAUD_SUSPICION
        - HIGH_RISK_WALLET
        - COMPLIANCE_FLAG
        - SELFIE_BLURRY
        - RESTRICTED_REGION
        - SANCTION_SCREENING
        - INVALID_DOCUMENTS
    userAssessStatusObject:
      type: object
      description: >-
        Status of a user assessment request. The date property is the date that
        the assessment has been initiated.
      allOf:
        - $ref: '#/components/schemas/actionStatus'
      additionalProperties: false
      properties:
        assessment:
          $ref: '#/components/schemas/userAssessStatus'
        meta:
          type: object
          description: key/value map of extra information
        tier:
          type: integer
        refusalReason:
          $ref: '#/components/schemas/kycProviderResponseCode'
      example:
        resourceType: USER_ASSESSMENT
        clientId: 4121df47-7a05-4b42-9db3-d1ff8a29abf0
        userId: 5121df47-7a05-4b42-9db3-d1ff8a29abf0
        requestId: 3121df47-7a05-4b42-9db3-d1ff8a29abf0
        assessment: REFUSED
        tier: 1
        date: '2021-09-01T00:00:00.000Z'
        refusalReason: FRAUD_SUSPICION
    digitalItemType:
      type: string
      additionalProperties: false
      enum:
        - NFT
        - OTHER
    informationFields:
      type: string
      additionalProperties: false
      enum:
        - FULL_NAME
        - EMAIL_ADDRESS
        - PHYSICAL_ADDRESS
        - BIRTH_DATE
        - PHONE_NUMBER
        - TOKEN_ADDRESS
        - US_CITIZENSHIP
        - ID_DOCUMENT
        - SOURCE_OF_FUNDS
    cost:
      type: object
      additionalProperties: false
      properties:
        amount:
          type: number
          minimum: 0
          maximum: 999999
        currency:
          type: string
          pattern: '^([A-Za-z]{1,10})$'
          maxLength: 10
    total:
      type: object
      additionalProperties: false
      properties:
        fee:
          $ref: '#/components/schemas/cost'
        total:
          $ref: '#/components/schemas/cost'
        subtotal:
          $ref: '#/components/schemas/cost'
    
    currencyEnum:
      type: string
      enum:
        - BTC
        - ETH
        - SOL
        - POL
        - USDC
        - USD
    
    blockChainEnum:
      type: string
      enum:
        - ETHEREUM
        - BITCOIN
        - SOLANA
        - POLYGON
    
    currencyType:
      type: string
      enum:
        - CRYPTO
        - FIAT
    currencyAsset:
      type: object
      additionalProperties: false
      properties:
        type:
          $ref: '#/components/schemas/currencyType'
        currency:
          $ref: '#/components/schemas/currencyEnum'
        networks:
          type: array
          items:
            $ref: '#/components/schemas/blockChainEnum'
      example:
        currency: BTC
        networks: [ BITCOIN ]
  parameters:
    mandatoryScenarioIdHeaderParam:
      name: x-pti-scenario-id
      description: >-
        Represents a user action under which transaction amounts will
        accumulated and will control the User assessment requirements. The
        values this header can take must be agreed upon and communicated to PTI.
        Setting unknown values here will generate an error.
      schema:
        $ref: '#/components/schemas/uuidLikeStr'
      in: header
      required: true
    disableWebhookHeaderParam:
      name: x-pti-disable-webhook
      description: Set to true to disable webhook calls for this request.
      schema:
        type: string
        enum:
          - true
          - false
      in: header
      required: false
    providerNameHeaderParam:
      name: x-pti-provider-name
      description: >
        Used to specify which provider is responsible for handling the given
        operation. Ignored if the client configuration is not set for passive
        mode.
      schema:
        $ref: '#/components/schemas/providerName'
      in: header
      required: false
    requestIdHeaderParam:
      name: x-pti-request-id
      description: >
        Unique identifier of the request. This ID must be provided and stored by
        the client of this API at the creation of a transaction. This ID is
        attached to all PTI internal operations as well as the webhook calls.
        This ID is required to post feedback about a transaction and get support
        from PTI for a problem on a transaction. Creating two transactions
        having the same requestId is not allowed.
      schema:
        $ref: '#/components/schemas/uuidLikeStr'
      in: header
      required: true
    sessionIdHeaderParam:
      name: x-pti-session-id
      description: >-
        Session ID associated to a UI session for a specific user. Should match
        the value passed to the PTI SDK at initialization.
      schema:
        $ref: '#/components/schemas/uuidLikeStr'
      in: header
      required: false
    pageSizeParam:
      name: size
      description: 'Page size for pagination. If not specified, the default value is 20.'
      schema:
        type: integer
        minimum: 0
        maximum: 100
        format: int32
      in: query
      required: false
    externalPaymentInformationTypeParam:
      name: type
      description: >-
        Type of external payment information. If not specified, the default value is
        ENCRYPTED_CREDIT_CARD. This is used to filter the external payment information by type.
      schema:
        $ref: '#/components/schemas/externalPaymentInformationType'
      in: query
      required: false
    offsetParam:
      name: page
      description: 'Offset for pagination. If not specified, the default value is 0.'
      schema:
        type: integer
        minimum: 0
        maximum: 9999999
        format: int32
      in: query
      required: false
    sortByParam:
      name: sortBy
      description: 'Sort by field. If not specified, the default value is creation date.'
      schema:
        type: string
      in: query
      required: false
    clientIdHeaderParam:
      name: x-pti-client-id
      description: Client ID provided to you during onboarding.
      schema:
        $ref: '#/components/schemas/uuidLikeStr'
      in: header
      required: true
  securitySchemes:
    signature:
      type: http
      scheme: bearer
      bearerFormat: Digest
      description: Client signature for a specific request. Header x-pti-signature
    userToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: >-
        Single use token generated for a specific request(JWT Format). Header
        x-pti-token