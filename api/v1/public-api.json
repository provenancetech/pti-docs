{
  "openapi" : "3.0.2",
  "info" : {
    "title" : "Provenance technologies institutional API",
    "description" : "Provenance technologies institutional API specification",
    "license" : {
      "name" : "Private",
      "url" : "https://provenancetech.io"
    },
    "version" : "1.0.164"
  },
  "servers" : [ {
    "url" : "https://apidev.pticlient.com/v1"
  }, {
    "url" : "https://apistaging.pticlient.com/v1"
  }, {
    "url" : "https://api.pticlient.com/v1"
  } ],
  "security" : [ {
    "signature" : [ ]
  }, {
    "userToken" : [ ]
  } ],
  "paths" : {
    "/auth/jwt" : {
      "post" : {
        "tags" : [ "Authorization" ],
        "summary" : "Get a user token",
        "operationId" : "getUserToken",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/userTokenRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "userToken",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/userToken"
                }
              }
            }
          },
          "400" : {
            "description" : "bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/invalidRequestError"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "403" : {
            "description" : "forbidden"
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      }
    },
    "/users" : {
      "get" : {
        "tags" : [ "Collect User Data" ],
        "summary" : "Get the list of your users",
        "operationId" : "getListOfUsers",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Offset for pagination. If not specified, the default value is 0.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 9999999,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "Page size for pagination. If not specified, the default value is 20.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortBy",
          "in" : "query",
          "description" : "Sort by field. If not specified, the default value is creation date.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/userPage"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Collect User Data" ],
        "summary" : "Replace all informations for a user by the informations provided",
        "operationId" : "updateUser",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/oneOfUserSubTypes"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/oneOfUserSubTypes"
                }
              }
            }
          },
          "400" : {
            "description" : "User invalid or missing fields",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/invalidRequestError"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found"
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Collect User Data" ],
        "summary" : "Add a user",
        "operationId" : "addAUser",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/oneOfUserSubTypes"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Successfully added User",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/oneOfUserSubTypes"
                }
              }
            }
          },
          "400" : {
            "description" : "Missing required fields on User",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/invalidRequestError"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "409" : {
            "description" : "User already exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        },
        "callbacks" : {
          "userStatusUpdate" : {
            "${yourWebhookAddress}" : {
              "post" : {
                "requestBody" : {
                  "content" : {
                    "application/json" : {
                      "schema" : {
                        "$ref" : "#/components/schemas/userStatusObject"
                      }
                    }
                  },
                  "required" : true
                },
                "responses" : {
                  "200" : {
                    "description" : "Your server returns this code if it accepts the callback"
                  }
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Collect User Data" ],
        "summary" : "Add information to a user",
        "operationId" : "mergeUserInfo",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/oneOfUserSubTypes"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/oneOfUserSubTypes"
                }
              }
            }
          },
          "400" : {
            "description" : "User invalid or missing fields",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/invalidRequestError"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found"
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}" : {
      "get" : {
        "tags" : [ "Collect User Data" ],
        "summary" : "Get the information for a specific user.",
        "description" : "This endpoint is used to get the information for a specific user. The information returned is the information that was collected for the user. PII information is not returned.",
        "operationId" : "getUser",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 255,
            "pattern" : "^[a-z0-9_-]{3,255}$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/oneOfUserSubTypes"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/payment-information" : {
      "get" : {
        "tags" : [ "Collect User Data" ],
        "summary" : "Get all payment information for a specific user.",
        "description" : "This endpoint is used to get the payment information for a specific user. The information returned is the information that was collected for the user. You can filter by payment information type",
        "operationId" : "getUserPaymentInformations",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 255,
            "pattern" : "^[a-z0-9_-]{3,255}$",
            "type" : "string"
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Type of external payment information. If not specified, the default value is ENCRYPTED_CREDIT_CARD. This is used to filter the external payment information by type.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/externalPaymentInformationType"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "maxItems" : 100,
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/oneOfExternalPaymentInformation"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Collect User Data" ],
        "summary" : "Add a payment information for a specific user.",
        "description" : "This endpoint is used to add a payment information for a specific user.",
        "operationId" : "addUserPaymentInformation",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 255,
            "pattern" : "^[a-z0-9_-]{3,255}$",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/oneOfExternalPaymentInformation"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "CREATED",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/oneOfExternalPaymentInformation"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/payment-information/{paymentInformationId}" : {
      "get" : {
        "tags" : [ "Collect User Data" ],
        "summary" : "Get a payment information for a specific user.",
        "description" : "This endpoint is used to get a payment information for a specific user.",
        "operationId" : "getUserPaymentInformation",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 255,
            "pattern" : "^[a-z0-9_-]{3,255}$",
            "type" : "string"
          }
        }, {
          "name" : "paymentInformationId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 255,
            "pattern" : "^[a-z0-9_-]{3,255}$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/oneOfExternalPaymentInformation"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Collect User Data" ],
        "summary" : "Delete a payment information for a specific user.",
        "description" : "This endpoint is used to delete a payment information for a specific user.",
        "operationId" : "deleteUserPaymentInformations",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 255,
            "pattern" : "^[a-z0-9_-]{3,255}$",
            "type" : "string"
          }
        }, {
          "name" : "paymentInformationId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 255,
            "pattern" : "^[a-z0-9_-]{3,255}$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "NO CONTENT"
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      }
    },
    "/transactions/validations" : {
      "post" : {
        "tags" : [ "Transaction Assessment" ],
        "summary" : "Validate that you have provided the necessary information or user assessment to perform a transaction.",
        "operationId" : "transactionInformationAssessment",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-request-id",
          "in" : "header",
          "description" : "Unique identifier of the request. This ID must be provided and stored by the client of this API at the creation of a transaction. This ID is attached to all PTI internal operations as well as the webhook calls. This ID is required to post feedback about a transaction and get support from PTI for a problem on a transaction. Creating two transactions having the same requestId is not allowed.\n",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-scenario-id",
          "in" : "header",
          "description" : "Represents a user action under which transaction amounts will accumulated and will control the User assessment requirements. The values this header can take must be agreed upon and communicated to PTI. Setting unknown values here will generate an error.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-session-id",
          "in" : "header",
          "description" : "Session ID associated to a UI session for a specific user. Should match the value passed to the PTI SDK at initialization.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-disable-webhook",
          "in" : "header",
          "description" : "Set to true to disable webhook calls for this request.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/oneOfTransactionSubTypes"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/oneOfTransactionValidationError"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      }
    },
    "/users/assessments" : {
      "post" : {
        "tags" : [ "User Assessment" ],
        "summary" : "Start user assessment",
        "description" : "This endpoint is used to assess a user. Depending on what information is available on the user,  a tier level will be assigned to the assessment, the higher the level is, the more permission he will get on your platform.  Please refer to PTI documentation for more information on the tier levels configuration and scenarios.",
        "operationId" : "startUserAssessment",
        "parameters" : [ {
          "name" : "x-pti-request-id",
          "in" : "header",
          "description" : "Unique identifier of the request. This ID must be provided and stored by the client of this API at the creation of a transaction. This ID is attached to all PTI internal operations as well as the webhook calls. This ID is required to post feedback about a transaction and get support from PTI for a problem on a transaction. Creating two transactions having the same requestId is not allowed.\n",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-scenario-id",
          "in" : "header",
          "description" : "Represents a user action under which transaction amounts will accumulated and will control the User assessment requirements. The values this header can take must be agreed upon and communicated to PTI. Setting unknown values here will generate an error.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-session-id",
          "in" : "header",
          "description" : "Session ID associated to a UI session for a specific user. Should match the value passed to the PTI SDK at initialization.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-disable-webhook",
          "in" : "header",
          "description" : "Set to true to disable webhook calls for this request.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/kycRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "started",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/objectReference"
                }
              }
            }
          },
          "400" : {
            "description" : "User invalid or missing fields",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/invalidRequestError"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden. Happens when the targeted user is not active.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        },
        "callbacks" : {
          "userAssessUpdate" : {
            "${yourWebhookAddress}" : {
              "post" : {
                "requestBody" : {
                  "content" : {
                    "application/json" : {
                      "schema" : {
                        "$ref" : "#/components/schemas/userAssessStatusObject"
                      }
                    }
                  },
                  "required" : true
                },
                "responses" : {
                  "200" : {
                    "description" : "Your server returns this code if it accepts the callback"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/assessments" : {
      "get" : {
        "tags" : [ "User Assessment" ],
        "summary" : "Get a the latest assessment for a user",
        "operationId" : "getLastKyc",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 255,
            "pattern" : "^[a-z0-9_-]{3,255}$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/userAssessStatusObject"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      }
    },
    "/transactions/assessments" : {
      "post" : {
        "tags" : [ "Transaction Assessment" ],
        "summary" : "Assess a transaction",
        "description" : "This endpoint is used to assess a transaction. The transaction assessment and user information requirement are evaluated. This step is also done when executing a transaction, but it can be called as a standalone.",
        "operationId" : "assessTransaction",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-request-id",
          "in" : "header",
          "description" : "Unique identifier of the request. This ID must be provided and stored by the client of this API at the creation of a transaction. This ID is attached to all PTI internal operations as well as the webhook calls. This ID is required to post feedback about a transaction and get support from PTI for a problem on a transaction. Creating two transactions having the same requestId is not allowed.\n",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-scenario-id",
          "in" : "header",
          "description" : "Represents a user action under which transaction amounts will accumulated and will control the User assessment requirements. The values this header can take must be agreed upon and communicated to PTI. Setting unknown values here will generate an error.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-session-id",
          "in" : "header",
          "description" : "Session ID associated to a UI session for a specific user. Should match the value passed to the PTI SDK at initialization.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-disable-webhook",
          "in" : "header",
          "description" : "Set to true to disable webhook calls for this request.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/oneOfTransactionSubTypes"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Successfully added transaction log",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/objectReference"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid fields on Transaction",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/invalidRequestError"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden. Happens when a user involved in the transaction is not active.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "422" : {
            "description" : "One of these 2 cases: More information about the User is needed in order to approve the transaction. There is no approved assessment for this user that enables him to perform the operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/oneOfTransactionValidationError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        },
        "callbacks" : {
          "transactionAssessUpdate" : {
            "${yourWebhookAddress}" : {
              "post" : {
                "requestBody" : {
                  "content" : {
                    "application/json" : {
                      "schema" : {
                        "$ref" : "#/components/schemas/transactionAssessStatusObject"
                      }
                    }
                  },
                  "required" : true
                },
                "responses" : {
                  "200" : {
                    "description" : "Your server returns this code if it accepts the callback"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/transactions/assessments/{requestId}" : {
      "get" : {
        "tags" : [ "Transaction Assessment" ],
        "summary" : "Get the transaction assessment status",
        "operationId" : "getTransactionAssess",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "requestId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/transactionAssessStatusObject"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User of Transaction Log not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      }
    },
    "/transactions/swap/quotes/{requestId}" : {
      "get" : {
        "tags" : [ "Estimate Transaction Cost" ],
        "summary" : "Get a transaction quote status",
        "operationId" : "getTransactionQuote",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "requestId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/transactionQuoteStatusObject"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User of Transaction Log not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      }
    },
    "/transactions/swap/quotes" : {
      "post" : {
        "tags" : [ "Estimate Transaction Cost" ],
        "summary" : "Estimate a transaction cost",
        "operationId" : "estimationTransactionCost",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-request-id",
          "in" : "header",
          "description" : "Unique identifier of the request. This ID must be provided and stored by the client of this API at the creation of a transaction. This ID is attached to all PTI internal operations as well as the webhook calls. This ID is required to post feedback about a transaction and get support from PTI for a problem on a transaction. Creating two transactions having the same requestId is not allowed.\n",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-session-id",
          "in" : "header",
          "description" : "Session ID associated to a UI session for a specific user. Should match the value passed to the PTI SDK at initialization.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-scenario-id",
          "in" : "header",
          "description" : "Represents a user action under which transaction amounts will accumulated and will control the User assessment requirements. The values this header can take must be agreed upon and communicated to PTI. Setting unknown values here will generate an error.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-disable-webhook",
          "in" : "header",
          "description" : "Set to true to disable webhook calls for this request.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "x-pti-provider-name",
          "in" : "header",
          "description" : "Used to specify which provider is responsible for handling the given operation. Ignored if the client configuration is not set for passive mode.\n",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/providerName"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/oneOfTransactionSubTypes"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Successfully initiated the transaction estimate",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/objectReference"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid fields on Transaction",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/invalidRequestError"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden. Happens when the targeted user is not active.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        },
        "callbacks" : {
          "transactionQuoteUpdate" : {
            "${yourWebhookAddress}" : {
              "post" : {
                "requestBody" : {
                  "content" : {
                    "application/json" : {
                      "schema" : {
                        "$ref" : "#/components/schemas/transactionQuoteStatusObject"
                      }
                    }
                  },
                  "required" : true
                },
                "responses" : {
                  "200" : {
                    "description" : "Your server returns this code if it accepts the callback"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/transactions/deposits" : {
      "post" : {
        "tags" : [ "Execute Transaction" ],
        "summary" : "Execute a deposit (crypto/fiat -in)",
        "description" : "This endpoint is used to execute a deposit (crypto/fiat -in) transaction for a user. The transaction assessment and user information requirement are evaluated before the transaction is executed.",
        "operationId" : "deposit",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-request-id",
          "in" : "header",
          "description" : "Unique identifier of the request. This ID must be provided and stored by the client of this API at the creation of a transaction. This ID is attached to all PTI internal operations as well as the webhook calls. This ID is required to post feedback about a transaction and get support from PTI for a problem on a transaction. Creating two transactions having the same requestId is not allowed.\n",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-scenario-id",
          "in" : "header",
          "description" : "Represents a user action under which transaction amounts will accumulated and will control the User assessment requirements. The values this header can take must be agreed upon and communicated to PTI. Setting unknown values here will generate an error.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-session-id",
          "in" : "header",
          "description" : "Session ID associated to a UI session for a specific user. Should match the value passed to the PTI SDK at initialization.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-disable-webhook",
          "in" : "header",
          "description" : "Set to true to disable webhook calls for this request.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "x-pti-provider-name",
          "in" : "header",
          "description" : "Used to specify which provider is responsible for handling the given operation. Ignored if the client configuration is not set for passive mode.\n",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/providerName"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/executeDepositTransaction"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Successfully initiated the transaction",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/objectReference"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid fields on Transaction",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/invalidRequestError"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden. Happens when the targeted user is not active.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "422" : {
            "description" : "One of these 2 cases: More information about the User is needed in order to approve the transaction. There is no approved assessment for this user that enables him to perform the operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/oneOfTransactionValidationError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        },
        "callbacks" : {
          "transactionUpdate" : {
            "${yourWebhookAddress}" : {
              "post" : {
                "requestBody" : {
                  "content" : {
                    "application/json" : {
                      "schema" : {
                        "$ref" : "#/components/schemas/transactionStatusObject"
                      }
                    }
                  },
                  "required" : true
                },
                "responses" : {
                  "200" : {
                    "description" : "Your server returns this code if it accepts the callback"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/transactions/purchases" : {
      "post" : {
        "tags" : [ "Marketplace" ],
        "summary" : "Execute a buy (token, nft, other)",
        "description" : "This endpoint is used to execute a digital item buy (token, nft, other) transaction for a user. The transaction assessment and user information requirement are evaluated before the transaction is executed.",
        "operationId" : "digitalItemBuy",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-request-id",
          "in" : "header",
          "description" : "Unique identifier of the request. This ID must be provided and stored by the client of this API at the creation of a transaction. This ID is attached to all PTI internal operations as well as the webhook calls. This ID is required to post feedback about a transaction and get support from PTI for a problem on a transaction. Creating two transactions having the same requestId is not allowed.\n",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-scenario-id",
          "in" : "header",
          "description" : "Represents a user action under which transaction amounts will accumulated and will control the User assessment requirements. The values this header can take must be agreed upon and communicated to PTI. Setting unknown values here will generate an error.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-session-id",
          "in" : "header",
          "description" : "Session ID associated to a UI session for a specific user. Should match the value passed to the PTI SDK at initialization.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-disable-webhook",
          "in" : "header",
          "description" : "Set to true to disable webhook calls for this request.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "x-pti-provider-name",
          "in" : "header",
          "description" : "Used to specify which provider is responsible for handling the given operation. Ignored if the client configuration is not set for passive mode.\n",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/providerName"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/executeBuyTransaction"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Successfully initiated the transaction",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/objectReference"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid fields on Transaction",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/invalidRequestError"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden. Happens when the targeted user is not active.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "422" : {
            "description" : "One of these 2 cases: More information about the User is needed in order to approve the transaction. There is no approved assessment for this user that enables him to perform the operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/oneOfTransactionValidationError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        },
        "callbacks" : {
          "transactionUpdate" : {
            "${yourWebhookAddress}" : {
              "post" : {
                "requestBody" : {
                  "content" : {
                    "application/json" : {
                      "schema" : {
                        "$ref" : "#/components/schemas/transactionStatusObject"
                      }
                    }
                  },
                  "required" : true
                },
                "responses" : {
                  "200" : {
                    "description" : "Your server returns this code if it accepts the callback"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/transactions/sales" : {
      "post" : {
        "tags" : [ "Marketplace" ],
        "summary" : "Execute a sell (token, nft, other)",
        "description" : "This endpoint is used to execute a digital item sell (token, nft, other) transaction for a user. The transaction assessment and user information requirement are evaluated before the transaction is executed.",
        "operationId" : "digitalItemSell",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-request-id",
          "in" : "header",
          "description" : "Unique identifier of the request. This ID must be provided and stored by the client of this API at the creation of a transaction. This ID is attached to all PTI internal operations as well as the webhook calls. This ID is required to post feedback about a transaction and get support from PTI for a problem on a transaction. Creating two transactions having the same requestId is not allowed.\n",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-scenario-id",
          "in" : "header",
          "description" : "Represents a user action under which transaction amounts will accumulated and will control the User assessment requirements. The values this header can take must be agreed upon and communicated to PTI. Setting unknown values here will generate an error.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-session-id",
          "in" : "header",
          "description" : "Session ID associated to a UI session for a specific user. Should match the value passed to the PTI SDK at initialization.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-disable-webhook",
          "in" : "header",
          "description" : "Set to true to disable webhook calls for this request.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "x-pti-provider-name",
          "in" : "header",
          "description" : "Used to specify which provider is responsible for handling the given operation. Ignored if the client configuration is not set for passive mode.\n",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/providerName"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/executeSellTransaction"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Successfully initiated the transaction",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/objectReference"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid fields on Transaction",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/invalidRequestError"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden. Happens when the targeted user is not active.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "422" : {
            "description" : "One of these 2 cases: More information about the User is needed in order to approve the transaction. There is no approved assessment for this user that enables him to perform the operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/oneOfTransactionValidationError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        },
        "callbacks" : {
          "transactionUpdate" : {
            "${yourWebhookAddress}" : {
              "post" : {
                "requestBody" : {
                  "content" : {
                    "application/json" : {
                      "schema" : {
                        "$ref" : "#/components/schemas/transactionStatusObject"
                      }
                    }
                  },
                  "required" : true
                },
                "responses" : {
                  "200" : {
                    "description" : "Your server returns this code if it accepts the callback"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/transactions/withdrawals" : {
      "post" : {
        "tags" : [ "Execute Transaction" ],
        "summary" : "Execute a withdrawal of fiat of crypto",
        "description" : "This endpoint is used to execute a withdrawal of fiat or crypto transaction for a user. The transaction assessment and user information requirement are evaluated before the transaction is executed.",
        "operationId" : "withdrawal",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-request-id",
          "in" : "header",
          "description" : "Unique identifier of the request. This ID must be provided and stored by the client of this API at the creation of a transaction. This ID is attached to all PTI internal operations as well as the webhook calls. This ID is required to post feedback about a transaction and get support from PTI for a problem on a transaction. Creating two transactions having the same requestId is not allowed.\n",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-scenario-id",
          "in" : "header",
          "description" : "Represents a user action under which transaction amounts will accumulated and will control the User assessment requirements. The values this header can take must be agreed upon and communicated to PTI. Setting unknown values here will generate an error.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-session-id",
          "in" : "header",
          "description" : "Session ID associated to a UI session for a specific user. Should match the value passed to the PTI SDK at initialization.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-disable-webhook",
          "in" : "header",
          "description" : "Set to true to disable webhook calls for this request.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "x-pti-provider-name",
          "in" : "header",
          "description" : "Used to specify which provider is responsible for handling the given operation. Ignored if the client configuration is not set for passive mode.\n",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/providerName"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/executeWithdrawalTransaction"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Successfully initiated the transaction",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/objectReference"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid fields on Transaction",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/invalidRequestError"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden. Happens when the targeted user is not active.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "422" : {
            "description" : "One of these 2 cases: More information about the User is needed in order to approve the transaction. There is no approved assessment for this user that enables him to perform the operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/oneOfTransactionValidationError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        },
        "callbacks" : {
          "transactionUpdate" : {
            "${yourWebhookAddress}" : {
              "post" : {
                "requestBody" : {
                  "content" : {
                    "application/json" : {
                      "schema" : {
                        "$ref" : "#/components/schemas/transactionStatusObject"
                      }
                    }
                  },
                  "required" : true
                },
                "responses" : {
                  "200" : {
                    "description" : "Your server returns this code if it accepts the callback"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/transactions/payments" : {
      "post" : {
        "tags" : [ "Execute Transaction" ],
        "summary" : "Execute a generic payment of fiat of crypto",
        "description" : "This endpoint is used to execute a generic payment of fiat or crypto transaction for a user. The transaction assessment and user information requirement are evaluated before the transaction is executed.",
        "operationId" : "payment",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-request-id",
          "in" : "header",
          "description" : "Unique identifier of the request. This ID must be provided and stored by the client of this API at the creation of a transaction. This ID is attached to all PTI internal operations as well as the webhook calls. This ID is required to post feedback about a transaction and get support from PTI for a problem on a transaction. Creating two transactions having the same requestId is not allowed.\n",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-scenario-id",
          "in" : "header",
          "description" : "Represents a user action under which transaction amounts will accumulated and will control the User assessment requirements. The values this header can take must be agreed upon and communicated to PTI. Setting unknown values here will generate an error.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-session-id",
          "in" : "header",
          "description" : "Session ID associated to a UI session for a specific user. Should match the value passed to the PTI SDK at initialization.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-disable-webhook",
          "in" : "header",
          "description" : "Set to true to disable webhook calls for this request.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "x-pti-provider-name",
          "in" : "header",
          "description" : "Used to specify which provider is responsible for handling the given operation. Ignored if the client configuration is not set for passive mode.\n",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/providerName"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/executePaymentTransaction"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Successfully initiated the transaction",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/objectReference"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid fields on Transaction",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/invalidRequestError"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden. Happens when the targeted user is not active.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "422" : {
            "description" : "One of these 2 cases: More information about the User is needed in order to approve the transaction. There is no approved assessment for this user that enables him to perform the operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/oneOfTransactionValidationError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        },
        "callbacks" : {
          "transactionUpdate" : {
            "${yourWebhookAddress}" : {
              "post" : {
                "requestBody" : {
                  "content" : {
                    "application/json" : {
                      "schema" : {
                        "$ref" : "#/components/schemas/transactionStatusObject"
                      }
                    }
                  },
                  "required" : true
                },
                "responses" : {
                  "200" : {
                    "description" : "Your server returns this code if it accepts the callback"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/transactions/transfers" : {
      "post" : {
        "tags" : [ "Execute Transaction" ],
        "summary" : "Execute a transfer between users",
        "description" : "This endpoint is used to execute a transfer between users. The transaction assessment and user information requirement are evaluated before the transaction is executed.",
        "operationId" : "transfer",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-request-id",
          "in" : "header",
          "description" : "Unique identifier of the request. This ID must be provided and stored by the client of this API at the creation of a transaction. This ID is attached to all PTI internal operations as well as the webhook calls. This ID is required to post feedback about a transaction and get support from PTI for a problem on a transaction. Creating two transactions having the same requestId is not allowed.\n",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-scenario-id",
          "in" : "header",
          "description" : "Represents a user action under which transaction amounts will accumulated and will control the User assessment requirements. The values this header can take must be agreed upon and communicated to PTI. Setting unknown values here will generate an error.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-session-id",
          "in" : "header",
          "description" : "Session ID associated to a UI session for a specific user. Should match the value passed to the PTI SDK at initialization.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-disable-webhook",
          "in" : "header",
          "description" : "Set to true to disable webhook calls for this request.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "x-pti-provider-name",
          "in" : "header",
          "description" : "Used to specify which provider is responsible for handling the given operation. Ignored if the client configuration is not set for passive mode.\n",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/providerName"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/executeTransferTransaction"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Successfully initiated the transaction",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/objectReference"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid fields on Transaction",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/invalidRequestError"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden. Happens when the targeted user is not active.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "422" : {
            "description" : "One of these 2 cases: More information about the User is needed in order to approve the transaction. There is no approved assessment for this user that enables him to perform the operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/oneOfTransactionValidationError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        },
        "callbacks" : {
          "transactionUpdate" : {
            "${yourWebhookAddress}" : {
              "post" : {
                "requestBody" : {
                  "content" : {
                    "application/json" : {
                      "schema" : {
                        "$ref" : "#/components/schemas/transactionStatusObject"
                      }
                    }
                  },
                  "required" : true
                },
                "responses" : {
                  "200" : {
                    "description" : "Your server returns this code if it accepts the callback"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/transactions/swaps" : {
      "post" : {
        "tags" : [ "Execute Transaction" ],
        "summary" : "Execute a swap of liquidity between wallets",
        "description" : "This endpoint is used to execute a swap between currencies and crypto. The transaction assessment and user information requirement are evaluated before the transaction is executed.",
        "operationId" : "swap",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-request-id",
          "in" : "header",
          "description" : "Unique identifier of the request. This ID must be provided and stored by the client of this API at the creation of a transaction. This ID is attached to all PTI internal operations as well as the webhook calls. This ID is required to post feedback about a transaction and get support from PTI for a problem on a transaction. Creating two transactions having the same requestId is not allowed.\n",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-scenario-id",
          "in" : "header",
          "description" : "Represents a user action under which transaction amounts will accumulated and will control the User assessment requirements. The values this header can take must be agreed upon and communicated to PTI. Setting unknown values here will generate an error.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-session-id",
          "in" : "header",
          "description" : "Session ID associated to a UI session for a specific user. Should match the value passed to the PTI SDK at initialization.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-disable-webhook",
          "in" : "header",
          "description" : "Set to true to disable webhook calls for this request.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "x-pti-provider-name",
          "in" : "header",
          "description" : "Used to specify which provider is responsible for handling the given operation. Ignored if the client configuration is not set for passive mode.\n",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/providerName"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/executeSwapTransaction"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Successfully initiated the transaction",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/objectReference"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid fields on Transaction",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/invalidRequestError"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden. Happens when the targeted user is not active.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "422" : {
            "description" : "One of these 2 cases: More information about the User is needed in order to approve the transaction. There is no approved assessment for this user that enables him to perform the operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/oneOfTransactionValidationError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        },
        "callbacks" : {
          "transactionUpdate" : {
            "${yourWebhookAddress}" : {
              "post" : {
                "requestBody" : {
                  "content" : {
                    "application/json" : {
                      "schema" : {
                        "$ref" : "#/components/schemas/transactionStatusObject"
                      }
                    }
                  },
                  "required" : true
                },
                "responses" : {
                  "200" : {
                    "description" : "Your server returns this code if it accepts the callback"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/transactions/mints" : {
      "post" : {
        "tags" : [ "Execute Transaction" ],
        "summary" : "Execute a mint transaction",
        "description" : "This endpoint is used to execute a mint transaction for a user. The transaction assessment and user information requirement are evaluated before the transaction is executed.",
        "operationId" : "mint",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-request-id",
          "in" : "header",
          "description" : "Unique identifier of the request. This ID must be provided and stored by the client of this API at the creation of a transaction. This ID is attached to all PTI internal operations as well as the webhook calls. This ID is required to post feedback about a transaction and get support from PTI for a problem on a transaction. Creating two transactions having the same requestId is not allowed.\n",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-scenario-id",
          "in" : "header",
          "description" : "Represents a user action under which transaction amounts will accumulated and will control the User assessment requirements. The values this header can take must be agreed upon and communicated to PTI. Setting unknown values here will generate an error.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-session-id",
          "in" : "header",
          "description" : "Session ID associated to a UI session for a specific user. Should match the value passed to the PTI SDK at initialization.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "x-pti-disable-webhook",
          "in" : "header",
          "description" : "Set to true to disable webhook calls for this request.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "x-pti-provider-name",
          "in" : "header",
          "description" : "Used to specify which provider is responsible for handling the given operation. Ignored if the client configuration is not set for passive mode.\n",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/providerName"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/executeMintTransaction"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Successfully initiated the transaction",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/objectReference"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid fields on Transaction",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/invalidRequestError"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden. Happens when the targeted user is not active.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "422" : {
            "description" : "One of these 2 cases: More information about the User is needed in order to approve the transaction. There is no approved assessment for this user that enables him to perform the operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/oneOfTransactionValidationError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        },
        "callbacks" : {
          "transactionUpdate" : {
            "${yourWebhookAddress}" : {
              "post" : {
                "requestBody" : {
                  "content" : {
                    "application/json" : {
                      "schema" : {
                        "$ref" : "#/components/schemas/transactionStatusObject"
                      }
                    }
                  },
                  "required" : true
                },
                "responses" : {
                  "200" : {
                    "description" : "Your server returns this code if it accepts the callback"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/transactions/{requestId}" : {
      "get" : {
        "tags" : [ "Execute Transaction" ],
        "summary" : "Get a transaction status",
        "operationId" : "getTransaction",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "requestId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/transactionStatusObject"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User of Transaction Log not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Execute Transaction" ],
        "summary" : "Cancel a transaction",
        "operationId" : "deleteTransaction",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "requestId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "NO CONTENT"
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User of Transaction Log not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/documents" : {
      "post" : {
        "tags" : [ "Collect User Data" ],
        "summary" : "Upload a digital document in a user profile (Passport, Company document, etc)",
        "operationId" : "uploadDocument",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 255,
            "pattern" : "^[a-z0-9_-]{3,255}$",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "$ref" : "#/components/schemas/body"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully uploaded the document"
          },
          "400" : {
            "description" : "Missing required fields on document",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/invalidRequestError"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      }
    },
    "/digital-items/{digitalItemId}" : {
      "get" : {
        "tags" : [ "Marketplace" ],
        "summary" : "Get a digital item information",
        "operationId" : "getDigitalItem",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "digitalItemId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 255,
            "pattern" : "^[a-z0-9_-]{3,255}$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/digitalItem"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User or digital item not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Marketplace" ],
        "summary" : "Delete a digital item",
        "operationId" : "deleteDigitalItem",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "digitalItemId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 255,
            "pattern" : "^[a-z0-9_-]{3,255}$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden. Happens when the targeted digital item has been bought or sold.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "Digital Item not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/digital-items" : {
      "get" : {
        "tags" : [ "Marketplace" ],
        "summary" : "Get a list of digital items for the user",
        "operationId" : "getDigitalItems",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 255,
            "pattern" : "^[a-z0-9_-]{3,255}$",
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Offset for pagination. If not specified, the default value is 0.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 9999999,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "Page size for pagination. If not specified, the default value is 20.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortBy",
          "in" : "query",
          "description" : "Sort by field. If not specified, the default value is creation date.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/objectReferencePage"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Marketplace" ],
        "summary" : "Create a list of digital items for the user",
        "operationId" : "createDigitalItems",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 255,
            "pattern" : "^[a-z0-9_-]{3,255}$",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "maxItems" : 100,
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/digitalItem"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "maxItems" : 100,
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/objectReference"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/wallets" : {
      "get" : {
        "tags" : [ "Wallets" ],
        "summary" : "Get a list of wallets for the user",
        "operationId" : "getWallets",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 255,
            "pattern" : "^[a-z0-9_-]{3,255}$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "maxItems" : 100,
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/wallet"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Wallets" ],
        "summary" : "Create a wallet for the user",
        "operationId" : "createWallet",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 255,
            "pattern" : "^[a-z0-9_-]{3,255}$",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/walletCreation"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created a wallet",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/wallet"
                }
              }
            }
          },
          "400" : {
            "description" : "Missing required fields on wallet",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/invalidRequestError"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/wallets/{walletId}" : {
      "summary" : "Delete a wallet for the user",
      "get" : {
        "tags" : [ "Wallets" ],
        "summary" : "Get a wallet details",
        "operationId" : "getWallet",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 255,
            "pattern" : "^[a-z0-9_-]{3,255}$",
            "type" : "string"
          }
        }, {
          "name" : "walletId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 255,
            "pattern" : "^[a-z0-9_-]{3,255}$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/wallet"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Wallets" ],
        "summary" : "Delete a wallet",
        "operationId" : "deleteWallet",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 255,
            "pattern" : "^[a-z0-9_-]{3,255}$",
            "type" : "string"
          }
        }, {
          "name" : "walletId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 255,
            "pattern" : "^[a-z0-9_-]{3,255}$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "User or wallet not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      }
    },
    "/transactions/{requestId}/updates" : {
      "post" : {
        "tags" : [ "Execute Transaction" ],
        "summary" : "Update status on existing transaction",
        "description" : "This endpoint allows adding feedback information to an existing transaction. Here are the possible feedback values with their meaning:\n\n| Feedback | Meaning |\n|----------|---------|\n| `ACCEPTED` | The transaction was accepted by the processor and is deemed to be in a pending state. This feedback is not a final state and should be followed by antoher feedback such as `SETTLED` or `CANCELLED` |\n| `SETTLED`  | The transaction was accepted and fully finalized by the processor. The transfer of value has occured. |\n| `CANCELLED`  | The transaction was accepted but cancelled prior to being settled |\n| `REJECTED` | The transaction was declined by the processor |\n| `REFUNDED` | An intentional, settled transaction was refunded |\n| `CHARGED_BACK` | A settled transaction was disputed and refunded |\n| `ERROR` | The processor returned an error, the transaction is assumed to be non existent from the processor standpoint |\n",
        "operationId" : "provideFeedback",
        "parameters" : [ {
          "name" : "x-pti-client-id",
          "in" : "header",
          "description" : "Client ID provided to you during onboarding.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        }, {
          "name" : "requestId",
          "in" : "path",
          "description" : "Request ID used when the transaction was initially logged",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        } ],
        "requestBody" : {
          "description" : "Feedback to associate to the existing transaction",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/transactionUpdate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Successfully added transaction feedback. Returns the requestId in the id value of the response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/objectReference"
                }
              }
            }
          },
          "400" : {
            "description" : "Missing required fields on transaction feedback",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/invalidRequestError"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "404" : {
            "description" : "Transaction identified by requestId not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unmanagedError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "address" : {
        "type" : "object",
        "properties" : {
          "streetAddress" : {
            "maxLength" : 1024,
            "pattern" : "^[ -~]*$",
            "type" : "string"
          },
          "city" : {
            "maxLength" : 1024,
            "pattern" : "^[ -~]*$",
            "type" : "string"
          },
          "postalCode" : {
            "maxLength" : 1024,
            "pattern" : "^[ -~]*$",
            "type" : "string"
          },
          "stateCode" : {
            "$ref" : "#/components/schemas/stateCode"
          },
          "country" : {
            "$ref" : "#/components/schemas/countryCode"
          },
          "default" : {
            "type" : "boolean"
          }
        },
        "additionalProperties" : false
      },
      "bankAccountPaymentInformation" : {
        "required" : [ "bankAccountNumber", "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "$ref" : "#/components/schemas/externalPaymentInformationType"
          },
          "bankAccountNumber" : {
            "maxLength" : 64,
            "pattern" : "^[ -~]*$",
            "type" : "string"
          },
          "bankSwiftCode" : {
            "maxLength" : 11,
            "pattern" : "[A-Z]{6}[A-Z0-9]{2}([A-Z0-9]{3})?",
            "type" : "string",
            "description" : "Valid bank swift code"
          },
          "bankRoutingNumber" : {
            "maxLength" : 12,
            "minLength" : 7,
            "pattern" : "^[0-9]{7,12}$",
            "type" : "string",
            "description" : "Valid bank routing number, between 7 and 12 digits"
          },
          "bankRoutingCheckDigit" : {
            "maxLength" : 1,
            "minLength" : 1,
            "pattern" : "^[0-9]{1}$",
            "type" : "string",
            "description" : "Valid bank routing check digit, 1 digit"
          },
          "bankAccountTransactionType" : {
            "type" : "string",
            "enum" : [ "WIRE", "ACH" ]
          }
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/externalPaymentInformation"
        } ]
      },
      "bii" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "maxLength" : 1024,
            "pattern" : "^[ -~]*$",
            "type" : "string"
          }
        }
      },
      "business" : {
        "required" : [ "mainRepresentative", "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "$ref" : "#/components/schemas/userType"
          },
          "biis" : {
            "maxItems" : 100,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/oneOfBiiSubTypes"
            }
          },
          "addresses" : {
            "maxItems" : 100,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/address"
            }
          },
          "emails" : {
            "maxItems" : 100,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/email"
            }
          },
          "mainRepresentative" : {
            "$ref" : "#/components/schemas/businessOwner"
          },
          "coOwners" : {
            "maxItems" : 100,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/businessOwner"
            }
          },
          "phones" : {
            "maxItems" : 100,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/phone"
            }
          },
          "sectors" : {
            "maxItems" : 100,
            "type" : "array",
            "items" : {
              "maxLength" : 1024,
              "pattern" : "^[ -~]*$",
              "type" : "string"
            }
          },
          "creationDate" : {
            "maxLength" : 10,
            "pattern" : "^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])$",
            "type" : "string",
            "description" : "ISO 8601 formatted creation date of the business"
          },
          "businessType" : {
            "maxLength" : 50,
            "pattern" : "^[A-Z]+(?:_[A-Z]+)*$",
            "type" : "string"
          },
          "businessName" : {
            "maxLength" : 1024,
            "pattern" : "^[A-Za-z0-9\\-_]{2,1024}$",
            "type" : "string"
          },
          "coutryOfIncorporation" : {
            "maxLength" : 2,
            "pattern" : "^([A-Za-z]{2})$",
            "type" : "string",
            "description" : "ISO 3166 alpha 1 country code, example US"
          }
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/user"
        } ]
      },
      "businessOwner" : {
        "required" : [ "ownershipPercent", "person" ],
        "type" : "object",
        "properties" : {
          "ownershipPercent" : {
            "maximum" : 100,
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32"
          },
          "person" : {
            "$ref" : "#/components/schemas/person"
          }
        },
        "additionalProperties" : false
      },
      "countryCode" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "maxLength" : 2,
            "pattern" : "^([A-Za-z]{2})$",
            "type" : "string",
            "description" : "ISO 3166 alpha 1 country code, example US"
          }
        },
        "additionalProperties" : false
      },
      "encryptedCreditCardPaymentInformation" : {
        "required" : [ "creditCardReference", "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "$ref" : "#/components/schemas/externalPaymentInformationType"
          },
          "encryptedInformation" : {
            "type" : "object",
            "additionalProperties" : {
              "maxLength" : 1024,
              "pattern" : "^[ -~]*$",
              "type" : "string"
            }
          },
          "creditCardLast4" : {
            "maxLength" : 4,
            "minLength" : 4,
            "pattern" : "\\d{4}",
            "type" : "string"
          },
          "cvv" : {
            "pattern" : "^([0-9]){3,4}$",
            "type" : "string",
            "description" : "3 or 4 digits"
          },
          "creditCardType" : {
            "maxLength" : 50,
            "pattern" : "^[\\w\\-\\s]+$",
            "type" : "string",
            "description" : "VISA, MASTERCARD etc"
          },
          "creditCardFirst6" : {
            "maxLength" : 6,
            "minLength" : 6,
            "pattern" : "\\d{6}",
            "type" : "string",
            "description" : "Deprecated, use bin instead",
            "deprecated" : true
          },
          "expirationYear" : {
            "pattern" : "^([0-9]){4}$",
            "type" : "string",
            "description" : "4 digits"
          },
          "expirationMonth" : {
            "pattern" : "^([0-9]){2}$",
            "type" : "string",
            "description" : "2 digits"
          },
          "creditCardBin" : {
            "maxLength" : 8,
            "minLength" : 6,
            "pattern" : "\\d{6,8}",
            "type" : "string"
          },
          "creditCardReference" : {
            "maxLength" : 2048,
            "pattern" : "^[ -~]*$",
            "type" : "string",
            "description" : "Reference to the credit card in our system"
          },
          "cardHolderFirstName" : {
            "maxLength" : 255,
            "minLength" : 3,
            "pattern" : "^[ -~]*$",
            "type" : "string",
            "description" : "first name of card holder"
          },
          "cardHolderLastName" : {
            "maxLength" : 255,
            "minLength" : 3,
            "pattern" : "^[ -~]*$",
            "type" : "string",
            "description" : "first name of card holder"
          },
          "creditCardAddress" : {
            "type" : "object",
            "description" : "cc address",
            "allOf" : [ {
              "$ref" : "#/components/schemas/address"
            } ]
          },
          "transactionDescription" : {
            "maxLength" : 1000,
            "minLength" : 3,
            "pattern" : "^[ -~]*$",
            "type" : "string",
            "description" : "cc transaction description"
          },
          "statementMessage" : {
            "maxLength" : 50,
            "minLength" : 3,
            "pattern" : "^[ -~]*$",
            "type" : "string",
            "description" : "cc statement msg"
          },
          "meta" : {
            "type" : "object",
            "description" : "key/value map of extra meta data for this credit card"
          }
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/externalPaymentInformation"
        } ]
      },
      "ein" : {
        "type" : "object",
        "properties" : {
          "number" : {
            "maxLength" : 16,
            "pattern" : "^([07][1-7]|1[0-6]|2[0-7]|[35][0-9]|[468][0-8]|9[0-589])-?\\d{7}$",
            "type" : "string",
            "description" : "Ein number, properly formatted, example 12-3456789"
          }
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/bii"
        } ]
      },
      "email" : {
        "required" : [ "address" ],
        "type" : "object",
        "properties" : {
          "default" : {
            "type" : "boolean"
          },
          "address" : {
            "maxLength" : 320,
            "pattern" : "^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$",
            "type" : "string",
            "format" : "email"
          }
        },
        "additionalProperties" : false
      },
      "device" : {
        "required" : [ "fingerPrint", "providerName" ],
        "type" : "object",
        "properties" : {
          "fingerPrint" : {
            "pattern" : "^[ -~]*$",
            "type" : "string"
          },
          "providerName" : {
            "type" : "string",
            "enum" : [ "SARDINE", "UNKNOWN" ]
          },
          "deviceData" : {
            "pattern" : "^[ -~]*$",
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "errorType" : {
        "type" : "string",
        "enum" : [ "INVALID_REQUEST", "MISSING_INFORMATION", "INVALID_USER_ASSESSMENT", "ALREADY_IN_PROGRESS", "NO_ERROR" ]
      },
      "oneOfTransactionValidationError" : {
        "example" : {
          "type" : "MISSING_INFORMATION",
          "fields" : [ "FULL_NAME", "EMAIL_ADDRESS" ]
        },
        "oneOf" : [ {
          "$ref" : "#/components/schemas/missingInformationError"
        }, {
          "$ref" : "#/components/schemas/invalidUserAssessmentError"
        }, {
          "$ref" : "#/components/schemas/noAssessmentError"
        } ]
      },
      "noAssessmentError" : {
        "required" : [ "assessment" ],
        "type" : "object",
        "properties" : {
          "assessment" : {
            "type" : "object"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "type" : "NO_ERROR"
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/managedError"
        } ]
      },
      "invalidUserAssessmentError" : {
        "required" : [ "assessment" ],
        "type" : "object",
        "properties" : {
          "assessment" : {
            "type" : "object"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "type" : "INVALID_USER_ASSESSMENT"
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/managedError"
        } ]
      },
      "invalidRequestError" : {
        "required" : [ "errors" ],
        "type" : "object",
        "properties" : {
          "errors" : {
            "maxItems" : 50,
            "type" : "array",
            "items" : {
              "maxLength" : 100,
              "type" : "string"
            }
          }
        },
        "additionalProperties" : false,
        "example" : {
          "type" : "INVALID_REQUEST",
          "errors" : [ "Invalid field: 'amount' must be greater than or equal to 0" ]
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/managedError"
        } ]
      },
      "missingInformationError" : {
        "required" : [ "fields" ],
        "type" : "object",
        "properties" : {
          "fields" : {
            "maxItems" : 20,
            "type" : "array",
            "example" : [ "FULL_NAME", "EMAIL_ADDRESS" ],
            "items" : {
              "$ref" : "#/components/schemas/informationFields"
            }
          }
        },
        "additionalProperties" : false,
        "example" : {
          "type" : "MISSING_INFORMATION",
          "fields" : [ "FULL_NAME", "EMAIL_ADDRESS" ]
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/managedError"
        } ]
      },
      "managedError" : {
        "required" : [ "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "$ref" : "#/components/schemas/errorType"
          }
        },
        "additionalProperties" : true
      },
      "unmanagedError" : {
        "required" : [ "error" ],
        "type" : "object",
        "properties" : {
          "error" : {
            "maxLength" : 100,
            "pattern" : "^[ -~]*$",
            "type" : "string"
          }
        },
        "additionalProperties" : true
      },
      "transactionUpdate" : {
        "required" : [ "feedback", "providerName" ],
        "type" : "object",
        "properties" : {
          "payload" : {
            "type" : "string",
            "format" : "escaped_json",
            "example" : "{\"status\":\"SETTLED\",\"exchangeInfo\":{\"amountDebited\":150.0,\"amountCredited\":1.5},\"providerName\":\"CLIENT_MANAGED_SERVICE\"}"
          },
          "providerName" : {
            "type" : "string",
            "enum" : [ "CHECKOUT", "ADMIN", "CIRCLE", "COINBASE", "FORTE", "UNKNOWN" ]
          },
          "feedback" : {
            "type" : "string",
            "enum" : [ "SETTLED", "ACCEPTED", "CANCELLED", "REJECTED", "REFUNDED", "CHARGED_BACK", "ERROR" ]
          },
          "transactionId" : {
            "maxLength" : 256,
            "pattern" : "^[A-Za-z0-9\\-_]{3,256}$",
            "type" : "string",
            "description" : "A transaction hash or any relevant identifier for the transaction",
            "nullable" : true
          },
          "date" : {
            "maxLength" : 40,
            "pattern" : "^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:\\.\\d{1,9})?(?:Z|[+-][01]\\d:[0-5]\\d)",
            "type" : "string",
            "description" : "Timestamp when the transaction feedback changed. This will be used in transaction reports. If not provided, it will be set to the time at which the api call is made. The format must be compatible with the ISO-8601 standard. e.g. 2022-01-01T00:00:00",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Set of possible transaction feedbacks"
      },
      "executeDepositTransaction" : {
        "required" : [ "sourceMethod" ],
        "type" : "object",
        "properties" : {
          "sourceMethod" : {
            "$ref" : "#/components/schemas/oneOfExternalPaymentMethod"
          },
          "destinationMethod" : {
            "$ref" : "#/components/schemas/walletPaymentMethod"
          }
        },
        "description" : "Fund a wallet with crypto. SourceMethod: external crypto wallet. DestinationMethod: wallet on the platform.",
        "example" : {
          "initiator" : {
            "id" : "36dbe68f-2747-41c6-8748-559588fd3248",
            "type" : "PERSON"
          },
          "sourceMethod" : {
            "currency" : "USD",
            "paymentInformation" : {
              "type" : "ENCRYPTED_CREDIT_CARD",
              "creditCardType" : "mastercard",
              "creditCardLast4" : "2345",
              "creditCardBin" : "123412",
              "expirationMonth" : "12",
              "expirationYear" : "2022",
              "encryptedInformation" : {
                "A" : "hello123"
              },
              "creditCardReference" : "feead9c948a4b3393498cf17816fb289c2d4d80d4ffb5b11a7171c5f6c48f573",
              "statementMessage" : "pti",
              "billingEmail" : "billing@email.com",
              "cardHolderFirstName" : "John",
              "cardHolderLastName" : "Smith",
              "transactionDescription" : "test 123",
              "creditCardAddress" : {
                "streetAddress" : "address",
                "city" : "city",
                "stateCode" : "US-CA",
                "country" : "US",
                "postalCode" : "AAAA"
              }
            },
            "paymentMethodType" : "FIAT"
          },
          "destinationMethod" : {
            "paymentMethodType" : "WALLET",
            "paymentInformation" : {
              "type" : "WALLET",
              "walletId" : "MyUSDWallet"
            }
          },
          "amount" : 200,
          "transactionTotal" : {
            "subtotal" : {
              "amount" : 200,
              "currency" : "USD"
            },
            "fee" : {
              "amount" : 0,
              "currency" : "USD"
            },
            "total" : {
              "amount" : 200,
              "currency" : "USD"
            }
          },
          "type" : "DEPOSIT"
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/transactionType"
        } ]
      },
      "executeTransferTransaction" : {
        "required" : [ "destination", "destinationTransferMethod", "sourceTransferMethod" ],
        "type" : "object",
        "properties" : {
          "sourceTransferMethod" : {
            "$ref" : "#/components/schemas/walletPaymentMethod"
          },
          "destinationTransferMethod" : {
            "$ref" : "#/components/schemas/walletPaymentMethod"
          },
          "destination" : {
            "$ref" : "#/components/schemas/oneOfUserSubTypes"
          }
        },
        "description" : "Transfer between two users. SourceMethod: wallet on the platform. DestinationMethod: wallet on the platform. Destination: destination user.",
        "example" : {
          "initiator" : {
            "id" : "36dbe68f-2747-41c6-8748-559588fd3248",
            "type" : "PERSON"
          },
          "sourceTransferMethod" : {
            "paymentMethodType" : "WALLET",
            "paymentInformation" : {
              "type" : "WALLET",
              "walletId" : "MyUSDWallet"
            }
          },
          "destinationTransferMethod" : {
            "paymentMethodType" : "WALLET",
            "paymentInformation" : {
              "type" : "WALLET",
              "walletId" : "MyUSDWallet2"
            }
          },
          "destination" : {
            "id" : "99dbe68f-2747-41c6-8748-559588fd3248",
            "type" : "PERSON"
          },
          "amount" : 200,
          "type" : "TRANSFER"
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/transactionType"
        } ]
      },
      "executeBuyTransaction" : {
        "required" : [ "digitalItem", "sourceMethod" ],
        "type" : "object",
        "properties" : {
          "digitalItem" : {
            "$ref" : "#/components/schemas/digitalItem"
          },
          "sourceMethod" : {
            "$ref" : "#/components/schemas/oneOfPaymentMethod"
          },
          "seller" : {
            "$ref" : "#/components/schemas/oneOfUserSubTypes"
          },
          "feeRecipients" : {
            "maxItems" : 100,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/feeRecipient"
            }
          }
        },
        "description" : "Buy digital item in the platform. SourceMethod: wallet, token, fiat. DigitalItem: NFT or OTHER.",
        "example" : {
          "initiator" : {
            "id" : "36dbe68f-2747-41c6-8748-559588fd3248",
            "type" : "PERSON"
          },
          "digitalItem" : {
            "itemType" : "NFT",
            "itemReference" : "9c1661bc-5f8c-4d9c-b547-9d1f47459338",
            "itemDescription" : "Rare Elite Shaquille Leonard Level 2",
            "itemTitle" : "LB, Mint Condition, #4/7 From Core 22 Set"
          },
          "sourceMethod" : {
            "paymentMethodType" : "WALLET",
            "paymentInformation" : {
              "type" : "WALLET",
              "walletId" : "MyUSDWallet"
            }
          },
          "seller" : {
            "id" : "99dbe68f-2747-41c6-8748-559588fd3248",
            "type" : "PERSON"
          },
          "amount" : 200,
          "transactionTotal" : {
            "subtotal" : {
              "amount" : 200,
              "currency" : "USD"
            },
            "fee" : {
              "amount" : 0,
              "currency" : "USD"
            },
            "total" : {
              "amount" : 200,
              "currency" : "USD"
            }
          },
          "usdValue" : 200,
          "type" : "BUY",
          "feeRecipients" : [ {
            "feeRecipientId" : "3d85a4fc-b98f-4ab7-96fe-4cc1779fc9c2",
            "walletId" : "USDCreatorWallet",
            "currency" : "USD",
            "feeRecipientType" : "COMMISSION",
            "amount" : 2.5
          } ]
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/transactionType"
        } ]
      },
      "executeSellTransaction" : {
        "required" : [ "destinationMethod", "digitalItem" ],
        "type" : "object",
        "properties" : {
          "digitalItem" : {
            "$ref" : "#/components/schemas/digitalItem"
          },
          "destinationMethod" : {
            "$ref" : "#/components/schemas/oneOfPaymentMethod"
          },
          "buyer" : {
            "$ref" : "#/components/schemas/oneOfUserSubTypes"
          },
          "feeRecipients" : {
            "maxItems" : 100,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/feeRecipient"
            }
          }
        },
        "description" : "Sell digital item in the platform. DestinationMethod: wallet, fiat, token. DigitalItem: NFT, OTHER.",
        "example" : {
          "initiator" : {
            "id" : "36dbe68f-2747-41c6-8748-559588fd3248",
            "type" : "PERSON"
          },
          "digitalItem" : {
            "itemType" : "NFT",
            "itemReference" : "9c1661bc-5f8c-4d9c-b547-9d1f47459338",
            "itemDescription" : "Rare Elite Shaquille Leonard Level 2",
            "itemTitle" : "LB, Mint Condition, #4/7 From Core 22 Set"
          },
          "destinationMethod" : {
            "paymentMethodType" : "WALLET",
            "paymentInformation" : {
              "type" : "WALLET",
              "walletId" : "MyUSDWallet"
            }
          },
          "buyer" : {
            "id" : "99dbe68f-2747-41c6-8748-559588fd3248",
            "type" : "PERSON"
          },
          "amount" : 200,
          "usdValue" : 200,
          "feeRecipients" : [ {
            "feeRecipientId" : "3d85a4fc-b98f-4ab7-96fe-4cc1779fc9c2",
            "walletId" : "USDCreatorWallet",
            "currency" : "USD",
            "feeRecipientType" : "COMMISSION",
            "amount" : 2.5
          } ],
          "type" : "SELL"
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/transactionType"
        } ]
      },
      "executeWithdrawalTransaction" : {
        "required" : [ "destinationMethod" ],
        "type" : "object",
        "properties" : {
          "destinationMethod" : {
            "$ref" : "#/components/schemas/oneOfExternalPaymentMethod"
          },
          "sourceMethod" : {
            "$ref" : "#/components/schemas/walletPaymentMethod"
          }
        },
        "description" : "Withdraw from a wallet to fiat destination. SourceMethod: wallet on the platform. DestinationMethod: fiat payment method.",
        "example" : {
          "initiator" : {
            "id" : "36dbe68f-2747-41c6-8748-559588fd3248",
            "type" : "PERSON"
          },
          "destinationMethod" : {
            "paymentMethodType" : "TOKEN",
            "paymentInformation" : {
              "type" : "TOKEN",
              "tokenAddress" : "0xc0ffee254729296a45a3885639AC7E10F9d54979",
              "tokenType" : "ETH",
              "blockchain" : "ETHEREUM"
            }
          },
          "sourceMethod" : {
            "paymentMethodType" : "WALLET",
            "paymentInformation" : {
              "type" : "WALLET",
              "walletId" : "myEthWallet"
            }
          },
          "amount" : 200,
          "usdValue" : 200,
          "type" : "WITHDRAWAL"
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/transactionType"
        } ]
      },
      "executeSwapTransaction" : {
        "required" : [ "destinationMethod", "sourceMethod" ],
        "type" : "object",
        "properties" : {
          "sourceMethod" : {
            "$ref" : "#/components/schemas/walletPaymentMethod"
          },
          "destinationMethod" : {
            "$ref" : "#/components/schemas/walletPaymentMethod"
          }
        },
        "description" : "Swap currency/crypto for another. SourceMethod: wallet. DestinationMethod: wallet.",
        "example" : {
          "initiator" : {
            "id" : "36dbe68f-2747-41c6-8748-559588fd3248",
            "type" : "PERSON"
          },
          "sourceMethod" : {
            "paymentMethodType" : "WALLET",
            "paymentInformation" : {
              "type" : "WALLET",
              "walletId" : "MyUSDWallet"
            }
          },
          "destinationMethod" : {
            "paymentMethodType" : "WALLET",
            "paymentInformation" : {
              "type" : "WALLET",
              "walletId" : "MyBTCWallet"
            }
          },
          "amount" : 200,
          "usdValue" : 200,
          "type" : "SWAP"
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/transactionType"
        } ]
      },
      "executePaymentTransaction" : {
        "required" : [ "sourceMethod" ],
        "type" : "object",
        "properties" : {
          "sourceMethod" : {
            "$ref" : "#/components/schemas/oneOfPaymentMethod"
          },
          "destinationMethod" : {
            "$ref" : "#/components/schemas/walletPaymentMethod"
          }
        },
        "description" : "Collect payment from the initiator, the beneficiary is the client platform's  specified wallet in the destinationMethod(if specified).",
        "example" : {
          "initiator" : {
            "id" : "36dbe68f-2747-41c6-8748-559588fd3248",
            "type" : "PERSON"
          },
          "sourceMethod" : {
            "paymentMethodType" : "WALLET",
            "paymentInformation" : {
              "type" : "WALLET",
              "walletId" : "MyUSDWallet"
            }
          },
          "destinationMethod" : {
            "paymentMethodType" : "WALLET",
            "paymentInformation" : {
              "type" : "WALLET",
              "walletId" : "client_subscriptions"
            }
          },
          "amount" : 200,
          "usdValue" : 200,
          "type" : "PAYMENT"
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/transactionType"
        } ]
      },
      "executeMintTransaction" : {
        "required" : [ "destination", "destinationMethod" ],
        "type" : "object",
        "properties" : {
          "destination" : {
            "$ref" : "#/components/schemas/oneOfUserSubTypes"
          },
          "destinationMethod" : {
            "$ref" : "#/components/schemas/walletPaymentMethod"
          }
        },
        "description" : "Mint some value on behalf of a user in a wallet. DestinationMethod: wallet on the platform. destination: destination user.",
        "example" : {
          "destination" : {
            "id" : "36dbe68f-2747-41c6-8748-559588fd3248",
            "type" : "PERSON"
          },
          "destinationMethod" : {
            "paymentMethodType" : "WALLET",
            "paymentInformation" : {
              "type" : "WALLET",
              "walletId" : "MyBTCWallet"
            }
          },
          "amount" : 0.55,
          "usdValue" : 200,
          "type" : "MINT"
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/transactionType"
        } ]
      },
      "fiatPaymentMethod" : {
        "required" : [ "paymentMethodType" ],
        "type" : "object",
        "properties" : {
          "paymentMethodType" : {
            "maxLength" : 50,
            "pattern" : "^[A-Z]+(?:_[A-Z]+)*$",
            "type" : "string"
          },
          "currency" : {
            "maxLength" : 3,
            "pattern" : "^([A-Za-z]{1,10})$",
            "type" : "string"
          },
          "paymentInformation" : {
            "$ref" : "#/components/schemas/oneOfFiatPaymentInformation"
          }
        },
        "additionalProperties" : true
      },
      "walletPaymentMethod" : {
        "required" : [ "paymentMethodType" ],
        "type" : "object",
        "properties" : {
          "paymentMethodType" : {
            "maxLength" : 50,
            "pattern" : "^[A-Z]+(?:_[A-Z]+)*$",
            "type" : "string"
          },
          "paymentInformation" : {
            "$ref" : "#/components/schemas/wallet"
          }
        },
        "additionalProperties" : false
      },
      "depositTransaction" : {
        "type" : "object",
        "properties" : {
          "sourceMethod" : {
            "$ref" : "#/components/schemas/oneOfPaymentMethod"
          },
          "destinationMethod" : {
            "$ref" : "#/components/schemas/oneOfPaymentMethod"
          }
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/transactionType"
        } ]
      },
      "itin" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "maxLength" : 11,
            "pattern" : "^9\\d{2}-?((5[0-9]|6[0-5])|(8[3-8])|(9[0-2])|(9[4-9]))-?\\d{4}$",
            "type" : "string",
            "description" : "itin number, properly formatted, example 911-83-1111"
          }
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/pii"
        } ]
      },
      "kyc" : {
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "string",
            "enum" : [ "ACCEPTED", "REFUSED", "MANUAL_REVIEW", "REQUESTED_MORE_INFORMATION" ]
          },
          "tier" : {
            "type" : "integer",
            "description" : "related kyc tier level",
            "format" : "int32"
          },
          "clientMeta" : {
            "type" : "object",
            "description" : "key/value map of extra meta data for this kyc"
          },
          "requestId" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        },
        "additionalProperties" : false
      },
      "name" : {
        "type" : "object",
        "properties" : {
          "firstName" : {
            "maxLength" : 1024,
            "pattern" : "^[ -~]*$",
            "type" : "string",
            "example" : "John"
          },
          "lastName" : {
            "maxLength" : 1024,
            "pattern" : "^[ -~]*$",
            "type" : "string",
            "example" : "Smith"
          },
          "middleName" : {
            "maxLength" : 1024,
            "pattern" : "^[ -~]*$",
            "type" : "string",
            "example" : "Doe"
          }
        },
        "additionalProperties" : false
      },
      "objectReference" : {
        "required" : [ "id", "link" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "maxLength" : 40,
            "pattern" : "^[a-z0-9_-]{3,40}$",
            "type" : "string"
          },
          "link" : {
            "maxLength" : 1022,
            "minLength" : 1,
            "pattern" : "^([\\w.,@?^=%&amp;:/~+#-]*[\\w@?^=%&amp;/\\.~+#-])?$",
            "type" : "string"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "id" : "36dbe68f-2747-41c6-8748-559588fd3248",
          "link" : "https://api.pticlient.com/v1/user/3121df47-7a05-4b42-9db3-d1ff8a29abf0/transactions/36dbe68f-2747-41c6-8748-559588fd3248"
        }
      },
      "oneOfBiiSubTypes" : {
        "required" : [ "type" ],
        "properties" : {
          "type" : {
            "maxLength" : 50,
            "pattern" : "^[A-Z]+(?:_[A-Z]+)*$",
            "type" : "string"
          }
        },
        "discriminator" : {
          "propertyName" : "type"
        },
        "oneOf" : [ {
          "$ref" : "#/components/schemas/ein"
        } ]
      },
      "paymentInformationType" : {
        "type" : "string",
        "enum" : [ "BANK_ACCOUNT", "ENCRYPTED_CREDIT_CARD", "TOKEN", "WALLET" ]
      },
      "externalPaymentInformationType" : {
        "type" : "string",
        "enum" : [ "BANK_ACCOUNT", "ENCRYPTED_CREDIT_CARD", "TOKEN" ]
      },
      "oneOfExternalPaymentInformation" : {
        "example" : {
          "id" : "36dbe68f-2747-41c6-8748-559588fd3248",
          "type" : "ENCRYPTED_CREDIT_CARD",
          "creditCardLast4" : "1234",
          "creditCardBin" : "123456",
          "creditCardReference" : "reference",
          "creditCardAddress" : {
            "streetAddress" : "123 main st",
            "city" : "New York",
            "stateCode" : "US-NY",
            "country" : "US",
            "postalCode" : "10005"
          }
        },
        "discriminator" : {
          "propertyName" : "type",
          "mapping" : {
            "BANK_ACCOUNT" : "#/components/schemas/bankAccountPaymentInformation",
            "ENCRYPTED_CREDIT_CARD" : "#/components/schemas/encryptedCreditCardPaymentInformation",
            "TOKEN" : "#/components/schemas/tokenPaymentInformation"
          }
        },
        "oneOf" : [ {
          "$ref" : "#/components/schemas/encryptedCreditCardPaymentInformation"
        }, {
          "$ref" : "#/components/schemas/bankAccountPaymentInformation"
        }, {
          "$ref" : "#/components/schemas/tokenPaymentInformation"
        } ]
      },
      "oneOfFiatPaymentInformation" : {
        "discriminator" : {
          "propertyName" : "type",
          "mapping" : {
            "ENCRYPTED_CREDIT_CARD" : "#/components/schemas/encryptedCreditCardPaymentInformation",
            "BANK_ACCOUNT" : "#/components/schemas/bankAccountPaymentInformation"
          }
        },
        "oneOf" : [ {
          "$ref" : "#/components/schemas/encryptedCreditCardPaymentInformation"
        }, {
          "$ref" : "#/components/schemas/bankAccountPaymentInformation"
        } ]
      },
      "oneOfExternalPaymentMethod" : {
        "discriminator" : {
          "propertyName" : "paymentMethodType",
          "mapping" : {
            "FIAT" : "#/components/schemas/fiatPaymentMethod",
            "TOKEN" : "#/components/schemas/tokenPaymentMethod"
          }
        },
        "oneOf" : [ {
          "$ref" : "#/components/schemas/tokenPaymentMethod"
        }, {
          "$ref" : "#/components/schemas/fiatPaymentMethod"
        } ]
      },
      "oneOfPaymentMethod" : {
        "discriminator" : {
          "propertyName" : "paymentMethodType",
          "mapping" : {
            "FIAT" : "#/components/schemas/fiatPaymentMethod",
            "WALLET" : "#/components/schemas/walletPaymentMethod",
            "TOKEN" : "#/components/schemas/tokenPaymentMethod"
          }
        },
        "oneOf" : [ {
          "$ref" : "#/components/schemas/tokenPaymentMethod"
        }, {
          "$ref" : "#/components/schemas/fiatPaymentMethod"
        }, {
          "$ref" : "#/components/schemas/walletPaymentMethod"
        } ]
      },
      "oneOfPiiSubTypes" : {
        "required" : [ "type" ],
        "properties" : {
          "type" : {
            "maxLength" : 50,
            "pattern" : "^[A-Z]+(?:_[A-Z]+)*$",
            "type" : "string"
          }
        },
        "discriminator" : {
          "propertyName" : "type"
        },
        "oneOf" : [ {
          "$ref" : "#/components/schemas/ssn"
        }, {
          "$ref" : "#/components/schemas/itin"
        } ]
      },
      "oneOfTransactionSubTypes" : {
        "required" : [ "type" ],
        "properties" : {
          "type" : {
            "maxLength" : 50,
            "pattern" : "^[A-Z]+(?:_[A-Z]+)*$",
            "type" : "string"
          }
        },
        "example" : {
          "initiator" : {
            "id" : "36dbe68f-2747-41c6-8748-559588fd3248",
            "type" : "PERSON"
          },
          "sourceMethod" : {
            "paymentMethodType" : "WALLET",
            "paymentInformation" : {
              "type" : "WALLET",
              "walletId" : "MyUSDWallet"
            }
          },
          "destinationMethod" : {
            "paymentMethodType" : "WALLET",
            "paymentInformation" : {
              "type" : "WALLET",
              "walletId" : "MyUSDWallet2"
            }
          },
          "destination" : {
            "id" : "99dbe68f-2747-41c6-8748-559588fd3248",
            "type" : "PERSON"
          },
          "amount" : 200,
          "type" : "TRANSFER"
        },
        "discriminator" : {
          "propertyName" : "type"
        },
        "oneOf" : [ {
          "$ref" : "#/components/schemas/depositTransaction"
        }, {
          "$ref" : "#/components/schemas/withdrawalTransaction"
        }, {
          "$ref" : "#/components/schemas/transferTransaction"
        }, {
          "$ref" : "#/components/schemas/sellTransaction"
        }, {
          "$ref" : "#/components/schemas/buyTransaction"
        }, {
          "$ref" : "#/components/schemas/mintTransaction"
        }, {
          "$ref" : "#/components/schemas/swapTransaction"
        } ]
      },
      "oneOfUserSubTypes" : {
        "example" : {
          "id" : "36dbe68f-2747-41c6-8748-559588fd3248",
          "type" : "PERSON",
          "dateOfBirth" : "1988-09-28",
          "name" : {
            "firstName" : "test",
            "lastName" : "test",
            "middleName" : "cucumber"
          },
          "emails" : [ {
            "address" : "johnsmith@test.com",
            "default" : true
          } ],
          "phones" : [ {
            "number" : "12345678901",
            "type" : "WORK",
            "default" : true
          } ],
          "addresses" : [ {
            "streetAddress" : "1, main street",
            "city" : "New Hampshire",
            "postalCode" : "10005",
            "stateCode" : "US-NH",
            "country" : "US",
            "default" : true
          } ],
          "sourceOfFunds" : "Creator earnings"
        },
        "discriminator" : {
          "propertyName" : "type",
          "mapping" : {
            "PERSON" : "#/components/schemas/person",
            "BUSINESS" : "#/components/schemas/business"
          }
        },
        "oneOf" : [ {
          "$ref" : "#/components/schemas/person"
        }, {
          "$ref" : "#/components/schemas/business"
        } ]
      },
      "externalPaymentInformation" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "maxLength" : 40,
            "pattern" : "^[a-z0-9_-]{3,40}$",
            "type" : "string",
            "description" : "Unique identifier for the payment information, must be used to refer to a payment information for a payment"
          },
          "billingEmail" : {
            "maxLength" : 320,
            "pattern" : "^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$",
            "type" : "string",
            "format" : "email"
          }
        }
      },
      "person" : {
        "required" : [ "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "$ref" : "#/components/schemas/userType"
          },
          "addresses" : {
            "maxItems" : 100,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/address"
            }
          },
          "piis" : {
            "maxItems" : 5000,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/oneOfPiiSubTypes"
            }
          },
          "emails" : {
            "maxItems" : 100,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/email"
            }
          },
          "devices" : {
            "maxItems" : 100,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/device"
            }
          },
          "phones" : {
            "maxItems" : 100,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/phone"
            }
          },
          "name" : {
            "$ref" : "#/components/schemas/name"
          },
          "gender" : {
            "maxLength" : 1,
            "minLength" : 1,
            "pattern" : "^[0129MmfFoOnNuU]",
            "type" : "string",
            "description" : "ISO/IEC 5218 / vCard4"
          },
          "dateOfBirth" : {
            "maxLength" : 10,
            "pattern" : "^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])$",
            "type" : "string",
            "description" : "ISO 8601"
          },
          "countryOfCitizenship" : {
            "maxLength" : 200,
            "pattern" : "^([A-Za-z][A-Za-z],?)+",
            "type" : "string",
            "description" : "Comma separated list of ISO 3166 alpha 1 country codes"
          }
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/user"
        } ]
      },
      "pii" : {
        "required" : [ "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "maxLength" : 50,
            "pattern" : "^[ -~]*$",
            "type" : "string"
          }
        },
        "discriminator" : {
          "propertyName" : "type"
        }
      },
      "phone" : {
        "type" : "object",
        "properties" : {
          "default" : {
            "type" : "boolean"
          },
          "number" : {
            "maxLength" : 64,
            "pattern" : "/^[+]?(?:\\(\\d+(?:\\.\\d+)?\\)|\\d+(?:\\.\\d+)?)(?:[ -]?(?:\\(\\d+(?:\\.\\d+)?\\)|\\d+(?:\\.\\d+)?))*(?:[ ]?(?:x|ext)\\.?[ ]?\\d{1,5})?$/",
            "type" : "string",
            "description" : "Phone number, can be formatted using plus sign, spaces, parenthesis or hyphens"
          },
          "type" : {
            "maxLength" : 10,
            "pattern" : "^(WORK|HOME|MOBILE)",
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "ssn" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "maxLength" : 11,
            "pattern" : "^\\d{3}-?\\d{2}-?\\d{4}$",
            "type" : "string",
            "description" : "Valid us formatted SSN, example 222-22-2222"
          }
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/pii"
        } ]
      },
      "stateCode" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "maxLength" : 5,
            "pattern" : "^([A-Za-z]{2}-[A-Za-z0-9]{2})$",
            "type" : "string",
            "description" : "ISO 3166-2 state code, example US-CA"
          }
        },
        "additionalProperties" : false
      },
      "tokenPaymentInformation" : {
        "required" : [ "blockchain", "tokenAddress", "tokenType", "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "$ref" : "#/components/schemas/externalPaymentInformationType"
          },
          "tokenAddress" : {
            "maxLength" : 1050,
            "pattern" : "^[ -~]*$",
            "type" : "string",
            "description" : "Blockchain address"
          },
          "tokenType" : {
            "maxLength" : 25,
            "pattern" : "^([A-Za-z]{3})$",
            "type" : "string",
            "description" : "Token symbol that your user is trading"
          },
          "blockchain" : {
            "maxLength" : 150,
            "pattern" : ".*",
            "type" : "string",
            "description" : "Blockchain name, example ethereum, bitcoin, solana",
            "default" : "Ethereum"
          },
          "privateBlockchain" : {
            "type" : "boolean",
            "description" : "If blockchain is a private chain",
            "default" : false
          },
          "clientMeta" : {
            "type" : "object",
            "description" : "key/value map of extra meta data for this payment info, for example, it could be useful to add information to a transaction, like if a subtoken asset is involved"
          }
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/externalPaymentInformation"
        } ]
      },
      "tokenPaymentMethodDestination" : {
        "type" : "object",
        "properties" : {
          "paymentInformation" : {
            "$ref" : "#/components/schemas/tokenPaymentInformation"
          }
        },
        "description" : "The destination payment method of the swap(wallet), if available"
      },
      "tokenPaymentMethodSource" : {
        "type" : "object",
        "properties" : {
          "paymentInformation" : {
            "$ref" : "#/components/schemas/tokenPaymentInformation"
          }
        },
        "description" : "The source payment method of the swap(wallet), if available"
      },
      "tokenPaymentMethod" : {
        "required" : [ "paymentMethodType" ],
        "type" : "object",
        "properties" : {
          "paymentMethodType" : {
            "maxLength" : 50,
            "pattern" : "^[A-Z]+(?:_[A-Z]+)*$",
            "type" : "string"
          },
          "paymentInformation" : {
            "$ref" : "#/components/schemas/tokenPaymentInformation"
          }
        },
        "additionalProperties" : true
      },
      "transaction" : {
        "required" : [ "amount", "date", "initiator", "usdValue" ],
        "type" : "object",
        "properties" : {
          "transactionGroupId" : {
            "$ref" : "#/components/schemas/uuidLikeStrTransactionGroup"
          },
          "subClientId" : {
            "$ref" : "#/components/schemas/uuidLikeStrSubClient"
          },
          "transactionTotal" : {
            "$ref" : "#/components/schemas/total"
          },
          "usdValue" : {
            "maximum" : 999999,
            "minimum" : 0,
            "type" : "number",
            "format" : "double"
          },
          "amount" : {
            "maximum" : 999999,
            "minimum" : 0,
            "type" : "number",
            "format" : "double"
          },
          "date" : {
            "maxLength" : 40,
            "pattern" : "^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:\\.\\d{1,9})?(?:Z|[+-][01]\\d:[0-5]\\d)",
            "type" : "string",
            "description" : "ISO-8601"
          },
          "initiator" : {
            "$ref" : "#/components/schemas/oneOfUserSubTypes"
          },
          "ptiMeta" : {
            "type" : "object",
            "additionalProperties" : false,
            "description" : "key/value map of extra meta data for this request (used by PTI)"
          },
          "clientMeta" : {
            "type" : "object",
            "additionalProperties" : false,
            "description" : "key/value map of extra meta data for this request (used by Client)"
          }
        },
        "description" : "The `transactionTotal` field will be assumed to be all zeroes if not provided. If no currency has been provided `USD` will be used. If no amount has been provided `0` will be used"
      },
      "transferTransaction" : {
        "type" : "object",
        "properties" : {
          "sourceTransferMethod" : {
            "$ref" : "#/components/schemas/oneOfPaymentMethod"
          },
          "destinationTransferMethod" : {
            "$ref" : "#/components/schemas/oneOfPaymentMethod"
          },
          "destination" : {
            "$ref" : "#/components/schemas/oneOfUserSubTypes"
          }
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/transactionType"
        } ]
      },
      "sellTransaction" : {
        "type" : "object",
        "properties" : {
          "destinationMethod" : {
            "$ref" : "#/components/schemas/oneOfPaymentMethod"
          },
          "sourceMethod" : {
            "$ref" : "#/components/schemas/oneOfPaymentMethod"
          },
          "digitalItem" : {
            "$ref" : "#/components/schemas/digitalItem"
          },
          "buyer" : {
            "$ref" : "#/components/schemas/oneOfUserSubTypes"
          }
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/transactionType"
        } ]
      },
      "buyTransaction" : {
        "type" : "object",
        "properties" : {
          "sourceMethod" : {
            "$ref" : "#/components/schemas/oneOfPaymentMethod"
          },
          "destinationMethod" : {
            "$ref" : "#/components/schemas/oneOfPaymentMethod"
          },
          "digitalItem" : {
            "$ref" : "#/components/schemas/digitalItem"
          },
          "seller" : {
            "$ref" : "#/components/schemas/oneOfUserSubTypes"
          }
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/transactionType"
        } ]
      },
      "paymentTransaction" : {
        "type" : "object",
        "properties" : {
          "sourceMethod" : {
            "$ref" : "#/components/schemas/oneOfPaymentMethod"
          }
        },
        "description" : "Payment transaction, often this is not initiated by a user itself The destination can be specified, and needs to belong to the root user.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/transactionType"
        } ]
      },
      "mintTransaction" : {
        "type" : "object",
        "properties" : {
          "destination" : {
            "$ref" : "#/components/schemas/oneOfUserSubTypes"
          },
          "destinationMethod" : {
            "$ref" : "#/components/schemas/tokenPaymentMethod"
          }
        },
        "description" : "The action of minting, often this is not initiated by a user itself, so the initiator property is optional. The destination is the beneficiary of the minting action. You can specify the target wallet in the destination method if available.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/transactionType"
        } ]
      },
      "swapTransaction" : {
        "type" : "object",
        "properties" : {
          "destinationMethod" : {
            "$ref" : "#/components/schemas/tokenPaymentMethodDestination"
          },
          "sourceMethod" : {
            "$ref" : "#/components/schemas/tokenPaymentMethodSource"
          }
        },
        "description" : "The action of doing a token swap. Source and destination wallet are provided through the source and destination methods properties.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/transactionType"
        } ]
      },
      "transactionTypeEnum" : {
        "type" : "string",
        "enum" : [ "DEPOSIT", "WITHDRAWAL", "PAYMENT", "TRANSFER", "SELL", "BUY", "MINT", "SWAP" ]
      },
      "transactionType" : {
        "required" : [ "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "$ref" : "#/components/schemas/transactionTypeEnum"
          }
        },
        "discriminator" : {
          "propertyName" : "type"
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/transaction"
        } ]
      },
      "userStatusReason" : {
        "type" : "string",
        "description" : "Reason explaining why the status is BLOCKED or INACTIVE. Same rules as the `status` field apply.",
        "enum" : [ "FRAUD_SUSPICION", "BUSINESS_CO_OWNER", "COMPLIANCE_FLAG" ]
      },
      "userStatus" : {
        "type" : "string",
        "description" : "Status of the user. Only ACTIVE users can appear in API calls.  Calls containing INACTIVE or BLOCKED users will result in an error.  The status cannot be set via API calls that create or update users.  If it is passed in user creation or modification calls, it will be silently ignored.\n",
        "enum" : [ "ACTIVE", "INACTIVE", "BLOCKED" ]
      },
      "user" : {
        "required" : [ "id", "type" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "maxLength" : 255,
            "pattern" : "^[a-z0-9_-]{3,255}$",
            "type" : "string",
            "description" : "Unique identifier for this user. This value MUST be chosen and stored at user creation time."
          },
          "type" : {
            "$ref" : "#/components/schemas/userType"
          },
          "status" : {
            "$ref" : "#/components/schemas/userStatus"
          },
          "statusReason" : {
            "$ref" : "#/components/schemas/userStatusReason"
          },
          "tags" : {
            "maxItems" : 100,
            "type" : "array",
            "description" : "Tag that characterizes the user. Used for internal classification purposes.",
            "items" : {
              "$ref" : "#/components/schemas/tagsType"
            }
          },
          "paymentInformation" : {
            "maxItems" : 100,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/oneOfExternalPaymentInformation"
            }
          },
          "sourceOfFunds" : {
            "maxLength" : 255,
            "pattern" : "^[ -~]*$",
            "type" : "string"
          },
          "userCreationDate" : {
            "maxLength" : 40,
            "pattern" : "^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:\\.\\d{1,9})?(?:Z|[+-][01]\\d:[0-5]\\d)",
            "type" : "string",
            "description" : "Optional ISO-8601 value. Used to provide the date the user was created in your system. If left empty, it will be populated at current time."
          },
          "userPtiMeta" : {
            "type" : "object",
            "description" : "key/value map of extra meta data for this request (used by PTI)"
          },
          "userClientMeta" : {
            "type" : "object",
            "description" : "key/value map of extra meta data for this request (used by Client)"
          }
        },
        "example" : {
          "id" : "36dbe68f-2747-41c6-8748-559588fd3248",
          "type" : "PERSON",
          "dateOfBirth" : "1988-09-28",
          "name" : {
            "firstName" : "test",
            "lastName" : "test",
            "middleName" : "cucumber"
          },
          "emails" : [ {
            "address" : "johnsmith@test.com",
            "default" : true
          } ],
          "phones" : [ {
            "number" : "12345678901",
            "type" : "WORK",
            "default" : true
          } ],
          "addresses" : [ {
            "streetAddress" : "1, main street",
            "city" : "New Hampshire",
            "postalCode" : "10005",
            "stateCode" : "US-NH",
            "country" : "US",
            "default" : true
          } ],
          "sourceOfFunds" : "Creator earnings"
        },
        "discriminator" : {
          "propertyName" : "type"
        }
      },
      "userType" : {
        "type" : "string",
        "description" : "Type of user which represents the legal entity involved in the API action",
        "enum" : [ "PERSON", "BUSINESS" ]
      },
      "userToken" : {
        "required" : [ "accessToken", "expiresAt", "tokenType" ],
        "type" : "object",
        "properties" : {
          "accessToken" : {
            "maxLength" : 4096,
            "minLength" : 128,
            "pattern" : "^[A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+\\/=]*$",
            "type" : "string"
          },
          "expiresAt" : {
            "maximum" : 2147483647,
            "minimum" : 1200000000,
            "type" : "number"
          },
          "tokenType" : {
            "maxLength" : 3,
            "pattern" : "^JWT$",
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "userTokenRequest" : {
        "required" : [ "method", "url" ],
        "type" : "object",
        "properties" : {
          "url" : {
            "maxLength" : 1022,
            "minLength" : 1,
            "pattern" : "^([\\w.,@?^=%&amp;:/~+#-]*[\\w@?^=%&amp;/\\.~+#-])?$",
            "type" : "string"
          },
          "metaInformation" : {
            "maxLength" : 1024,
            "minLength" : 0,
            "pattern" : "^[ -~]*$",
            "type" : "string"
          },
          "method" : {
            "maxLength" : 6,
            "minLength" : 3,
            "pattern" : "^(GET|POST|PUT|PATCH|DELETE|OPTIONS|CONNECT)$",
            "type" : "string"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "url" : "https://api.pticlient.com/v1/user/3121df47-7a05-4b42-9db3-d1ff8a29abf0/transactions/36dbe68f-2747-41c6-8748-559588fd3248",
          "method" : "GET"
        }
      },
      "walletCreation" : {
        "required" : [ "currency", "walletId" ],
        "type" : "object",
        "properties" : {
          "walletId" : {
            "maxLength" : 255,
            "pattern" : "^[A-Za-z]+(?:_[A-Za-z]+)*$",
            "type" : "string"
          },
          "currency" : {
            "maxLength" : 10,
            "pattern" : "^([A-Za-z]{1,10})$",
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "WALLET" ]
          },
          "createDateTime" : {
            "maxLength" : 40,
            "pattern" : "^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:\\.\\d{1,9})?(?:Z|[+-][01]\\d:?[0-5]\\d)",
            "type" : "string",
            "nullable" : true
          }
        },
        "example" : {
          "walletId" : "MyUSDWallet",
          "currency" : "USD",
          "reference" : "0x16Df97AB64d9eb5FF393F9f52F9290566857B07C"
        }
      },
      "wallet" : {
        "type" : "object",
        "properties" : {
          "walletId" : {
            "maxLength" : 255,
            "pattern" : "^[A-Za-z]+(?:_[A-Za-z]+)*$",
            "type" : "string"
          },
          "currency" : {
            "maxLength" : 10,
            "pattern" : "^([A-Za-z]{1,10})$",
            "type" : "string"
          },
          "balance" : {
            "maximum" : 999999,
            "minimum" : 0,
            "type" : "number",
            "format" : "double"
          },
          "reference" : {
            "maxLength" : 1050,
            "pattern" : "^[ -~]*$",
            "type" : "string",
            "description" : "External reference to the wallet(could be bank account number, or blockchain address)"
          },
          "createDateTime" : {
            "maxLength" : 40,
            "pattern" : "^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:\\.\\d{1,9})?(?:Z|[+-][01]\\d:?[0-5]\\d)",
            "type" : "string",
            "nullable" : true
          }
        },
        "example" : {
          "walletId" : "MyUSDWallet",
          "currency" : "USD",
          "type" : "WALLET",
          "reference" : "0x16Df97AB64d9eb5FF393F9f52F9290566857B07C",
          "createDateTime" : "2021-09-28T12:00:00Z",
          "balance" : 1000
        }
      },
      "withdrawalTransaction" : {
        "type" : "object",
        "properties" : {
          "destinationMethod" : {
            "$ref" : "#/components/schemas/oneOfPaymentMethod"
          },
          "sourceMethod" : {
            "$ref" : "#/components/schemas/oneOfPaymentMethod"
          }
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/transactionType"
        } ]
      },
      "documentMetaInformation" : {
        "required" : [ "contentType", "documentType" ],
        "type" : "object",
        "properties" : {
          "documentType" : {
            "type" : "string",
            "enum" : [ "PASSPORT", "PASSPORT_BACK", "ID_CARD", "ID_CARD_BACK", "DRIVER_LICENCE", "DRIVER_LICENCE_BACK", "RESIDENCE_PERMIT", "RESIDENCE_PERMIT_BACK", "SELFIE", "FOUNDING_DOCUMENT" ]
          },
          "contentType" : {
            "maxLength" : 50,
            "type" : "string"
          },
          "originalFileName" : {
            "maxLength" : 255,
            "type" : "string"
          },
          "fileSize" : {
            "maximum" : 999999999,
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32"
          },
          "tags" : {
            "type" : "object",
            "additionalProperties" : {
              "maxLength" : 1024,
              "pattern" : "^[ -~]*$",
              "type" : "string"
            }
          },
          "fileId" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "documentType" : "PASSPORT",
          "contentType" : "image/jpeg",
          "originalFileName" : "passport.jpg",
          "fileSize" : 123456,
          "tags" : {
            "documentCountry" : "US",
            "uploadDate" : "2021-09-01T00:00:00.000Z"
          },
          "fileId" : "36dbe68f-2747-41c6-8748-559588fd3248"
        }
      },
      "idDocumentMetadata" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string",
          "enum" : [ "PERSON_NAME", "DATE_OF_BIRTH", "DOCUMENT_NUMBER", "NATIONALITY", "EXPIRY_DATE" ]
        },
        "example" : {
          "PERSON_NAME" : "John Smith",
          "DATE_OF_BIRTH" : "1988-01-01",
          "DOCUMENT_NUMBER" : "12345",
          "NATIONALITY" : "American",
          "EXPIRY_DATE" : "2023-06-28"
        }
      },
      "kycRequest" : {
        "properties" : {
          "intendedTransactionUsdValue" : {
            "maximum" : 999999,
            "minimum" : 0,
            "type" : "number",
            "description" : "The value of the transaction that the user is intending to perform in USD",
            "format" : "double"
          },
          "ptiMeta" : {
            "type" : "object",
            "additionalProperties" : true,
            "description" : "key/value map of extra meta data for this request (used by PTI)"
          },
          "clientMeta" : {
            "type" : "object",
            "additionalProperties" : true,
            "description" : "key/value map of extra meta data for this request (used by Client)"
          }
        },
        "discriminator" : {
          "propertyName" : "type",
          "mapping" : {
            "PERSON" : "#/components/schemas/person",
            "BUSINESS" : "#/components/schemas/business"
          }
        },
        "oneOf" : [ {
          "$ref" : "#/components/schemas/person"
        }, {
          "$ref" : "#/components/schemas/business"
        } ]
      },
      "uuidLikeStr" : {
        "maxLength" : 64,
        "pattern" : "^[a-z0-9_-]{3,64}$",
        "type" : "string"
      },
      "uuidLikeStrSubClient" : {
        "maxLength" : 64,
        "pattern" : "^[a-z0-9_-]{3,64}$",
        "type" : "string",
        "description" : "If your system is multi-tenant and you have this is the id of your client that is making the request"
      },
      "uuidLikeStrTransactionGroup" : {
        "maxLength" : 64,
        "pattern" : "^[a-z0-9_-]{3,64}$",
        "type" : "string",
        "description" : "If your system performs transactions that are together part of an overall transaction group, use this to tie them together"
      },
      "feeRecipient" : {
        "required" : [ "amount", "currency", "feeRecipientId", "feeRecipientType", "walletId" ],
        "type" : "object",
        "properties" : {
          "feeRecipientId" : {
            "type" : "string",
            "description" : "User ID of the Commission Recipient"
          },
          "walletId" : {
            "maxLength" : 255,
            "pattern" : "^[A-Za-z]+(?:_[A-Za-z]+)*$",
            "type" : "string"
          },
          "currency" : {
            "maxLength" : 10,
            "pattern" : "^([A-Za-z]{1,10})$",
            "type" : "string"
          },
          "amount" : {
            "maximum" : 999999,
            "minimum" : 0,
            "type" : "number"
          },
          "feeRecipientType" : {
            "type" : "string",
            "additionalProperties" : false,
            "enum" : [ "COMMISSION", "BUSINESS" ]
          }
        },
        "additionalProperties" : false,
        "example" : {
          "feeRecipientId" : "MyUserId",
          "walletId" : "MyWalletId",
          "currency" : "USD",
          "amount" : 100,
          "feeRecipientType" : "COMMISSION"
        }
      },
      "digitalItem" : {
        "type" : "object",
        "properties" : {
          "itemReference" : {
            "maxLength" : 128,
            "pattern" : "^[ -~]*$",
            "type" : "string",
            "description" : "Reference information about the item, for example could be the contract address of an NFT item."
          },
          "itemTitle" : {
            "maxLength" : 1024,
            "pattern" : "^[ -~]*$",
            "type" : "string",
            "description" : "The name of the item, for example: ShaggyDog#2"
          },
          "itemDescription" : {
            "maxLength" : 1024,
            "pattern" : "^[ -~]*$",
            "type" : "string",
            "description" : "Description about the item, for example: Shaggy Dog Collection is an NFT for Dog lovers. It is a manually generated NFT created on the Ethereum network."
          },
          "digitalItemType" : {
            "$ref" : "#/components/schemas/digitalItemType"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "itemReference" : "0x16Df97AB64d9eb5FF393F9f52F9290566857B07C",
          "itemTitle" : "ShaggyDog#2",
          "itemDescription" : "Shaggy Dog Collection is an NFT for Dog lovers. It is a manually generated NFT created on the Ethereum network.",
          "itemType" : "NFT"
        }
      },
      "providerName" : {
        "maxLength" : 64,
        "pattern" : "^[A-Za-z0-9\\-_]{3,64}$",
        "type" : "string"
      },
      "transactionAssessStatus" : {
        "type" : "string",
        "additionalProperties" : false,
        "enum" : [ "PENDING", "ERROR", "MANUAL_REVIEW", "PROCEED", "STOP" ]
      },
      "transactionRiskAssessment" : {
        "type" : "string",
        "additionalProperties" : false,
        "enum" : [ "LOW_RISK", "MEDIUM_RISK", "HIGH_RISK" ]
      },
      "resourceType" : {
        "type" : "string",
        "enum" : [ "USER_ASSESSMENT", "TRANSACTION_ASSESSMENT", "TRANSACTION_STATUS", "USER_UPDATE", "TRANSACTION_QUOTE_UPDATE" ]
      },
      "userAssessStatus" : {
        "type" : "string",
        "additionalProperties" : false,
        "enum" : [ "PENDING", "ERROR", "UNDER_REVIEW", "REQUESTED_MORE_INFORMATION", "ACCEPTED", "REFUSED" ]
      },
      "transactionStatus" : {
        "type" : "string",
        "additionalProperties" : false,
        "enum" : [ "PENDING", "ERROR", "MANUAL_REVIEW", "REFUSED", "AUTHORIZED", "BAD_REQUEST", "SETTLED", "CAPTURED", "CHARGED_BACK", "CHARGED_BACK_REVERSED", "CANCELED", "REFUNDED" ]
      },
      "actionStatus" : {
        "type" : "object",
        "properties" : {
          "resourceType" : {
            "$ref" : "#/components/schemas/resourceType"
          },
          "requestId" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          },
          "clientId" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          },
          "userId" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          },
          "date" : {
            "maxLength" : 40,
            "pattern" : "^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:\\.\\d{1,9})?(?:Z|[+-][01]\\d:[0-5]\\d)",
            "type" : "string",
            "description" : "ISO-8601"
          }
        },
        "additionalProperties" : false
      },
      "providerResponseCode" : {
        "type" : "string",
        "additionalProperties" : false,
        "enum" : [ "PTI_TECHNICAL_ERROR", "PAYMENT_PROVIDER_TECHNICAL_ERROR", "FRAUD_SUSPICION", "BLOCKED_COUNTRY", "AVS_CHECK_FAILED", "CVV_CHECK_FAILED", "PAYMENT_INSTRUMENT_PROBLEM", "PAYMENT_PROVIDER_DECLINED" ]
      },
      "providerResponseCategory" : {
        "type" : "string",
        "additionalProperties" : false,
        "enum" : [ "ERROR", "SOFT_DECLINE", "HARD_DECLINE" ]
      },
      "paymentStatusDetail" : {
        "type" : "object",
        "properties" : {
          "providerResponseCode" : {
            "$ref" : "#/components/schemas/providerResponseCode"
          },
          "providerResponseCategory" : {
            "$ref" : "#/components/schemas/providerResponseCategory"
          }
        },
        "additionalProperties" : false
      },
      "transactionStatusObject" : {
        "type" : "object",
        "properties" : {
          "status" : {
            "$ref" : "#/components/schemas/transactionStatus"
          },
          "transactionType" : {
            "$ref" : "#/components/schemas/transactionTypeEnum"
          },
          "paymentMethod" : {
            "$ref" : "#/components/schemas/paymentInformationType"
          },
          "paymentStatusDetail" : {
            "$ref" : "#/components/schemas/paymentStatusDetail"
          },
          "amount" : {
            "maximum" : 999999,
            "minimum" : 0,
            "type" : "number"
          },
          "transactionGroupId" : {
            "$ref" : "#/components/schemas/uuidLikeStrTransactionGroup"
          },
          "billingEmail" : {
            "maxLength" : 320,
            "pattern" : "^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$",
            "type" : "string",
            "format" : "email"
          },
          "total" : {
            "$ref" : "#/components/schemas/total"
          },
          "currency" : {
            "maxLength" : 3,
            "pattern" : "^([A-Za-z]{3,10})$",
            "type" : "string"
          },
          "additionalInfos" : {
            "type" : "object",
            "description" : "key/value map of extra information"
          }
        },
        "additionalProperties" : false,
        "description" : "Status of a transaction request. The date property is the date that the transaction has been initiated.",
        "example" : {
          "resourceType" : "TRANSACTION_STATUS",
          "clientId" : "4121df47-7a05-4b42-9db3-d1ff8a29abf0",
          "userId" : "5121df47-7a05-4b42-9db3-d1ff8a29abf0",
          "transactionGroupId" : "4121df47-7a05-4b42-9db3-d1ff8a29abf0",
          "requestId" : "3121df47-7a05-4b42-9db3-d1ff8a29abf0",
          "status" : "REFUSED",
          "date" : "2021-09-01T00:00:00.000Z",
          "amount" : 100,
          "currency" : "USD",
          "transactionType" : "DEPOSIT",
          "meta" : {
            "transactionId" : "3121df47-7a05-4b42-9db3-d1ff8a29abf0"
          },
          "paymentStatusDetail" : {
            "providerResponseCode" : "AVS_CHECK_FAILED",
            "providerResponseCategory" : "SOFT_DECLINE"
          },
          "total" : {
            "fee" : {
              "amount" : 0.01,
              "currency" : "USD"
            },
            "total" : {
              "amount" : 100.01,
              "currency" : "USD"
            },
            "subtotal" : {
              "amount" : 100,
              "currency" : "USD"
            }
          }
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/actionStatus"
        } ]
      },
      "tagsType" : {
        "type" : "string",
        "enum" : [ "CREATOR" ]
      },
      "complianceProviderResponseCode" : {
        "type" : "string",
        "enum" : [ "FRAUD_SUSPICION", "HIGH_RISK_WALLET", "TRANSACTION_VELOCITY_VIOLATION", "GEO_FENCING_VIOLATION", "BLOCKED_JURISDICTION", "SANCTION_SCREENING" ]
      },
      "userStatusObject" : {
        "type" : "object",
        "properties" : {
          "resourceType" : {
            "$ref" : "#/components/schemas/resourceType"
          },
          "clientId" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          },
          "userId" : {
            "$ref" : "#/components/schemas/uuidLikeStr"
          },
          "statusReason" : {
            "$ref" : "#/components/schemas/userStatusReason"
          },
          "status" : {
            "$ref" : "#/components/schemas/userStatus"
          }
        },
        "description" : "Update in the status of a user. You will receive this when the user status changes from the value initially recorded in the system.",
        "example" : {
          "resourceType" : "USER_UPDATE",
          "clientId" : "4121df47-7a05-4b42-9db3-d1ff8a29abf0",
          "userId" : "5121df47-7a05-4b42-9db3-d1ff8a29abf0",
          "statusReason" : "FRAUD_SUSPICION",
          "status" : "BLOCKED"
        }
      },
      "transactionAssessStatusObject" : {
        "type" : "object",
        "properties" : {
          "assessment" : {
            "$ref" : "#/components/schemas/transactionAssessStatus"
          },
          "risk" : {
            "$ref" : "#/components/schemas/transactionRiskAssessment"
          },
          "amount" : {
            "maximum" : 999999,
            "minimum" : 0,
            "type" : "number"
          },
          "transactionType" : {
            "$ref" : "#/components/schemas/transactionTypeEnum"
          },
          "transactionGroupId" : {
            "$ref" : "#/components/schemas/uuidLikeStrTransactionGroup"
          },
          "meta" : {
            "type" : "object",
            "description" : "key/value map of extra information"
          },
          "transactionMonitoringResultDetail" : {
            "$ref" : "#/components/schemas/transactionAssessStatusObject_transactionMonitoringResultDetail"
          }
        },
        "additionalProperties" : false,
        "description" : "Status of a transaction assessment request. The date property is the date that the reported transaction occurred.",
        "example" : {
          "resourceType" : "TRANSACTION_ASSESSMENT",
          "date" : "2021-09-01T00:00:00.000Z",
          "clientId" : "4121df47-7a05-4b42-9db3-d1ff8a29abf0",
          "userId" : "5121df47-7a05-4b42-9db3-d1ff8a29abf0",
          "requestId" : "3121df47-7a05-4b42-9db3-d1ff8a29abf0",
          "transactionGroupId" : "4121df47-7a05-4b42-9db3-d1ff8a29abf0",
          "assessment" : "STOP",
          "risk" : "HIGH_RISK",
          "amount" : 100,
          "transactionType" : "DEPOSIT",
          "meta" : {
            "transactionId" : "3121df47-7a05-4b42-9db3-d1ff8a29abf0"
          },
          "transactionMonitoringResultDetail" : {
            "complianceProviderResponseCode" : "FRAUD_SUSPICION"
          }
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/actionStatus"
        } ]
      },
      "transactionQuoteStatusObject" : {
        "type" : "object",
        "properties" : {
          "total" : {
            "$ref" : "#/components/schemas/total"
          }
        },
        "description" : "Status of a transaction quote request. The date property is the date that the quote request has been initiated.",
        "example" : {
          "resourceType" : "TRANSACTION_QUOTE_UPDATE",
          "date" : "2021-09-01T00:00:00.000Z",
          "clientId" : "4121df47-7a05-4b42-9db3-d1ff8a29abf0",
          "userId" : "5121df47-7a05-4b42-9db3-d1ff8a29abf0",
          "requestId" : "3121df47-7a05-4b42-9db3-d1ff8a29abf0",
          "total" : {
            "fee" : {
              "amount" : 0.01,
              "currency" : "USD"
            },
            "total" : {
              "amount" : 100.01,
              "currency" : "USD"
            },
            "subtotal" : {
              "amount" : 100,
              "currency" : "USD"
            }
          }
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/actionStatus"
        } ]
      },
      "userPage" : {
        "type" : "object",
        "properties" : {
          "content" : {
            "maxItems" : 100,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/oneOfUserSubTypes"
            }
          }
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/page"
        } ]
      },
      "page" : {
        "type" : "object",
        "properties" : {
          "totalPages" : {
            "maximum" : 9999999,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32"
          },
          "size" : {
            "maximum" : 100,
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32"
          },
          "totalElements" : {
            "maximum" : 99999999,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32"
          },
          "last" : {
            "type" : "boolean"
          },
          "numberOfElements" : {
            "maximum" : 99999999,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32"
          },
          "pageable" : {
            "$ref" : "#/components/schemas/pageable"
          },
          "sort" : {
            "$ref" : "#/components/schemas/page_sort"
          },
          "first" : {
            "type" : "boolean"
          },
          "empty" : {
            "type" : "boolean"
          }
        },
        "additionalProperties" : false
      },
      "pageable" : {
        "type" : "object",
        "properties" : {
          "pageNumber" : {
            "maximum" : 9999999,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32"
          },
          "pageSize" : {
            "maximum" : 100,
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32"
          },
          "offset" : {
            "maximum" : 9999999,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32"
          },
          "paged" : {
            "type" : "boolean"
          },
          "unpaged" : {
            "type" : "boolean"
          }
        },
        "additionalProperties" : false
      },
      "objectReferencePage" : {
        "type" : "object",
        "properties" : {
          "page" : {
            "maximum" : 9999999,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32"
          },
          "pageSize" : {
            "maximum" : 100,
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32"
          },
          "total" : {
            "maximum" : 99999999,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32"
          },
          "items" : {
            "maxItems" : 100,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/objectReference"
            }
          }
        },
        "additionalProperties" : false,
        "example" : {
          "page" : 0,
          "pageSize" : 100,
          "total" : 2,
          "items" : [ {
            "id" : "36dbe68f-2747-41c6-8748-559588fd3248",
            "link" : "https://api.pticlient.com/v1/user/36dbe68f-2747-41c6-8748-559588fd3248"
          }, {
            "id" : "36dbe68f-2747-41c6-8748-559588fd3249",
            "link" : "https://api.pticlient.com/v1/user/36dbe68f-2747-41c6-8748-559588fd3249"
          } ]
        }
      },
      "kycProviderResponseCode" : {
        "type" : "string",
        "enum" : [ "FRAUD_SUSPICION", "HIGH_RISK_WALLET", "COMPLIANCE_FLAG", "SELFIE_BLURRY", "RESTRICTED_REGION", "SANCTION_SCREENING", "INVALID_DOCUMENTS" ]
      },
      "userAssessStatusObject" : {
        "type" : "object",
        "properties" : {
          "assessment" : {
            "$ref" : "#/components/schemas/userAssessStatus"
          },
          "meta" : {
            "type" : "object",
            "description" : "key/value map of extra information"
          },
          "tier" : {
            "type" : "integer",
            "format" : "int32"
          },
          "refusalReason" : {
            "$ref" : "#/components/schemas/kycProviderResponseCode"
          }
        },
        "additionalProperties" : false,
        "description" : "Status of a user assessment request. The date property is the date that the assessment has been initiated.",
        "example" : {
          "resourceType" : "USER_ASSESSMENT",
          "clientId" : "4121df47-7a05-4b42-9db3-d1ff8a29abf0",
          "userId" : "5121df47-7a05-4b42-9db3-d1ff8a29abf0",
          "requestId" : "3121df47-7a05-4b42-9db3-d1ff8a29abf0",
          "assessment" : "REFUSED",
          "tier" : 1,
          "date" : "2021-09-01T00:00:00.000Z",
          "refusalReason" : "FRAUD_SUSPICION"
        },
        "allOf" : [ {
          "$ref" : "#/components/schemas/actionStatus"
        } ]
      },
      "digitalItemType" : {
        "type" : "string",
        "additionalProperties" : false,
        "enum" : [ "NFT", "OTHER" ]
      },
      "informationFields" : {
        "type" : "string",
        "additionalProperties" : false,
        "enum" : [ "FULL_NAME", "EMAIL_ADDRESS", "PHYSICAL_ADDRESS", "BIRTH_DATE", "PHONE_NUMBER", "TOKEN_ADDRESS", "US_CITIZENSHIP", "SOURCE_OF_FUNDS" ]
      },
      "cost" : {
        "type" : "object",
        "properties" : {
          "amount" : {
            "maximum" : 999999,
            "minimum" : 0,
            "type" : "number"
          },
          "currency" : {
            "maxLength" : 10,
            "pattern" : "^([A-Za-z]{1,10})$",
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "total" : {
        "type" : "object",
        "properties" : {
          "fee" : {
            "$ref" : "#/components/schemas/cost"
          },
          "total" : {
            "$ref" : "#/components/schemas/cost"
          },
          "subtotal" : {
            "$ref" : "#/components/schemas/cost"
          }
        },
        "additionalProperties" : false
      },
      "body" : {
        "type" : "object",
        "properties" : {
          "metaInformation" : {
            "$ref" : "#/components/schemas/documentMetaInformation"
          },
          "idDocumentMetaData" : {
            "$ref" : "#/components/schemas/idDocumentMetadata"
          },
          "document" : {
            "maxLength" : 5242880,
            "type" : "string",
            "format" : "binary"
          }
        },
        "additionalProperties" : false
      },
      "transactionAssessStatusObject_transactionMonitoringResultDetail" : {
        "type" : "object",
        "properties" : {
          "complianceProviderResponseCode" : {
            "$ref" : "#/components/schemas/complianceProviderResponseCode"
          }
        }
      },
      "page_sort" : {
        "type" : "object",
        "properties" : {
          "sorted" : {
            "type" : "boolean"
          },
          "unsorted" : {
            "type" : "boolean"
          },
          "empty" : {
            "type" : "boolean"
          }
        }
      }
    },
    "parameters" : {
      "mandatoryScenarioIdHeaderParam" : {
        "name" : "x-pti-scenario-id",
        "in" : "header",
        "description" : "Represents a user action under which transaction amounts will accumulated and will control the User assessment requirements. The values this header can take must be agreed upon and communicated to PTI. Setting unknown values here will generate an error.",
        "required" : true,
        "style" : "simple",
        "explode" : false,
        "schema" : {
          "$ref" : "#/components/schemas/uuidLikeStr"
        }
      },
      "disableWebhookHeaderParam" : {
        "name" : "x-pti-disable-webhook",
        "in" : "header",
        "description" : "Set to true to disable webhook calls for this request.",
        "required" : false,
        "style" : "simple",
        "explode" : false,
        "schema" : {
          "type" : "boolean"
        }
      },
      "providerNameHeaderParam" : {
        "name" : "x-pti-provider-name",
        "in" : "header",
        "description" : "Used to specify which provider is responsible for handling the given operation. Ignored if the client configuration is not set for passive mode.\n",
        "required" : false,
        "style" : "simple",
        "explode" : false,
        "schema" : {
          "$ref" : "#/components/schemas/providerName"
        }
      },
      "requestIdHeaderParam" : {
        "name" : "x-pti-request-id",
        "in" : "header",
        "description" : "Unique identifier of the request. This ID must be provided and stored by the client of this API at the creation of a transaction. This ID is attached to all PTI internal operations as well as the webhook calls. This ID is required to post feedback about a transaction and get support from PTI for a problem on a transaction. Creating two transactions having the same requestId is not allowed.\n",
        "required" : true,
        "style" : "simple",
        "explode" : false,
        "schema" : {
          "$ref" : "#/components/schemas/uuidLikeStr"
        }
      },
      "sessionIdHeaderParam" : {
        "name" : "x-pti-session-id",
        "in" : "header",
        "description" : "Session ID associated to a UI session for a specific user. Should match the value passed to the PTI SDK at initialization.",
        "required" : false,
        "style" : "simple",
        "explode" : false,
        "schema" : {
          "$ref" : "#/components/schemas/uuidLikeStr"
        }
      },
      "pageSizeParam" : {
        "name" : "size",
        "in" : "query",
        "description" : "Page size for pagination. If not specified, the default value is 20.",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "maximum" : 100,
          "minimum" : 0,
          "type" : "integer",
          "format" : "int32"
        }
      },
      "externalPaymentInformationTypeParam" : {
        "name" : "type",
        "in" : "query",
        "description" : "Type of external payment information. If not specified, the default value is ENCRYPTED_CREDIT_CARD. This is used to filter the external payment information by type.",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "$ref" : "#/components/schemas/externalPaymentInformationType"
        }
      },
      "offsetParam" : {
        "name" : "page",
        "in" : "query",
        "description" : "Offset for pagination. If not specified, the default value is 0.",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "maximum" : 9999999,
          "minimum" : 0,
          "type" : "integer",
          "format" : "int32"
        }
      },
      "sortByParam" : {
        "name" : "sortBy",
        "in" : "query",
        "description" : "Sort by field. If not specified, the default value is creation date.",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "clientIdHeaderParam" : {
        "name" : "x-pti-client-id",
        "in" : "header",
        "description" : "Client ID provided to you during onboarding.",
        "required" : true,
        "style" : "simple",
        "explode" : false,
        "schema" : {
          "$ref" : "#/components/schemas/uuidLikeStr"
        }
      }
    },
    "securitySchemes" : {
      "signature" : {
        "type" : "http",
        "description" : "Client signature for a specific request. Header x-pti-signature",
        "scheme" : "bearer",
        "bearerFormat" : "Digest"
      },
      "userToken" : {
        "type" : "http",
        "description" : "Single use token generated for a specific request(JWT Format). Header x-pti-token",
        "scheme" : "bearer",
        "bearerFormat" : "JWT"
      }
    }
  }
}